OBJECT Table 99000771 Production BOM Header
{
  OBJECT-PROPERTIES
  {
    Date=22/11/17;
    Time=12:00:00;
    Version List=NAVW111.00;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Description;
    OnInsert=BEGIN
               MfgSetup.GET;
               IF "No." = '' THEN BEGIN
                 MfgSetup.TESTFIELD("Production BOM Nos.");
                 NoSeriesMgt.InitSeries(MfgSetup."Production BOM Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               "Creation Date" := TODAY;
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
             END;

    OnDelete=VAR
               Item@1000 : Record 27;
             BEGIN
               Item.SETRANGE("Production BOM No.","No.");
               IF NOT Item.ISEMPTY THEN
                 ERROR(Text000);

               ProdBOMLine.SETRANGE("Production BOM No.","No.");
               ProdBOMLine.DELETEALL(TRUE);

               ProdBOMVersion.SETRANGE("Production BOM No.","No.");
               ProdBOMVersion.DELETEALL;

               MfgComment.SETRANGE("Table Name",MfgComment."Table Name"::"Production BOM Header");
               MfgComment.SETRANGE("No.","No.");
               MfgComment.DELETEALL;
             END;

    OnRename=BEGIN
               IF Status = Status::Certified THEN
                 ERROR(Text002,TABLECAPTION,FIELDCAPTION(Status),FORMAT(Status));
             END;

    CaptionML=[ENU=Production BOM Header;
               ENG=Production BOM Header];
    LookupPageID=Page99000787;
    DrillDownPageID=Page99000787;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              ENG=No.] }
    { 10  ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                "Search Name" := Description;
                                                              END;

                                                   CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 11  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENG=Description 2] }
    { 12  ;   ;Search Name         ;Code50        ;CaptionML=[ENU=Search Name;
                                                              ENG=Search Name] }
    { 21  ;   ;Unit of Measure Code;Code10        ;TableRelation="Unit of Measure";
                                                   OnValidate=VAR
                                                                Item@1000 : Record 27;
                                                                ItemUnitOfMeasure@1001 : Record 5404;
                                                              BEGIN
                                                                IF Status = Status::Certified THEN
                                                                  FIELDERROR(Status);
                                                                Item.SETCURRENTKEY("Production BOM No.");
                                                                Item.SETRANGE("Production BOM No.","No.");
                                                                IF Item.FINDSET THEN
                                                                  REPEAT
                                                                    ItemUnitOfMeasure.GET(Item."No.","Unit of Measure Code");
                                                                  UNTIL Item.NEXT = 0;
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENG=Unit of Measure Code] }
    { 22  ;   ;Low-Level Code      ;Integer       ;CaptionML=[ENU=Low-Level Code;
                                                              ENG=Low-Level Code];
                                                   Editable=No }
    { 25  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Manufacturing Comment Line" WHERE (Table Name=CONST(Production BOM Header),
                                                                                                         No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ENG=Comment];
                                                   Editable=No }
    { 40  ;   ;Creation Date       ;Date          ;CaptionML=[ENU=Creation Date;
                                                              ENG=Creation Date];
                                                   Editable=No }
    { 43  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ENG=Last Date Modified];
                                                   Editable=No }
    { 45  ;   ;Status              ;Option        ;OnValidate=VAR
                                                                PlanningAssignment@1000 : Record 99000850;
                                                                MfgSetup@1004 : Record 99000765;
                                                                ProdBOMCheck@1001 : Codeunit 99000769;
                                                              BEGIN
                                                                IF (Status <> xRec.Status) AND (Status = Status::Certified) THEN BEGIN
                                                                  MfgSetup.LOCKTABLE;
                                                                  MfgSetup.GET;
                                                                  ProdBOMCheck.ProdBOMLineCheck("No.",'');
                                                                  "Low-Level Code" := 0;
                                                                  ProdBOMCheck.RUN(Rec);
                                                                  PlanningAssignment.NewBOM("No.");
                                                                END;
                                                                IF Status = Status::Closed THEN BEGIN
                                                                  IF CONFIRM(
                                                                       Text001,FALSE)
                                                                  THEN BEGIN
                                                                    ProdBOMVersion.SETRANGE("Production BOM No.","No.");
                                                                    IF ProdBOMVersion.FIND('-') THEN
                                                                      REPEAT
                                                                        ProdBOMVersion.Status := ProdBOMVersion.Status::Closed;
                                                                        ProdBOMVersion.MODIFY;
                                                                      UNTIL ProdBOMVersion.NEXT = 0;
                                                                  END ELSE
                                                                    Status := xRec.Status;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              ENG=Status];
                                                   OptionCaptionML=[ENU=New,Certified,Under Development,Closed;
                                                                    ENG=New,Certified,Under Development,Closed];
                                                   OptionString=New,Certified,Under Development,Closed }
    { 50  ;   ;Version Nos.        ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Version Nos.;
                                                              ENG=Version Nos.] }
    { 51  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENG=No. Series];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Description                              }
    {    ;Status                                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=This Production BOM is being used on Items.;ENG=This Production BOM is being used on Items.';
      Text001@1001 : TextConst 'ENU=All versions attached to the BOM will be closed. Close BOM?;ENG=All versions attached to the BOM will be closed. Close BOM?';
      MfgSetup@1002 : Record 99000765;
      ProdBOMHeader@1004 : Record 99000771;
      ProdBOMVersion@1005 : Record 99000779;
      ProdBOMLine@1006 : Record 99000772;
      MfgComment@1007 : Record 99000770;
      NoSeriesMgt@1008 : Codeunit 396;
      Text002@1009 : TextConst 'ENU=You cannot rename the %1 when %2 is %3.;ENG=You cannot rename the %1 when %2 is %3.';

    [External]
    PROCEDURE AssistEdit@2(OldProdBOMHeader@1000 : Record 99000771) : Boolean;
    BEGIN
      WITH ProdBOMHeader DO BEGIN
        ProdBOMHeader := Rec;
        MfgSetup.GET;
        MfgSetup.TESTFIELD("Production BOM Nos.");
        IF NoSeriesMgt.SelectSeries(MfgSetup."Production BOM Nos.",OldProdBOMHeader."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := ProdBOMHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 1501 Workflow Management
{
  OBJECT-PROPERTIES
  {
    Date=25/02/19;
    Time=12:00:00;
    Version List=NAVW111.00.00.28629;
  }
  PROPERTIES
  {
    Permissions=TableData 1501=r,
                TableData 1502=r,
                TableData 1504=rimd,
                TableData 1506=rimd,
                TableData 1522=rimd,
                TableData 1523=d,
                TableData 1525=rimd,
                TableData 1526=rimd,
                TableData 1530=rimd,
                TableData 1531=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WorkflowRecordManagement@1000 : Codeunit 1503;
      AlwaysTxt@1001 : TextConst 'ENU=<Always>;ENG=<Always>';
      CombinedConditionTxt@1002 : TextConst '@@@={Locked};ENU="%1; %2";ENG="%1; %2"';

    [External]
    PROCEDURE TrackWorkflow@2(Variant@1000 : Variant;VAR WorkflowStepInstance@1001 : Record 1504);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      WorkflowStepInstance.MoveForward(Variant);
      RecRef.GETTABLE(Variant);
      UpdateRelatedTableValues(RecRef);

      IF IsWorkflowCompleted(WorkflowStepInstance) THEN
        ArchiveWorkflowInstance(WorkflowStepInstance);
    END;

    [External]
    PROCEDURE FindWorkflowStepInstance@1(Variant@1000 : Variant;xVariant@1002 : Variant;VAR WorkflowStepInstance@1001 : Record 1504;FunctionName@1007 : Code[128]) : Boolean;
    BEGIN
      EXIT(FindWorkflowStepInstanceWithOptionalWorkflowStart(Variant,xVariant,WorkflowStepInstance,FunctionName,TRUE));
    END;

    [External]
    PROCEDURE CanExecuteWorkflow@28(Variant@1002 : Variant;FunctionName@1000 : Code[128]) : Boolean;
    VAR
      WorkflowStepInstance@1001 : Record 1504;
    BEGIN
      EXIT(FindWorkflowStepInstanceWithOptionalWorkflowStart(Variant,Variant,WorkflowStepInstance,FunctionName,FALSE));
    END;

    LOCAL PROCEDURE FindWorkflowStepInstanceWithOptionalWorkflowStart@30(Variant@1000 : Variant;xVariant@1009 : Variant;VAR WorkflowStepInstance@1001 : Record 1504;FunctionName@1007 : Code[128];StartWorkflow@1008 : Boolean) : Boolean;
    VAR
      Workflow@1002 : Record 1501;
      WorkflowRule@1011 : Record 1524;
      WorkflowStepInstanceLoop@1004 : Record 1504;
      WorkflowStepInstance2@1006 : Record 1504;
      RecRef@1005 : RecordRef;
      xRecRef@1010 : RecordRef;
      ActiveStepInstanceFound@1003 : Boolean;
    BEGIN
      RecRef.GETTABLE(Variant);
      xRecRef.GETTABLE(xVariant);

      IF NOT StartWorkflow THEN BEGIN
        Workflow.SETRANGE(Enabled,TRUE);
        IF Workflow.ISEMPTY THEN BEGIN
          WorkflowStepInstanceLoop.SETRANGE(Type,WorkflowStepInstanceLoop.Type::"Event");
          WorkflowStepInstanceLoop.SETRANGE(Status,WorkflowStepInstanceLoop.Status::Active);
          WorkflowStepInstanceLoop.SETRANGE("Function Name",FunctionName);
          IF WorkflowStepInstanceLoop.ISEMPTY THEN
            EXIT(FALSE);
        END;
      END;

      WITH WorkflowStepInstanceLoop DO BEGIN
        RESET;
        SETRANGE(Type,Type::"Event");
        SETRANGE(Status,Status::Active);
        SETRANGE("Function Name",FunctionName);
        SETCURRENTKEY("Sequence No.");

        IF FINDSET THEN
          REPEAT
            IF WorkflowStepInstance2.GET(ID,"Workflow Code","Previous Workflow Step ID") THEN
              IF (FORMAT(WorkflowStepInstance2."Record ID") = FORMAT(RecRef.RECORDID)) AND
                 (WorkflowStepInstance2.Status IN [WorkflowStepInstance2.Status::Completed,WorkflowStepInstance2.Status::Processing])
              THEN BEGIN
                ActiveStepInstanceFound := TRUE;
                IF WorkflowStepInstance.GET(ID,"Workflow Code","Workflow Step ID") THEN BEGIN
                  WorkflowStepInstance.FindWorkflowRules(WorkflowRule);
                  IF EvaluateCondition(RecRef,xRecRef,WorkflowStepInstance.Argument,WorkflowRule) THEN
                    EXIT(TRUE);
                END;
              END;
          UNTIL NEXT = 0;
      END;

      // If the execution reaches inside this IF, it means that
      // active steps were found but the condition were not met.
      IF ActiveStepInstanceFound THEN
        EXIT(FALSE);

      WorkflowStepInstance.RESET;
      IF FindMatchingWorkflowStepInstance(RecRef,xRecRef,WorkflowStepInstance,FunctionName) THEN
        EXIT(TRUE);

      WorkflowStepInstance.RESET;
      IF FindWorkflow(RecRef,xRecRef,FunctionName,Workflow) THEN BEGIN
        IF StartWorkflow THEN
          InstantiateWorkflow(Workflow,FunctionName,WorkflowStepInstance);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE MarkChildrenStatus@14(WorkflowStepInstance@1002 : Record 1504;NewStatus@1000 : Option);
    VAR
      ChildWorkflowStepInstance@1001 : Record 1504;
    BEGIN
      ChildWorkflowStepInstance.SETRANGE("Workflow Code",WorkflowStepInstance."Workflow Code");
      ChildWorkflowStepInstance.SETRANGE("Previous Workflow Step ID",WorkflowStepInstance."Workflow Step ID");
      ChildWorkflowStepInstance.SETRANGE(ID,WorkflowStepInstance.ID);
      ChildWorkflowStepInstance.SETFILTER(Status,'<>%1',WorkflowStepInstance.Status::Processing);
      ChildWorkflowStepInstance.MODIFYALL(Status,NewStatus,TRUE);
    END;

    [External]
    PROCEDURE MarkSiblingStatus@13(WorkflowStepInstance@1002 : Record 1504;NewStatus@1000 : Option);
    VAR
      SiblingWorkflowStepInstance@1001 : Record 1504;
    BEGIN
      SiblingWorkflowStepInstance.SETRANGE("Workflow Code",WorkflowStepInstance."Workflow Code");
      SiblingWorkflowStepInstance.SETRANGE(ID,WorkflowStepInstance.ID);
      SiblingWorkflowStepInstance.SETRANGE("Previous Workflow Step ID",WorkflowStepInstance."Previous Workflow Step ID");
      SiblingWorkflowStepInstance.SETFILTER("Workflow Step ID",'<>%1',WorkflowStepInstance."Workflow Step ID");
      SiblingWorkflowStepInstance.SETFILTER(Status,'<>%1',WorkflowStepInstance.Status::Processing);
      SiblingWorkflowStepInstance.MODIFYALL(Status,NewStatus,TRUE);
    END;

    [External]
    PROCEDURE UpdateStatus@15(VAR WorkflowStepInstance@1000 : Record 1504;NewStatus@1001 : Option;ChildrenStatus@1002 : Option;SiblingsStatus@1003 : Option);
    BEGIN
      WorkflowStepInstance.Status := NewStatus;
      WorkflowStepInstance.MODIFY(TRUE);

      MarkChildrenStatus(WorkflowStepInstance,ChildrenStatus);

      MarkSiblingStatus(WorkflowStepInstance,SiblingsStatus);
    END;

    [External]
    PROCEDURE FindWorkflow@3(RecRef@1000 : RecordRef;xRecRef@1001 : RecordRef;FunctionName@1006 : Code[128];VAR Workflow@1002 : Record 1501) : Boolean;
    VAR
      WorkflowStep@1003 : Record 1502;
      WorkflowRule@1004 : Record 1524;
      WorkflowEvent@1007 : Record 1520;
    BEGIN
      Workflow.SETRANGE(Enabled,TRUE);
      IF Workflow.ISEMPTY THEN
        EXIT(FALSE);

      WorkflowEvent.SETRANGE("Table ID",RecRef.NUMBER);
      WorkflowEvent.SETRANGE("Function Name",FunctionName);

      IF WorkflowEvent.ISEMPTY THEN
        EXIT(FALSE);

      WorkflowStep.SETRANGE("Function Name",FunctionName);
      WorkflowStep.SETRANGE("Entry Point",TRUE);
      WorkflowStep.SETRANGE(Type,WorkflowStep.Type::"Event");
      IF WorkflowStep.FINDSET THEN
        REPEAT
          IF Workflow.GET(WorkflowStep."Workflow Code") THEN
            IF Workflow.Enabled THEN BEGIN
              WorkflowStep.FindWorkflowRules(WorkflowRule);
              IF EvaluateCondition(RecRef,xRecRef,WorkflowStep.Argument,WorkflowRule) THEN BEGIN
                Workflow.GET(Workflow.Code);
                EXIT(TRUE);
              END;
            END;
        UNTIL WorkflowStep.NEXT = 0;
      CLEAR(Workflow);
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE WorkflowExists@19(Variant@1000 : Variant;xVariant@1002 : Variant;FunctionName@1006 : Code[128]) : Boolean;
    VAR
      Workflow@1001 : Record 1501;
      RecordRef@1005 : RecordRef;
      xRecordRef@1003 : RecordRef;
    BEGIN
      RecordRef.GETTABLE(Variant);
      xRecordRef.GETTABLE(xVariant);
      EXIT(FindWorkflow(RecordRef,xRecordRef,FunctionName,Workflow));
    END;

    LOCAL PROCEDURE InstantiateWorkflow@16(Workflow@1000 : Record 1501;FunctionName@1001 : Text;VAR WorkflowStepInstance@1003 : Record 1504);
    BEGIN
      Workflow.CreateInstance(WorkflowStepInstance);
      WorkflowStepInstance.SETRANGE("Function Name",FunctionName);
      WorkflowStepInstance.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateRelatedTableValues@5(RecRef@1000 : RecordRef);
    VAR
      WorkflowTableRelationValue@1001 : Record 1506;
    BEGIN
      WorkflowTableRelationValue.SETRANGE("Record ID",RecRef.RECORDID);
      IF WorkflowTableRelationValue.FINDSET(TRUE) THEN
        REPEAT
          WorkflowTableRelationValue.UpdateRelationValue(RecRef);
        UNTIL WorkflowTableRelationValue.NEXT = 0;
    END;

    LOCAL PROCEDURE FindMatchingWorkflowStepInstance@9(RecRef@1000 : RecordRef;xRecRef@1003 : RecordRef;VAR WorkflowStepInstance@1001 : Record 1504;FunctionName@1007 : Code[128]) : Boolean;
    VAR
      WorkflowRule@1004 : Record 1524;
    BEGIN
      WorkflowStepInstance.SETRANGE("Function Name",FunctionName);
      WorkflowStepInstance.SETRANGE(Type,WorkflowStepInstance.Type::"Event");
      WorkflowStepInstance.SETFILTER(Status,'%1|%2',WorkflowStepInstance.Status::Active,WorkflowStepInstance.Status::Processing);
      IF WorkflowStepInstance.FINDSET THEN BEGIN
        REPEAT
          WorkflowStepInstance.FindWorkflowRules(WorkflowRule);
          IF WorkflowStepInstance.MatchesRecordValues(RecRef) THEN
            IF EvaluateCondition(RecRef,xRecRef,WorkflowStepInstance.Argument,WorkflowRule) THEN
              EXIT(TRUE);
        UNTIL WorkflowStepInstance.NEXT = 0;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE EvaluateCondition@4(RecRef@1000 : RecordRef;xRecRef@1002 : RecordRef;ArgumentID@1001 : GUID;VAR WorkflowRule@1004 : Record 1524) : Boolean;
    VAR
      WorkflowStepArgument@1007 : Record 1523;
      TempBlob@1009 : Record 99008535;
      Result@1003 : Boolean;
    BEGIN
      IF WorkflowStepArgument.GET(ArgumentID) AND WorkflowStepArgument."Event Conditions".HASVALUE THEN BEGIN
        WorkflowStepArgument.CALCFIELDS("Event Conditions");
        TempBlob.INIT;
        TempBlob.Blob := WorkflowStepArgument."Event Conditions";

        Result := EvaluateConditionOnTable(RecRef.RECORDID,RecRef.NUMBER,TempBlob) AND
          EvaluateConditionsOnRelatedTables(RecRef,TempBlob);
      END ELSE
        Result := TRUE;

      Result := Result AND EvaluateRules(RecRef,xRecRef,WorkflowRule);

      EXIT(Result);
    END;

    LOCAL PROCEDURE EvaluateConditionOnTable@6(SourceRecordId@1002 : RecordID;TableId@1000 : Integer;TempBlob@1001 : Record 99008535) : Boolean;
    VAR
      RequestPageParametersHelper@1004 : Codeunit 1530;
      RecRef@1003 : RecordRef;
      LookupRecRef@1005 : RecordRef;
    BEGIN
      RecRef.OPEN(TableId);

      IF NOT RequestPageParametersHelper.ConvertParametersToFilters(RecRef,TempBlob) THEN
        EXIT(TRUE);

      IF NOT LookupRecRef.GET(SourceRecordId) THEN
        EXIT(FALSE);

      LookupRecRef.SETVIEW(RecRef.GETVIEW(FALSE));

      EXIT(LookupRecRef.FIND);
    END;

    LOCAL PROCEDURE EvaluateRules@23(RecRef@1000 : RecordRef;xRecRef@1001 : RecordRef;VAR WorkflowRule@1002 : Record 1524) Result : Boolean;
    BEGIN
      IF RecRef.NUMBER <> xRecRef.NUMBER THEN
        EXIT(FALSE);

      Result := TRUE;
      IF WorkflowRule.FINDSET THEN
        REPEAT
          Result := Result AND WorkflowRule.EvaluateRule(RecRef,xRecRef);
        UNTIL (WorkflowRule.NEXT = 0) OR (NOT Result);

      EXIT(Result);
    END;

    LOCAL PROCEDURE IsWorkflowCompleted@11(WorkflowStepInstance@1000 : Record 1504) : Boolean;
    VAR
      CompletedWorkflowStepInstance@1001 : Record 1504;
    BEGIN
      CompletedWorkflowStepInstance.SETRANGE("Workflow Code",WorkflowStepInstance."Workflow Code");
      CompletedWorkflowStepInstance.SETRANGE(ID,WorkflowStepInstance.ID);
      CompletedWorkflowStepInstance.SETRANGE(Status,WorkflowStepInstance.Status::Active);
      EXIT(CompletedWorkflowStepInstance.ISEMPTY);
    END;

    [External]
    PROCEDURE ArchiveWorkflowInstance@12(WorkflowStepInstance@1001 : Record 1504);
    VAR
      ToArchiveWorkflowStepInstance@1000 : Record 1504;
      WorkflowStepInstanceArchive@1002 : Record 1530;
      ToArchiveWorkflowRecordChange@1003 : Record 1525;
      WorkflowRecordChangeArchive@1004 : Record 1526;
      ToArchiveWorkflowStepArgument@1006 : Record 1523;
    BEGIN
      ToArchiveWorkflowStepInstance.SETRANGE("Workflow Code",WorkflowStepInstance."Workflow Code");
      ToArchiveWorkflowStepInstance.SETRANGE(ID,WorkflowStepInstance.ID);

      IF ToArchiveWorkflowStepInstance.FINDSET THEN BEGIN
        REPEAT
          WorkflowStepInstanceArchive.INIT;
          WorkflowStepInstanceArchive.TRANSFERFIELDS(ToArchiveWorkflowStepInstance);
          IF ToArchiveWorkflowStepArgument.GET(ToArchiveWorkflowStepInstance.Argument) THEN BEGIN
            WorkflowStepInstanceArchive.Argument := CreateWorkflowStepArgumentArchive(ToArchiveWorkflowStepArgument);
            ToArchiveWorkflowStepArgument.DELETE(TRUE);
          END;
          WorkflowStepInstanceArchive.INSERT;
        UNTIL ToArchiveWorkflowStepInstance.NEXT = 0;

        ToArchiveWorkflowStepInstance.DELETEALL(TRUE);
      END;

      ToArchiveWorkflowRecordChange.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);

      IF ToArchiveWorkflowRecordChange.FINDSET THEN BEGIN
        REPEAT
          WorkflowRecordChangeArchive.INIT;
          WorkflowRecordChangeArchive.TRANSFERFIELDS(ToArchiveWorkflowRecordChange);
          WorkflowRecordChangeArchive.INSERT;
        UNTIL ToArchiveWorkflowRecordChange.NEXT = 0;

        ToArchiveWorkflowRecordChange.DELETEALL(TRUE);
      END;
    END;

    LOCAL PROCEDURE EvaluateConditionsOnRelatedTables@7(RecRef@1000 : RecordRef;TempBlob@1001 : Record 99008535) : Boolean;
    VAR
      WorkflowTableRelation@1002 : Record 1505;
      RequestPageParametersHelper@1003 : Codeunit 1530;
      RecRefRelated@1004 : RecordRef;
      List@1008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
    BEGIN
      WorkflowTableRelation.SETRANGE("Table ID",RecRef.NUMBER);

      IF WorkflowTableRelation.FINDSET THEN BEGIN
        List := List.ArrayList;
        REPEAT
          IF NOT List.Contains(WorkflowTableRelation."Related Table ID") THEN BEGIN
            List.Add(WorkflowTableRelation."Related Table ID");
            RecRefRelated.OPEN(WorkflowTableRelation."Related Table ID");
            IF RequestPageParametersHelper.ConvertParametersToFilters(RecRefRelated,TempBlob) THEN BEGIN
              ApplyRelationshipFilters(RecRef,RecRefRelated);
              IF RecRefRelated.ISEMPTY THEN
                EXIT(FALSE);
            END;
            RecRefRelated.CLOSE;
          END;
        UNTIL WorkflowTableRelation.NEXT = 0;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ApplyRelationshipFilters@10(RecRef@1000 : RecordRef;RecRefRelated@1007 : RecordRef);
    VAR
      WorkflowTableRelation@1002 : Record 1505;
      FieldRefSrc@1005 : FieldRef;
      FieldRefRelated@1006 : FieldRef;
    BEGIN
      WorkflowTableRelation.SETRANGE("Table ID",RecRef.NUMBER);
      WorkflowTableRelation.SETRANGE("Related Table ID",RecRefRelated.NUMBER);
      IF WorkflowTableRelation.FINDSET THEN
        REPEAT
          FieldRefRelated := RecRefRelated.FIELD(WorkflowTableRelation."Related Field ID");
          FieldRefSrc := RecRef.FIELD(WorkflowTableRelation."Field ID");
          FieldRefRelated.SETRANGE(FieldRefSrc.VALUE);
        UNTIL WorkflowTableRelation.NEXT = 0
    END;

    [External]
    PROCEDURE FindResponse@8(VAR ResponseWorkflowStepInstance@1000 : Record 1504;PreviousWorkflowStepInstance@1001 : Record 1504) : Boolean;
    BEGIN
      ResponseWorkflowStepInstance.SETRANGE("Workflow Code",PreviousWorkflowStepInstance."Workflow Code");
      ResponseWorkflowStepInstance.SETRANGE(ID,PreviousWorkflowStepInstance.ID);
      ResponseWorkflowStepInstance.SETRANGE(Type,ResponseWorkflowStepInstance.Type::Response);
      ResponseWorkflowStepInstance.SETRANGE("Previous Workflow Step ID",PreviousWorkflowStepInstance."Workflow Step ID");
      EXIT(ResponseWorkflowStepInstance.FINDFIRST);
    END;

    [External]
    PROCEDURE FindEventWorkflowStepInstance@18(VAR WorkflowStepInstance@1000 : Record 1504;FunctionName@1001 : Code[128];Variant@1002 : Variant;xVariant@1005 : Variant) : Boolean;
    VAR
      Workflow@1004 : Record 1501;
      WorkflowEvent@1003 : Record 1520;
    BEGIN
      Workflow.SETRANGE(Enabled,TRUE);
      IF WorkflowStepInstance.ISEMPTY AND Workflow.ISEMPTY THEN
        EXIT(FALSE);

      WorkflowEvent.GET(FunctionName);

      EXIT(FindWorkflowStepInstance(Variant,xVariant,WorkflowStepInstance,WorkflowEvent."Function Name"));
    END;

    [External]
    PROCEDURE HandleEvent@20(FunctionName@1001 : Code[128];Variant@1000 : Variant);
    BEGIN
      HandleEventWithxRec(FunctionName,Variant,Variant)
    END;

    [External]
    PROCEDURE HandleEventWithxRec@25(FunctionName@1001 : Code[128];Variant@1000 : Variant;xVariant@1003 : Variant);
    VAR
      ActionableWorkflowStepInstance@1002 : Record 1504;
      RecRef@1004 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      IF RecRef.ISTEMPORARY THEN
        EXIT;
      IF FindEventWorkflowStepInstance(ActionableWorkflowStepInstance,FunctionName,Variant,xVariant) THEN
        ExecuteResponses(Variant,xVariant,ActionableWorkflowStepInstance);
    END;

    [External]
    PROCEDURE HandleEventOnKnownWorkflowInstance@26(FunctionName@1001 : Code[128];Variant@1000 : Variant;WorkflowStepInstanceID@1003 : GUID);
    BEGIN
      HandleEventWithxRecOnKnownWorkflowInstance(FunctionName,Variant,Variant,WorkflowStepInstanceID)
    END;

    [External]
    PROCEDURE HandleEventWithxRecOnKnownWorkflowInstance@31(FunctionName@1001 : Code[128];Variant@1000 : Variant;xVariant@1005 : Variant;WorkflowStepInstanceID@1003 : GUID);
    VAR
      WorkflowStepInstance@1006 : Record 1504;
      ActionableWorkflowStepInstance@1002 : Record 1504;
      WorkflowRule@1007 : Record 1524;
      RecRef@1004 : RecordRef;
      xRecRef@1009 : RecordRef;
      ActionableStepFound@1008 : Boolean;
    BEGIN
      RecRef.GETTABLE(Variant);
      xRecRef.GETTABLE(xVariant);

      WorkflowStepInstance.SETRANGE(ID,WorkflowStepInstanceID);
      WorkflowStepInstance.SETRANGE(Status,ActionableWorkflowStepInstance.Status::Active);
      WorkflowStepInstance.SETRANGE("Function Name",FunctionName);
      IF WorkflowStepInstance.FINDSET THEN
        REPEAT
          WorkflowStepInstance.FindWorkflowRules(WorkflowRule);
          IF EvaluateCondition(RecRef,xRecRef,WorkflowStepInstance.Argument,WorkflowRule) THEN BEGIN
            ActionableWorkflowStepInstance := WorkflowStepInstance;
            ActionableStepFound := TRUE;
          END;
        UNTIL (WorkflowStepInstance.NEXT = 0) OR ActionableStepFound;

      IF ActionableStepFound THEN
        ExecuteResponses(Variant,xVariant,ActionableWorkflowStepInstance);
    END;

    [External]
    PROCEDURE ExecuteResponses@22(Variant@1000 : Variant;xVariant@1005 : Variant;ActionableWorkflowStepInstance@1001 : Record 1504);
    VAR
      ResponseWorkflowStepInstance@1002 : Record 1504;
      WorkflowResponseHandling@1003 : Codeunit 1521;
      RecRef@1008 : RecordRef;
      Variant1@1004 : Variant;
    BEGIN
      IF NOT CanExecuteEvent(ActionableWorkflowStepInstance) THEN BEGIN
        StoreEventForLaterProcessing(Variant,xVariant,ActionableWorkflowStepInstance);

        IF ActionableWorkflowStepInstance.Status <> ActionableWorkflowStepInstance.Status::Completed THEN BEGIN
          ActionableWorkflowStepInstance.Status := ActionableWorkflowStepInstance.Status::Processing;
          ActionableWorkflowStepInstance.MODIFY(TRUE);
        END;

        EXIT;
      END;

      RecRef.GETTABLE(Variant);

      UpdateStatus(ActionableWorkflowStepInstance,ActionableWorkflowStepInstance.Status::Completed,
        ActionableWorkflowStepInstance.Status::Active,ActionableWorkflowStepInstance.Status::Ignored);

      UpdateStepAndRelatedTableData(ActionableWorkflowStepInstance,RecRef);

      ChangeStatusForResponsesAndEvents(ActionableWorkflowStepInstance);

      Variant1 := Variant;

      WHILE FindResponse(ResponseWorkflowStepInstance,ActionableWorkflowStepInstance) DO BEGIN
        UpdateStepAndRelatedTableData(ResponseWorkflowStepInstance,RecRef);

        WorkflowResponseHandling.ExecuteResponse(Variant1,ResponseWorkflowStepInstance,xVariant);

        UpdateStatusForResponse(ResponseWorkflowStepInstance);

        ActionableWorkflowStepInstance := ResponseWorkflowStepInstance;
        CLEAR(ResponseWorkflowStepInstance);
      END;

      ExecuteQueuedEvents;

      IF IsWorkflowCompleted(ActionableWorkflowStepInstance) THEN
        ArchiveWorkflowInstance(ActionableWorkflowStepInstance);
    END;

    LOCAL PROCEDURE CanExecuteEvent@24(WorkflowStepInstance@1000 : Record 1504) : Boolean;
    VAR
      ProcessingWorkflowStepInstance@1001 : Record 1504;
    BEGIN
      ProcessingWorkflowStepInstance.SETRANGE(ID,WorkflowStepInstance.ID);
      ProcessingWorkflowStepInstance.SETRANGE(Status,WorkflowStepInstance.Status::Processing);
      ProcessingWorkflowStepInstance.SETFILTER("Workflow Step ID",'<>%1',WorkflowStepInstance."Workflow Step ID");
      EXIT(ProcessingWorkflowStepInstance.ISEMPTY);
    END;

    LOCAL PROCEDURE StoreEventForLaterProcessing@32(Variant@1000 : Variant;xVariant@1004 : Variant;WorkflowStepInstance@1001 : Record 1504);
    VAR
      WorkflowEventQueue@1003 : Record 1522;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      WorkflowEventQueue.INIT;
      WorkflowEventQueue."Session ID" := SESSIONID;
      WorkflowEventQueue."Step Record ID" := WorkflowStepInstance.RECORDID;
      WorkflowEventQueue."Record ID" := RecRef.RECORDID;
      WorkflowEventQueue."Record Index" := WorkflowRecordManagement.BackupRecord(Variant);
      WorkflowEventQueue."xRecord Index" := WorkflowRecordManagement.BackupRecord(xVariant);
      WorkflowEventQueue.INSERT(TRUE);
    END;

    LOCAL PROCEDURE ExecuteQueuedEvents@21();
    VAR
      WorkflowEventQueue@1001 : Record 1522;
      WorkflowStepInstance@1003 : Record 1504;
      WorkflowRule@1006 : Record 1524;
      RecRef@1000 : RecordRef;
      xRecRef@1002 : RecordRef;
      Variant@1004 : Variant;
      xVariant@1005 : Variant;
    BEGIN
      WorkflowEventQueue.SETRANGE("Session ID",SESSIONID);
      IF WorkflowEventQueue.FINDSET THEN
        REPEAT
          WorkflowStepInstance.GET(WorkflowEventQueue."Step Record ID");
          IF WorkflowStepInstance.Status = WorkflowStepInstance.Status::Processing THEN BEGIN
            WorkflowRecordManagement.RestoreRecord(WorkflowEventQueue."Record Index",Variant);
            WorkflowRecordManagement.RestoreRecord(WorkflowEventQueue."xRecord Index",xVariant);
            RecRef.GETTABLE(Variant);
            xRecRef.GETTABLE(xVariant);
            WorkflowStepInstance.FindWorkflowRules(WorkflowRule);
            IF EvaluateCondition(RecRef,xRecRef,WorkflowStepInstance.Argument,WorkflowRule) THEN BEGIN
              ExecuteResponses(RecRef,xRecRef,WorkflowStepInstance);
              WorkflowEventQueue.DELETE;
            END;
          END;
        UNTIL WorkflowEventQueue.NEXT = 0;
    END;

    [External]
    PROCEDURE ChangeStatusForResponsesAndEvents@17(WorkflowStepInstance@1000 : Record 1504);
    VAR
      MarkWorkflowStepInstance@1001 : Record 1504;
      WorkflowEventQueue@1002 : Record 1522;
    BEGIN
      MarkWorkflowStepInstance.SETRANGE(ID,WorkflowStepInstance.ID);
      MarkWorkflowStepInstance.SETRANGE("Workflow Code",WorkflowStepInstance."Workflow Code");
      MarkWorkflowStepInstance.SETRANGE("Previous Workflow Step ID",WorkflowStepInstance."Workflow Step ID");
      IF MarkWorkflowStepInstance.FINDSET THEN
        REPEAT
          IF MarkWorkflowStepInstance.Type = MarkWorkflowStepInstance.Type::Response THEN BEGIN
            MarkWorkflowStepInstance.Status := MarkWorkflowStepInstance.Status::Processing;
            MarkWorkflowStepInstance.MODIFY(TRUE);
            ChangeStatusForResponsesAndEvents(MarkWorkflowStepInstance);
          END ELSE BEGIN
            // check if queued event
            WorkflowEventQueue.SETRANGE("Session ID",SESSIONID);
            WorkflowEventQueue.SETRANGE("Step Record ID",MarkWorkflowStepInstance."Record ID");
            IF WorkflowEventQueue.ISEMPTY THEN BEGIN
              MarkWorkflowStepInstance.Status := MarkWorkflowStepInstance.Status::Active;
              MarkWorkflowStepInstance.MODIFY(TRUE);
            END;
          END;
        UNTIL MarkWorkflowStepInstance.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateStepAndRelatedTableData@27(VAR WorkflowStepInstance@1001 : Record 1504;RecRef@1000 : RecordRef);
    BEGIN
      WorkflowStepInstance."Record ID" := RecRef.RECORDID;
      WorkflowStepInstance.MODIFY(TRUE);

      UpdateRelatedTableValues(RecRef);

      IF NOT WorkflowStepInstance.TableRelationValuesExist(RecRef) THEN
        WorkflowStepInstance.SetTableRelationValues(RecRef);
    END;

    LOCAL PROCEDURE UpdateStatusForResponse@61(VAR WorkflowStepInstance@1000 : Record 1504);
    VAR
      NextWorkflowStepInstance@1001 : Record 1504;
    BEGIN
      IF WorkflowStepInstance."Next Workflow Step ID" <> 0 THEN BEGIN
        NextWorkflowStepInstance.GET(WorkflowStepInstance.ID,
          WorkflowStepInstance."Workflow Code",WorkflowStepInstance."Next Workflow Step ID");

        CASE NextWorkflowStepInstance.Type OF
          NextWorkflowStepInstance.Type::"Event":
            UpdateStatus(NextWorkflowStepInstance,NextWorkflowStepInstance.Status::Active,
              NextWorkflowStepInstance.Status::Inactive,NextWorkflowStepInstance.Status::Ignored);
          NextWorkflowStepInstance.Type::Response:
            UpdateStatus(NextWorkflowStepInstance,NextWorkflowStepInstance.Status::Completed,
              NextWorkflowStepInstance.Status::Active,NextWorkflowStepInstance.Status::Ignored);
        END;
      END;
      UpdateStatus(WorkflowStepInstance,WorkflowStepInstance.Status::Completed,
        WorkflowStepInstance.Status::Active,WorkflowStepInstance.Status::Ignored);
    END;

    [External]
    PROCEDURE EnabledWorkflowExist@29(TableNo@1002 : Integer;EventFilter@1003 : Text) : Boolean;
    VAR
      WorkflowDefinition@1000 : Query 1502;
    BEGIN
      WorkflowDefinition.SETRANGE(Table_ID,TableNo);
      WorkflowDefinition.SETRANGE(Entry_Point,TRUE);
      WorkflowDefinition.SETRANGE(Enabled,TRUE);
      WorkflowDefinition.SETRANGE(Template,FALSE);
      WorkflowDefinition.SETRANGE(Type,WorkflowDefinition.Type::"Event");
      WorkflowDefinition.SETFILTER(Function_Name,EventFilter);
      WorkflowDefinition.OPEN;
      EXIT(WorkflowDefinition.READ);
    END;

    [External]
    PROCEDURE NavigateToWorkflows@33(TableNo@1008 : Integer;EventFilter@1009 : Text);
    VAR
      Workflow@1006 : Record 1501;
      TempWorkflowBuffer@1007 : TEMPORARY Record 1500;
      Workflows@1005 : Page 1500;
      WorkflowDefinition@1003 : Query 1502;
      Count@1002 : Integer;
      WorkflowFilter@1001 : Text;
      CategoryFilter@1000 : Text;
    BEGIN
      WorkflowDefinition.SETRANGE(Table_ID,TableNo);
      WorkflowDefinition.SETRANGE(Entry_Point,TRUE);
      WorkflowDefinition.SETRANGE(Enabled,TRUE);
      WorkflowDefinition.SETRANGE(Template,FALSE);
      WorkflowDefinition.SETRANGE(Type,WorkflowDefinition.Type::"Event");
      WorkflowDefinition.SETFILTER(Function_Name,EventFilter);
      WorkflowDefinition.OPEN;

      WHILE WorkflowDefinition.READ DO BEGIN
        Workflow.GET(WorkflowDefinition.Code);
        BuildFilter(WorkflowFilter,Workflow.Code);
        BuildFilter(CategoryFilter,Workflow.Category);
        Count += 1;
      END;

      IF Count = 1 THEN BEGIN
        Workflow.GET(WorkflowFilter);
        PAGE.RUNMODAL(PAGE::Workflow,Workflow);
      END ELSE BEGIN
        TempWorkflowBuffer.InitBufferForWorkflows(TempWorkflowBuffer);
        TempWorkflowBuffer.SETFILTER("Workflow Code",WorkflowFilter);
        TempWorkflowBuffer.SETFILTER("Category Code",CategoryFilter);
        Workflows.SetWorkflowBufferRec(TempWorkflowBuffer);
        Workflows.RUNMODAL;
      END;
    END;

    LOCAL PROCEDURE BuildFilter@36(VAR InitialFilter@1000 : Text;NewValue@1001 : Text);
    BEGIN
      IF STRPOS(InitialFilter,NewValue) = 0 THEN BEGIN
        IF STRLEN(InitialFilter) > 0 THEN
          InitialFilter += '|';
        InitialFilter += NewValue;
      END;
    END;

    LOCAL PROCEDURE CreateWorkflowStepArgumentArchive@34(ToArchiveWorkflowStepArgument@1001 : Record 1523) : GUID;
    VAR
      WorkflowStepArgumentArchive@1000 : Record 1531;
    BEGIN
      WorkflowStepArgumentArchive.INIT;
      WorkflowStepArgumentArchive.TRANSFERFIELDS(ToArchiveWorkflowStepArgument);
      WorkflowStepArgumentArchive."Original Record ID" := ToArchiveWorkflowStepArgument.RECORDID;
      WorkflowStepArgumentArchive.INSERT(TRUE);

      EXIT(WorkflowStepArgumentArchive.ID);
    END;

    [External]
    PROCEDURE BuildConditionDisplay@35(WorkflowStep@1002 : Record 1502) Condition : Text[100];
    VAR
      RuleAsText@1001 : Text;
    BEGIN
      Condition := COPYSTR(WorkflowStep.GetConditionAsDisplayText,1,MAXSTRLEN(Condition));
      RuleAsText := WorkflowStep.GetRuleAsDisplayText;
      IF RuleAsText <> '' THEN
        IF Condition = '' THEN
          Condition := COPYSTR(RuleAsText,1,MAXSTRLEN(Condition))
        ELSE
          Condition := COPYSTR(STRSUBSTNO(CombinedConditionTxt,Condition,RuleAsText),1,MAXSTRLEN(Condition));

      IF Condition = '' THEN
        Condition := AlwaysTxt;
    END;

    [External]
    PROCEDURE GetWebhookClientLink@37(ClientId@1000 : GUID;ClientType@1001 : Text) : Text;
    VAR
      FlowServiceMgt@1002 : Codeunit 6400;
    BEGIN
      IF NOT ISNULLGUID(ClientId) THEN
        CASE ClientType OF
          'Flow':
            EXIT(FlowServiceMgt.GetFlowDetailsUrl(ClientId));
        END;

      EXIT('');
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 1510 Notification Management
{
  OBJECT-PROPERTIES
  {
    Date=26/04/18;
    Time=12:00:00;
    Version List=NAVW111.00.00.21836;
  }
  PROPERTIES
  {
    Permissions=TableData 458=i,
                TableData 1511=rimd,
                TableData 1514=rim;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      OverdueEntriesMsg@1047 : TextConst 'ENU=Overdue approval entries have been created.;ENG=Overdue approval entries have been created.';
      SalesTxt@1008 : TextConst 'ENU=Sales;ENG=Sales';
      PurchaseTxt@1007 : TextConst 'ENU=Purchase;ENG=Purchase';
      ServiceTxt@1006 : TextConst 'ENU=Service;ENG=Service';
      SalesInvoiceTxt@1005 : TextConst 'ENU=Sales Invoice;ENG=Sales Invoice';
      PurchaseInvoiceTxt@1004 : TextConst 'ENU=Purchase Invoice;ENG=Purchase Invoice';
      ServiceInvoiceTxt@1003 : TextConst 'ENU=Service Invoice;ENG=Service Invoice';
      SalesCreditMemoTxt@1002 : TextConst 'ENU=Sales Credit Memo;ENG=Sales Credit Memo';
      PurchaseCreditMemoTxt@1001 : TextConst 'ENU=Purchase Credit Memo;ENG=Purchase Credit Memo';
      ServiceCreditMemoTxt@1000 : TextConst 'ENU=Service Credit Memo;ENG=Service Credit Memo';
      ActionNewRecordTxt@1015 : TextConst '@@@=E.g. Sales Invoice 10000 has been created.;ENU=has been created.;ENG=has been created.';
      ActionApproveTxt@1014 : TextConst '@@@=E.g. Sales Invoice 10000 requires your approval.;ENU=requires your approval.;ENG=requires your approval.';
      ActionApprovedTxt@1013 : TextConst '@@@=E.g. Sales Invoice 10000 has been approved.;ENU=has been approved.;ENG=has been approved.';
      ActionApprovalCreatedTxt@1012 : TextConst '@@@=E.g. Sales Invoice 10000 approval request has been created.;ENU=approval request has been created.;ENG=approval request has been created.';
      ActionApprovalCanceledTxt@1011 : TextConst '@@@=E.g. Sales Invoice 10000 approval request has been canceled.;ENU=approval request has been canceled.;ENG=approval request has been cancelled.';
      ActionApprovalRejectedTxt@1010 : TextConst '@@@=E.g. Sales Invoice 10000 approval request has been rejected.;ENU=approval has been rejected.;ENG=approval has been rejected.';
      ActionOverdueTxt@1009 : TextConst '@@@=E.g. Sales Invoice 10000 has a pending approval.;ENU=has a pending approval.;ENG=has a pending approval.';

    [External]
    PROCEDURE CreateOverdueNotifications@14(WorkflowStepArgument@1002 : Record 1523);
    VAR
      UserSetup@1006 : Record 91;
      ApprovalEntry@1000 : Record 454;
      OverdueApprovalEntry@1001 : Record 458;
      NotificationEntry@1003 : Record 1511;
    BEGIN
      IF UserSetup.FINDSET THEN
        REPEAT
          ApprovalEntry.RESET;
          ApprovalEntry.SETRANGE("Approver ID",UserSetup."User ID");
          ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
          ApprovalEntry.SETFILTER("Due Date",'<=%1',TODAY);
          IF ApprovalEntry.FINDSET THEN
            REPEAT
              InsertOverdueEntry(ApprovalEntry,OverdueApprovalEntry);
              NotificationEntry.CreateNew(NotificationEntry.Type::Overdue,
                UserSetup."User ID",OverdueApprovalEntry,WorkflowStepArgument."Link Target Page",
                WorkflowStepArgument."Custom Link");
            UNTIL ApprovalEntry.NEXT = 0;
        UNTIL UserSetup.NEXT = 0;

      MESSAGE(OverdueEntriesMsg);
    END;

    LOCAL PROCEDURE InsertOverdueEntry@13(ApprovalEntry@1000 : Record 454;VAR OverdueApprovalEntry@1001 : Record 458);
    VAR
      User@1002 : Record 2000000120;
      UserSetup@1003 : Record 91;
    BEGIN
      WITH OverdueApprovalEntry DO BEGIN
        INIT;
        "Approver ID" := ApprovalEntry."Approver ID";
        User.SETRANGE("User Name",ApprovalEntry."Approver ID");
        IF User.FINDFIRST THEN BEGIN
          "Sent to Name" := COPYSTR(User."Full Name",1,MAXSTRLEN("Sent to Name"));
          UserSetup.GET(User."User Name");
        END;

        "Table ID" := ApprovalEntry."Table ID";
        "Document Type" := ApprovalEntry."Document Type";
        "Document No." := ApprovalEntry."Document No.";
        "Sent to ID" := ApprovalEntry."Approver ID";
        "Sent Date" := TODAY;
        "Sent Time" := TIME;
        "E-Mail" := UserSetup."E-Mail";
        "Sequence No." := ApprovalEntry."Sequence No.";
        "Due Date" := ApprovalEntry."Due Date";
        "Approval Code" := ApprovalEntry."Approval Code";
        "Approval Type" := ApprovalEntry."Approval Type";
        "Limit Type" := ApprovalEntry."Limit Type";
        "Record ID to Approve" := ApprovalEntry."Record ID to Approve";
        INSERT;
      END;
    END;

    [External]
    PROCEDURE CreateDefaultNotificationSetup@1(NotificationType@1000 : Option);
    VAR
      NotificationSetup@1001 : Record 1512;
    BEGIN
      IF DefaultNotificationEntryExists(NotificationType) THEN
        EXIT;

      NotificationSetup.INIT;
      NotificationSetup.VALIDATE("Notification Type",NotificationType);
      NotificationSetup.VALIDATE("Notification Method",NotificationSetup."Notification Method"::Email);
      NotificationSetup.INSERT(TRUE);
    END;

    LOCAL PROCEDURE DefaultNotificationEntryExists@4(NotificationType@1000 : Option) : Boolean;
    VAR
      NotificationSetup@1001 : Record 1512;
    BEGIN
      NotificationSetup.SETRANGE("User ID",'');
      NotificationSetup.SETRANGE("Notification Type",NotificationType);
      EXIT(NOT NotificationSetup.ISEMPTY)
    END;

    [External]
    PROCEDURE MoveNotificationEntryToSentNotificationEntries@11(VAR NotificationEntry@1000 : Record 1511;NotificationBody@1001 : Text;AggregatedNotifications@1002 : Boolean;NotificationMethod@1005 : Option);
    VAR
      SentNotificationEntry@1003 : Record 1514;
      InitialSentNotificationEntry@1006 : Record 1514;
    BEGIN
      IF AggregatedNotifications THEN BEGIN
        IF NotificationEntry.FINDSET THEN BEGIN
          InitialSentNotificationEntry.NewRecord(NotificationEntry,NotificationBody,NotificationMethod);
          WHILE NotificationEntry.NEXT <> 0 DO BEGIN
            SentNotificationEntry.NewRecord(NotificationEntry,NotificationBody,NotificationMethod);
            SentNotificationEntry.VALIDATE("Aggregated with Entry",InitialSentNotificationEntry.ID);
            SentNotificationEntry.MODIFY(TRUE);
          END;
        END;
        NotificationEntry.DELETEALL(TRUE);
      END ELSE BEGIN
        SentNotificationEntry.NewRecord(NotificationEntry,NotificationBody,NotificationMethod);
        NotificationEntry.DELETE(TRUE);
      END;
    END;

    [External]
    PROCEDURE GetDocumentTypeAndNumber@3(VAR RecRef@1000 : RecordRef;VAR DocumentType@1001 : Text;VAR DocumentNo@1002 : Text);
    VAR
      FieldRef@1003 : FieldRef;
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::"Incoming Document":
          BEGIN
            DocumentType := RecRef.CAPTION;
            FieldRef := RecRef.FIELD(2);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Sales Header":
          BEGIN
            FieldRef := RecRef.FIELD(1);
            DocumentType := SalesTxt + ' ' + FORMAT(FieldRef.VALUE);
            FieldRef := RecRef.FIELD(3);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            FieldRef := RecRef.FIELD(1);
            DocumentType := PurchaseTxt + ' ' + FORMAT(FieldRef.VALUE);
            FieldRef := RecRef.FIELD(3);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Service Header":
          BEGIN
            FieldRef := RecRef.FIELD(1);
            DocumentType := ServiceTxt + ' ' + FORMAT(FieldRef.VALUE);
            FieldRef := RecRef.FIELD(3);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Sales Invoice Header":
          BEGIN
            DocumentType := SalesInvoiceTxt;
            FieldRef := RecRef.FIELD(3);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Purch. Inv. Header":
          BEGIN
            DocumentType := PurchaseInvoiceTxt;
            FieldRef := RecRef.FIELD(3);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            DocumentType := ServiceInvoiceTxt;
            FieldRef := RecRef.FIELD(3);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            DocumentType := SalesCreditMemoTxt;
            FieldRef := RecRef.FIELD(3);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            DocumentType := PurchaseCreditMemoTxt;
            FieldRef := RecRef.FIELD(3);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            DocumentType := ServiceCreditMemoTxt;
            FieldRef := RecRef.FIELD(3);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Gen. Journal Line":
          BEGIN
            DocumentType := RecRef.CAPTION;
            FieldRef := RecRef.FIELD(1);
            DocumentNo := FORMAT(FieldRef.VALUE);
            FieldRef := RecRef.FIELD(51);
            DocumentNo += ',' + FORMAT(FieldRef.VALUE);
            FieldRef := RecRef.FIELD(2);
            DocumentNo += ',' + FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Gen. Journal Batch":
          BEGIN
            DocumentType := RecRef.CAPTION;
            FieldRef := RecRef.FIELD(1);
            DocumentNo := FORMAT(FieldRef.VALUE);
            FieldRef := RecRef.FIELD(2);
            DocumentNo += ',' + FORMAT(FieldRef.VALUE);
          END;
        DATABASE::Customer,
        DATABASE::Vendor,
        DATABASE::Item:
          BEGIN
            DocumentType := RecRef.CAPTION;
            FieldRef := RecRef.FIELD(1);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        ELSE BEGIN
          DocumentType := RecRef.CAPTION;
          FieldRef := RecRef.FIELD(3);
          DocumentNo := FORMAT(FieldRef.VALUE);
        END;
      END;
    END;

    [External]
    PROCEDURE GetActionTextFor@7(VAR NotificationEntry@1000 : Record 1511) : Text;
    VAR
      ApprovalEntry@1001 : Record 454;
      DataTypeManagement@1002 : Codeunit 701;
      RecRef@1003 : RecordRef;
    BEGIN
      CASE NotificationEntry.Type OF
        NotificationEntry.Type::"New Record":
          EXIT(ActionNewRecordTxt);
        NotificationEntry.Type::Approval:
          BEGIN
            DataTypeManagement.GetRecordRef(NotificationEntry."Triggered By Record",RecRef);
            RecRef.SETTABLE(ApprovalEntry);
            CASE ApprovalEntry.Status OF
              ApprovalEntry.Status::Open:
                EXIT(ActionApproveTxt);
              ApprovalEntry.Status::Canceled:
                EXIT(ActionApprovalCanceledTxt);
              ApprovalEntry.Status::Rejected:
                EXIT(ActionApprovalRejectedTxt);
              ApprovalEntry.Status::Created:
                EXIT(ActionApprovalCreatedTxt);
              ApprovalEntry.Status::Approved:
                EXIT(ActionApprovedTxt);
            END;
          END;
        NotificationEntry.Type::Overdue:
          EXIT(ActionOverdueTxt);
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 1520 Workflow Event Handling
{
  OBJECT-PROPERTIES
  {
    Date=22/11/17;
    Time=12:00:00;
    Version List=NAVW111.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      IncDocReleasedEventDescTxt@1040 : TextConst 'ENU=An incoming document is released.;ENG=An incoming document is released.';
      CreateDocFromIncDocSuccessfulEventDescTxt@1041 : TextConst 'ENU=Creating a document from an incoming document is successful.;ENG=Creating a document from an incoming document is successful.';
      CreateDocFromIncDocFailsEventDescTxt@1033 : TextConst 'ENU=Creating a document from an incoming document fails.;ENG=Creating a document from an incoming document fails.';
      IncDocCreatedEventDescTxt@1005 : TextConst 'ENU=An incoming document is created.;ENG=An incoming document is created.';
      IncDocIsReadyForOCREventDescTxt@1034 : TextConst 'ENU=An incoming document is ready for OCR.;ENG=An incoming document is ready for OCR.';
      IncDocIsSentForOCREventDescTxt@1042 : TextConst 'ENU=An incoming document is sent for OCR.;ENG=An incoming document is sent for OCR.';
      IncDocIsReceivedFromOCREventDescTxt@1043 : TextConst 'ENU=An incoming document is received from OCR.;ENG=An incoming document is received from OCR.';
      IncDocIsReceivedFromDocExchEventDescTxt@1044 : TextConst 'ENU=An incoming document is received from document exchange.;ENG=An incoming document is received from document exchange.';
      IncDocSendForApprovalEventDescTxt@1011 : TextConst 'ENU=Approval of a incoming document is requested.;ENG=Approval of a incoming document is requested.';
      IncDocApprReqCancelledEventDescTxt@1045 : TextConst 'ENU=An approval request for an incoming document is canceled.;ENG=An approval request for an incoming document is cancelled.';
      PurchDocSendForApprovalEventDescTxt@1004 : TextConst 'ENU=Approval of a purchase document is requested.;ENG=Approval of a purchase document is requested.';
      PurchDocApprReqCancelledEventDescTxt@1007 : TextConst 'ENU=An approval request for a purchase document is canceled.;ENG=An approval request for a purchase document is cancelled.';
      PurchInvPostEventDescTxt@1001 : TextConst 'ENU=A purchase invoice is posted.;ENG=A purchase invoice is posted.';
      PurchDocReleasedEventDescTxt@1013 : TextConst 'ENU=A purchase document is released.;ENG=A purchase document is released.';
      PurchInvPmtCreatedEventDescTxt@1000 : TextConst 'ENU=A general journal line is created.;ENG=A general journal line is created.';
      ApprReqApprovedEventDescTxt@1009 : TextConst 'ENU=An approval request is approved.;ENG=An approval request is approved.';
      ApprReqRejectedEventDescTxt@1008 : TextConst 'ENU=An approval request is rejected.;ENG=An approval request is rejected.';
      ApprReqDelegatedEventDescTxt@1006 : TextConst 'ENU=An approval request is delegated.;ENG=An approval request is delegated.';
      SalesDocSendForApprovalEventDescTxt@1003 : TextConst 'ENU=Approval of a sales document is requested.;ENG=Approval of a sales document is requested.';
      SalesDocApprReqCancelledEventDescTxt@1016 : TextConst 'ENU=An approval request for a sales document is canceled.;ENG=An approval request for a sales document is cancelled.';
      SalesDocReleasedEventDescTxt@1002 : TextConst 'ENU=A sales document is released.;ENG=A sales document is released.';
      EventAlreadyExistErr@1014 : TextConst 'ENU=An event with description %1 already exists.;ENG=An event with description %1 already exists.';
      SendOverdueNotifTxt@1012 : TextConst 'ENU=The overdue approval notifications batch job will be run.;ENG=The overdue approval notifications batch job will be run.';
      CustomerCreditLimitExceededTxt@1017 : TextConst 'ENU=A customer credit limit is exceeded.;ENG=A customer credit limit is exceeded.';
      CustomerCreditLimitNotExceededTxt@1018 : TextConst 'ENU=A customer credit limit is not exceeded.;ENG=A customer credit limit is not exceeded.';
      CustomerSendForApprovalEventDescTxt@1019 : TextConst 'ENU=Approval of a customer is requested.;ENG=Approval of a customer is requested.';
      VendorSendForApprovalEventDescTxt@1015 : TextConst 'ENU=Approval of a vendor is requested.;ENG=Approval of a vendor is requested.';
      ItemSendForApprovalEventDescTxt@1024 : TextConst 'ENU=Approval of an item is requested.;ENG=Approval of an item is requested.';
      CustomerApprovalRequestCancelEventDescTxt@1020 : TextConst 'ENU=An approval request for a customer is canceled.;ENG=An approval request for a customer is cancelled.';
      VendorApprovalRequestCancelEventDescTxt@1029 : TextConst 'ENU=An approval request for a vendor is canceled.;ENG=An approval request for a vendor is cancelled.';
      ItemApprovalRequestCancelEventDescTxt@1030 : TextConst 'ENU=An approval request for an item is canceled.;ENG=An approval request for an item is cancelled.';
      WorkflowManagement@1010 : Codeunit 1501;
      GeneralJournalBatchSendForApprovalEventDescTxt@1026 : TextConst 'ENU=Approval of a general journal batch is requested.;ENG=Approval of a general journal batch is requested.';
      GeneralJournalBatchApprovalRequestCancelEventDescTxt@1025 : TextConst 'ENU=An approval request for a general journal batch is canceled.;ENG=An approval request for a general journal batch is cancelled.';
      GeneralJournalLineSendForApprovalEventDescTxt@1028 : TextConst 'ENU=Approval of a general journal line is requested.;ENG=Approval of a general journal line is requested.';
      GeneralJournalLineApprovalRequestCancelEventDescTxt@1027 : TextConst 'ENU=An approval request for a general journal line is canceled.;ENG=An approval request for a general journal line is cancelled.';
      GeneralJournalBatchBalancedEventDescTxt@1021 : TextConst 'ENU=A general journal batch is balanced.;ENG=A general journal batch is balanced.';
      GeneralJournalBatchNotBalancedEventDescTxt@1022 : TextConst 'ENU=A general journal batch is not balanced.;ENG=A general journal batch is not balanced.';
      ImageOrPDFIsAttachedToAnIncomingDocEventDescTxt@1091 : TextConst 'ENU=An image or pdf is attached to a new incoming document for OCR.;ENG=An image or pdf is attached to a new incoming document for OCR.';
      CustChangedTxt@1023 : TextConst 'ENU=A customer record is changed.;ENG=A customer record is changed.';
      VendChangedTxt@1031 : TextConst 'ENU=A vendor record is changed.;ENG=A vendor record is changed.';
      ItemChangedTxt@1032 : TextConst 'ENU=An item record is changed.;ENG=An item record is changed.';
      CreateGenJnlLineFromIncDocSuccessfulEventDescTxt@1035 : TextConst 'ENU=The creation of a general journal line from the incoming document was successful.;ENG=The creation of a general journal line from the incoming document was successful.';
      CreateGenJnlLineFromIncDocFailsEventDescTxt@1036 : TextConst 'ENU=The creation of a general journal line from the incoming document failed.;ENG=The creation of a general journal line from the incoming document failed.';

    [External]
    PROCEDURE CreateEventsLibrary@13();
    BEGIN
      AddEventToLibrary(
        RunWorkflowOnAfterInsertIncomingDocumentCode,DATABASE::"Incoming Document",IncDocCreatedEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterReleaseIncomingDocCode,DATABASE::"Incoming Document",IncDocReleasedEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterCreateDocFromIncomingDocSuccessCode,
        DATABASE::"Incoming Document",CreateDocFromIncDocSuccessfulEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterCreateDocFromIncomingDocFailCode,DATABASE::"Incoming Document",CreateDocFromIncDocFailsEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterReadyForOCRIncomingDocCode,DATABASE::"Incoming Document",IncDocIsReadyForOCREventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterSendToOCRIncomingDocCode,DATABASE::"Incoming Document",IncDocIsSentForOCREventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterReceiveFromOCRIncomingDocCode,DATABASE::"Incoming Document",IncDocIsReceivedFromOCREventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterReceiveFromDocExchIncomingDocCode,
        DATABASE::"Incoming Document",IncDocIsReceivedFromDocExchEventDescTxt,0,FALSE);

      AddEventToLibrary(
        RunWorkflowOnSendPurchaseDocForApprovalCode,DATABASE::"Purchase Header",PurchDocSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnSendIncomingDocForApprovalCode,DATABASE::"Incoming Document",IncDocSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnCancelIncomingDocApprovalRequestCode,DATABASE::"Incoming Document",IncDocApprReqCancelledEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnCancelPurchaseApprovalRequestCode,DATABASE::"Purchase Header",
        PurchDocApprReqCancelledEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnAfterReleasePurchaseDocCode,DATABASE::"Purchase Header",
        PurchDocReleasedEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnAfterPostPurchaseDocCode,DATABASE::"Purch. Inv. Header",
        PurchInvPostEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendSalesDocForApprovalCode,DATABASE::"Sales Header",
        SalesDocSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCancelSalesApprovalRequestCode,DATABASE::"Sales Header",
        SalesDocApprReqCancelledEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnAfterReleaseSalesDocCode,DATABASE::"Sales Header",
        SalesDocReleasedEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnAfterInsertGeneralJournalLineCode,DATABASE::"Gen. Journal Line",
        PurchInvPmtCreatedEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnApproveApprovalRequestCode,DATABASE::"Approval Entry",ApprReqApprovedEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnRejectApprovalRequestCode,DATABASE::"Approval Entry",ApprReqRejectedEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnDelegateApprovalRequestCode,DATABASE::"Approval Entry",ApprReqDelegatedEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendOverdueNotificationsCode,DATABASE::"Approval Entry",SendOverdueNotifTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnCustomerCreditLimitExceededCode,DATABASE::"Sales Header",
        CustomerCreditLimitExceededTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCustomerCreditLimitNotExceededCode,DATABASE::"Sales Header",
        CustomerCreditLimitNotExceededTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendCustomerForApprovalCode,DATABASE::Customer,
        CustomerSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCancelCustomerApprovalRequestCode,DATABASE::Customer,
        CustomerApprovalRequestCancelEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendVendorForApprovalCode,DATABASE::Vendor,
        VendorSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCancelVendorApprovalRequestCode,DATABASE::Vendor,
        VendorApprovalRequestCancelEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendItemForApprovalCode,DATABASE::Item,
        ItemSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCancelItemApprovalRequestCode,DATABASE::Item,
        ItemApprovalRequestCancelEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendGeneralJournalBatchForApprovalCode,DATABASE::"Gen. Journal Batch",
        GeneralJournalBatchSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode,DATABASE::"Gen. Journal Batch",
        GeneralJournalBatchApprovalRequestCancelEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendGeneralJournalLineForApprovalCode,DATABASE::"Gen. Journal Line",
        GeneralJournalLineSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode,DATABASE::"Gen. Journal Line",
        GeneralJournalLineApprovalRequestCancelEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnGeneralJournalBatchBalancedCode,DATABASE::"Gen. Journal Batch",
        GeneralJournalBatchBalancedEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnGeneralJournalBatchNotBalancedCode,DATABASE::"Gen. Journal Batch",
        GeneralJournalBatchNotBalancedEventDescTxt,0,FALSE);

      AddEventToLibrary(
        RunWorkflowOnBinaryFileAttachedCode,
        DATABASE::"Incoming Document Attachment",ImageOrPDFIsAttachedToAnIncomingDocEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnCustomerChangedCode,DATABASE::Customer,CustChangedTxt,0,TRUE);
      AddEventToLibrary(RunWorkflowOnVendorChangedCode,DATABASE::Vendor,VendChangedTxt,0,TRUE);
      AddEventToLibrary(RunWorkflowOnItemChangedCode,DATABASE::Item,ItemChangedTxt,0,TRUE);

      AddEventToLibrary(
        RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocSuccessCode,DATABASE::"Incoming Document",
        CreateGenJnlLineFromIncDocSuccessfulEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocFailCode,DATABASE::"Incoming Document",
        CreateGenJnlLineFromIncDocFailsEventDescTxt,0,FALSE);

      OnAddWorkflowEventsToLibrary;
      OnAddWorkflowTableRelationsToLibrary;
    END;

    LOCAL PROCEDURE AddEventPredecessors@67(EventFunctionName@1001 : Code[128]);
    BEGIN
      CASE EventFunctionName OF
        RunWorkflowOnAfterPostPurchaseDocCode:
          AddEventPredecessor(RunWorkflowOnAfterPostPurchaseDocCode,RunWorkflowOnAfterReleasePurchaseDocCode);
        RunWorkflowOnCancelIncomingDocApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelIncomingDocApprovalRequestCode,RunWorkflowOnSendIncomingDocForApprovalCode);
        RunWorkflowOnCancelPurchaseApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelPurchaseApprovalRequestCode,RunWorkflowOnSendPurchaseDocForApprovalCode);
        RunWorkflowOnCancelSalesApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelSalesApprovalRequestCode,RunWorkflowOnSendSalesDocForApprovalCode);
        RunWorkflowOnCancelCustomerApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelCustomerApprovalRequestCode,RunWorkflowOnSendCustomerForApprovalCode);
        RunWorkflowOnCancelVendorApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelVendorApprovalRequestCode,RunWorkflowOnSendVendorForApprovalCode);
        RunWorkflowOnCancelItemApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelItemApprovalRequestCode,RunWorkflowOnSendItemForApprovalCode);
        RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode,
            RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
        RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode,
            RunWorkflowOnSendGeneralJournalLineForApprovalCode);
        RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode,
            RunWorkflowOnGeneralJournalBatchBalancedCode);
        RunWorkflowOnCustomerCreditLimitExceededCode:
          AddEventPredecessor(RunWorkflowOnCustomerCreditLimitExceededCode,RunWorkflowOnSendSalesDocForApprovalCode);
        RunWorkflowOnCustomerCreditLimitNotExceededCode:
          AddEventPredecessor(RunWorkflowOnCustomerCreditLimitNotExceededCode,RunWorkflowOnSendSalesDocForApprovalCode);
        RunWorkflowOnApproveApprovalRequestCode:
          BEGIN
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendIncomingDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendSalesDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendCustomerForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendVendorForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendItemForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnGeneralJournalBatchBalancedCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendGeneralJournalLineForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnCustomerChangedCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnVendorChangedCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnItemChangedCode);
          END;
        RunWorkflowOnRejectApprovalRequestCode:
          BEGIN
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendIncomingDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendSalesDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendCustomerForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendVendorForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendItemForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnGeneralJournalBatchBalancedCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendGeneralJournalLineForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnCustomerChangedCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnVendorChangedCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnItemChangedCode);
          END;
        RunWorkflowOnDelegateApprovalRequestCode:
          BEGIN
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendIncomingDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendSalesDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendCustomerForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendVendorForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendItemForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnGeneralJournalBatchBalancedCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendGeneralJournalLineForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnCustomerChangedCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnVendorChangedCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnItemChangedCode);
          END;
        RunWorkflowOnGeneralJournalBatchBalancedCode:
          AddEventPredecessor(RunWorkflowOnGeneralJournalBatchBalancedCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
        RunWorkflowOnGeneralJournalBatchNotBalancedCode:
          AddEventPredecessor(RunWorkflowOnGeneralJournalBatchNotBalancedCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
      END;

      OnAddWorkflowEventPredecessorsToLibrary(EventFunctionName);
    END;

    [External]
    PROCEDURE AddEventToLibrary@14(FunctionName@1001 : Code[128];TableID@1002 : Integer;Description@1003 : Text[250];RequestPageID@1004 : Integer;UsedForRecordChange@1005 : Boolean);
    VAR
      WorkflowEvent@1000 : Record 1520;
      LogonManagement@1006 : Codeunit 9802;
    BEGIN
      IF WorkflowEvent.GET(FunctionName) THEN
        EXIT;

      WorkflowEvent.SETRANGE(Description,Description);
      IF NOT WorkflowEvent.ISEMPTY THEN BEGIN
        IF LogonManagement.IsLogonInProgress THEN
          EXIT;
        ERROR(EventAlreadyExistErr,Description);
      END;

      WorkflowEvent.INIT;
      WorkflowEvent."Function Name" := FunctionName;
      WorkflowEvent."Table ID" := TableID;
      WorkflowEvent.Description := Description;
      WorkflowEvent."Request Page ID" := RequestPageID;
      WorkflowEvent."Used for Record Change" := UsedForRecordChange;
      WorkflowEvent.INSERT;

      AddEventPredecessors(WorkflowEvent."Function Name");
    END;

    [External]
    PROCEDURE AddEventPredecessor@66(FunctionName@1001 : Code[128];PredecessorFunctionName@1002 : Code[128]);
    VAR
      WFEventResponseCombination@1000 : Record 1509;
    BEGIN
      WFEventResponseCombination.INIT;
      WFEventResponseCombination.Type := WFEventResponseCombination.Type::"Event";
      WFEventResponseCombination."Function Name" := FunctionName;
      WFEventResponseCombination."Predecessor Type" := WFEventResponseCombination."Predecessor Type"::"Event";
      WFEventResponseCombination."Predecessor Function Name" := PredecessorFunctionName;
      IF WFEventResponseCombination.INSERT THEN;
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAddWorkflowEventsToLibrary@3();
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAddWorkflowEventPredecessorsToLibrary@70(EventFunctionName@1000 : Code[128]);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAddWorkflowTableRelationsToLibrary@71();
    BEGIN
    END;

    [External]
    PROCEDURE RunWorkflowOnAfterInsertIncomingDocumentCode@15() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterInsertIncomingDocument'));
    END;

    [External]
    PROCEDURE RunWorkflowOnAfterReleaseIncomingDocCode@79() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterReleaseIncomingDoc'));
    END;

    [External]
    PROCEDURE RunWorkflowOnAfterCreateDocFromIncomingDocSuccessCode@80() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterCreateDocFromIncomingDocSuccess'));
    END;

    [External]
    PROCEDURE RunWorkflowOnAfterCreateDocFromIncomingDocFailCode@81() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterCreateDocFromIncomingDocFail'));
    END;

    [External]
    PROCEDURE RunWorkflowOnAfterReadyForOCRIncomingDocCode@69() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterreadyforOCRIncomingDoc'));
    END;

    [External]
    PROCEDURE RunWorkflowOnAfterSendToOCRIncomingDocCode@82() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterSendToOCRIncomingDoc'));
    END;

    [External]
    PROCEDURE RunWorkflowOnAfterReceiveFromOCRIncomingDocCode@83() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterReceiveFromOCRIncomingDoc'));
    END;

    [External]
    PROCEDURE RunWorkflowOnAfterReceiveFromDocExchIncomingDocCode@84() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterReceiveFromDocExchIncomingDoc'));
    END;

    [External]
    PROCEDURE RunWorkflowOnSendPurchaseDocForApprovalCode@16() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendPurchaseDocForApproval'));
    END;

    [External]
    PROCEDURE RunWorkflowOnSendIncomingDocForApprovalCode@12() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendIncomingDocForApproval'));
    END;

    [External]
    PROCEDURE RunWorkflowOnCancelIncomingDocApprovalRequestCode@160() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelIncomingDocApprovalRequest'));
    END;

    [External]
    PROCEDURE RunWorkflowOnCancelPurchaseApprovalRequestCode@22() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelPurchaseApprovalRequest'));
    END;

    [External]
    PROCEDURE RunWorkflowOnAfterReleasePurchaseDocCode@29() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterReleasePurchaseDoc'));
    END;

    [External]
    PROCEDURE RunWorkflowOnSendSalesDocForApprovalCode@17() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendSalesDocForApproval'));
    END;

    [External]
    PROCEDURE RunWorkflowOnCancelSalesApprovalRequestCode@32() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelSalesApprovalRequest'));
    END;

    [External]
    PROCEDURE RunWorkflowOnAfterReleaseSalesDocCode@4() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterReleaseSalesDoc'));
    END;

    [External]
    PROCEDURE RunWorkflowOnAfterPostPurchaseDocCode@19() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterPostPurchaseDoc'));
    END;

    [External]
    PROCEDURE RunWorkflowOnAfterInsertGeneralJournalLineCode@20() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterInsertGeneralJournalLine'));
    END;

    [External]
    PROCEDURE RunWorkflowOnApproveApprovalRequestCode@21() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnApproveApprovalRequest'));
    END;

    [External]
    PROCEDURE RunWorkflowOnDelegateApprovalRequestCode@23() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnDelegateApprovalRequest'));
    END;

    [External]
    PROCEDURE RunWorkflowOnRejectApprovalRequestCode@24() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnRejectApprovalRequest'));
    END;

    [External]
    PROCEDURE RunWorkflowOnSendOverdueNotificationsCode@27() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendOverdueNotifications'));
    END;

    [External]
    PROCEDURE RunWorkflowOnCustomerCreditLimitExceededCode@35() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCustomerCreditLimitExceeded'));
    END;

    [External]
    PROCEDURE RunWorkflowOnCustomerCreditLimitNotExceededCode@36() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCustomerCreditLimitNotExceeded'));
    END;

    [External]
    PROCEDURE RunWorkflowOnSendCustomerForApprovalCode@34() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendCustomerForApproval'));
    END;

    [External]
    PROCEDURE RunWorkflowOnSendVendorForApprovalCode@45() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendVendorForApproval'));
    END;

    [External]
    PROCEDURE RunWorkflowOnSendItemForApprovalCode@48() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendItemForApproval'));
    END;

    [External]
    PROCEDURE RunWorkflowOnCancelCustomerApprovalRequestCode@40() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelCustomerApprovalRequest'));
    END;

    [External]
    PROCEDURE RunWorkflowOnCancelVendorApprovalRequestCode@62() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelVendorApprovalRequest'));
    END;

    [External]
    PROCEDURE RunWorkflowOnCancelItemApprovalRequestCode@63() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelItemApprovalRequest'));
    END;

    [External]
    PROCEDURE RunWorkflowOnSendGeneralJournalBatchForApprovalCode@51() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendGeneralJournalBatchForApproval'));
    END;

    [External]
    PROCEDURE RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode@161() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelGeneralJournalBatchApprovalRequest'));
    END;

    [External]
    PROCEDURE RunWorkflowOnSendGeneralJournalLineForApprovalCode@52() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendGeneralJournalLineForApproval'));
    END;

    [External]
    PROCEDURE RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode@47() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelGeneralJournalLineApprovalRequest'));
    END;

    [External]
    PROCEDURE RunWorkflowOnGeneralJournalBatchBalancedCode@57() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnGeneralJournalBatchBalanced'));
    END;

    [External]
    PROCEDURE RunWorkflowOnGeneralJournalBatchNotBalancedCode@58() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnGeneralJournalBatchNotBalanced'));
    END;

    [External]
    PROCEDURE RunWorkflowOnBinaryFileAttachedCode@53() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnBinaryFileAttached'));
    END;

    [External]
    PROCEDURE RunWorkflowOnCustomerChangedCode@50() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCustomerChangedCode'));
    END;

    [External]
    PROCEDURE RunWorkflowOnVendorChangedCode@49() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnVendorChangedCode'));
    END;

    [External]
    PROCEDURE RunWorkflowOnItemChangedCode@54() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnItemChangedCode'));
    END;

    [External]
    PROCEDURE RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocSuccessCode@73() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocSuccessCode'));
    END;

    [External]
    PROCEDURE RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocFailCode@92() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterCreateGenJnlLineFromIncomingDoFailCode'));
    END;

    [EventSubscriber(Table,130,OnAfterInsertEvent)]
    [Internal]
    PROCEDURE RunWorkflowOnAfterInsertIncomingDocument@2(VAR Rec@1000 : Record 130;RunTrigger@1001 : Boolean);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterInsertIncomingDocumentCode,Rec);
    END;

    [EventSubscriber(Codeunit,1535,OnSendPurchaseDocForApproval)]
    [Internal]
    PROCEDURE RunWorkflowOnSendPurchaseDocForApproval@1(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendPurchaseDocForApprovalCode,PurchaseHeader);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelPurchaseApprovalRequest)]
    [Internal]
    PROCEDURE RunWorkflowOnCancelPurchaseApprovalRequest@8(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelPurchaseApprovalRequestCode,PurchaseHeader);
    END;

    [EventSubscriber(Codeunit,1535,OnSendIncomingDocForApproval)]
    [Internal]
    PROCEDURE RunWorkflowOnSendIncomingDocForApproval@88(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendIncomingDocForApprovalCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelIncomingDocApprovalRequest)]
    [Internal]
    PROCEDURE RunWorkflowOnCancelIncomingDocApprovalRequest@89(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelIncomingDocApprovalRequestCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,415,OnAfterReleasePurchaseDoc)]
    [Internal]
    PROCEDURE RunWorkflowOnAfterReleasePurchaseDoc@28(VAR PurchaseHeader@1000 : Record 38;PreviewMode@1001 : Boolean);
    BEGIN
      IF NOT PreviewMode THEN
        WorkflowManagement.HandleEvent(RunWorkflowOnAfterReleasePurchaseDocCode,PurchaseHeader);
    END;

    [EventSubscriber(Codeunit,1535,OnSendSalesDocForApproval)]
    [Internal]
    PROCEDURE RunWorkflowOnSendSalesDocForApproval@18(VAR SalesHeader@1000 : Record 36);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendSalesDocForApprovalCode,SalesHeader);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelSalesApprovalRequest)]
    [Internal]
    PROCEDURE RunWorkflowOnCancelSalesApprovalRequest@33(VAR SalesHeader@1000 : Record 36);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelSalesApprovalRequestCode,SalesHeader);
    END;

    [EventSubscriber(Codeunit,414,OnAfterReleaseSalesDoc)]
    [Internal]
    PROCEDURE RunWorkflowOnAfterReleaseSalesDoc@9(VAR SalesHeader@1000 : Record 36;PreviewMode@1001 : Boolean);
    BEGIN
      IF NOT PreviewMode THEN
        WorkflowManagement.HandleEvent(RunWorkflowOnAfterReleaseSalesDocCode,SalesHeader);
    END;

    [EventSubscriber(Codeunit,132,OnAfterReleaseIncomingDoc)]
    [Internal]
    PROCEDURE RunWorkflowOnAfterReleaseIncomingDoc@90(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterReleaseIncomingDocCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,132,OnAfterCreateDocFromIncomingDocSuccess)]
    [Internal]
    PROCEDURE RunWorkflowOnAfterCreateDocFromIncomingDocSuccess@77(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterCreateDocFromIncomingDocSuccessCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,132,OnAfterCreateDocFromIncomingDocFail)]
    [Internal]
    PROCEDURE RunWorkflowOnAfterCreateDocFromIncomingDocFail@78(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterCreateDocFromIncomingDocFailCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,133,OnAfterIncomingDocReadyForOCR)]
    [Internal]
    PROCEDURE RunWorkflowOnAfterIncomingDocReadyForOCR@68(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterReadyForOCRIncomingDocCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,133,OnAfterIncomingDocSentToOCR)]
    [Internal]
    PROCEDURE RunWorkflowOnAfterIncomingDocSentToOCR@85(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterSendToOCRIncomingDocCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,133,OnAfterIncomingDocReceivedFromOCR)]
    [Internal]
    PROCEDURE RunWorkflowOnAfterIncomingDocReceivedFromOCR@86(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterReceiveFromOCRIncomingDocCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,1410,OnAfterIncomingDocReceivedFromDocExch)]
    [Internal]
    PROCEDURE RunWorkflowOnAfterIncomingDocReceivedFromDocExch@87(VAR IncomingDocument@1001 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterReceiveFromDocExchIncomingDocCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,90,OnAfterPostPurchaseDoc)]
    [Internal]
    PROCEDURE RunWorkflowOnAfterPostPurchaseDoc@5(VAR PurchaseHeader@1000 : Record 38;VAR GenJnlPostLine@1001 : Codeunit 12;PurchRcpHdrNo@1002 : Code[20];RetShptHdrNo@1003 : Code[20];PurchInvHdrNo@1004 : Code[20];PurchCrMemoHdrNo@1005 : Code[20]);
    VAR
      PurchInvHeader@1006 : Record 122;
    BEGIN
      CASE PurchaseHeader."Document Type" OF
        PurchaseHeader."Document Type"::Order,PurchaseHeader."Document Type"::Invoice:
          BEGIN
            IF PurchInvHeader.GET(PurchInvHdrNo) THEN
              WorkflowManagement.HandleEvent(RunWorkflowOnAfterPostPurchaseDocCode,PurchInvHeader);
          END;
      END;
    END;

    [EventSubscriber(Table,81,OnAfterInsertEvent)]
    [Internal]
    PROCEDURE RunWorkflowOnAfterInsertGeneralJournalLine@6(VAR Rec@1000 : Record 81;RunTrigger@1001 : Boolean);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterInsertGeneralJournalLineCode,Rec);
    END;

    [EventSubscriber(Codeunit,1535,OnApproveApprovalRequest)]
    [Internal]
    PROCEDURE RunWorkflowOnApproveApprovalRequest@7(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      WorkflowManagement.HandleEventOnKnownWorkflowInstance(RunWorkflowOnApproveApprovalRequestCode,
        ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");
    END;

    [EventSubscriber(Codeunit,1535,OnDelegateApprovalRequest)]
    [Internal]
    PROCEDURE RunWorkflowOnDelegateApprovalRequest@10(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      WorkflowManagement.HandleEventOnKnownWorkflowInstance(RunWorkflowOnDelegateApprovalRequestCode,
        ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");
    END;

    [EventSubscriber(Codeunit,1535,OnRejectApprovalRequest)]
    [Internal]
    PROCEDURE RunWorkflowOnRejectApprovalRequest@11(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      WorkflowManagement.HandleEventOnKnownWorkflowInstance(RunWorkflowOnRejectApprovalRequestCode,
        ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");
    END;

    [EventSubscriber(Report,1509,OnSendOverdueNotifications)]
    [Internal]
    PROCEDURE RunWorkflowOnSendOverdueNotifications@26();
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      ApprovalEntry.INIT;
      WorkflowManagement.HandleEvent(RunWorkflowOnSendOverdueNotificationsCode,ApprovalEntry);
    END;

    [EventSubscriber(Table,36,OnCustomerCreditLimitExceeded)]
    [Internal]
    PROCEDURE RunWorkflowOnCustomerCreditLimitExceeded@38(VAR Sender@1000 : Record 36);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCustomerCreditLimitExceededCode,Sender);
    END;

    [EventSubscriber(Table,36,OnCustomerCreditLimitNotExceeded)]
    [Internal]
    PROCEDURE RunWorkflowOnCustomerCreditLimitNotExceeded@37(VAR Sender@1000 : Record 36);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCustomerCreditLimitNotExceededCode,Sender);
    END;

    [EventSubscriber(Codeunit,1535,OnSendCustomerForApproval)]
    [Internal]
    PROCEDURE RunWorkflowOnSendCustomerForApproval@39(Customer@1003 : Record 18);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendCustomerForApprovalCode,Customer);
    END;

    [EventSubscriber(Codeunit,1535,OnSendVendorForApproval)]
    [Internal]
    PROCEDURE RunWorkflowOnSendVendorForApproval@59(Vendor@1003 : Record 23);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendVendorForApprovalCode,Vendor);
    END;

    [EventSubscriber(Codeunit,1535,OnSendItemForApproval)]
    [Internal]
    PROCEDURE RunWorkflowOnSendItemForApproval@60(Item@1003 : Record 27);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendItemForApprovalCode,Item);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelCustomerApprovalRequest)]
    [Internal]
    PROCEDURE RunWorkflowOnCancelCustomerApprovalRequest@41(Customer@1003 : Record 18);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelCustomerApprovalRequestCode,Customer);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelVendorApprovalRequest)]
    [Internal]
    PROCEDURE RunWorkflowOnCancelVendorApprovalRequest@64(Vendor@1003 : Record 23);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelVendorApprovalRequestCode,Vendor);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelItemApprovalRequest)]
    [Internal]
    PROCEDURE RunWorkflowOnCancelItemApprovalRequest@65(Item@1003 : Record 27);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelItemApprovalRequestCode,Item);
    END;

    [EventSubscriber(Codeunit,1535,OnSendGeneralJournalBatchForApproval)]
    [Internal]
    PROCEDURE RunWorkflowOnSendGeneralJournalBatchForApproval@56(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendGeneralJournalBatchForApprovalCode,GenJournalBatch);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelGeneralJournalBatchApprovalRequest)]
    [Internal]
    PROCEDURE RunWorkflowOnCancelGeneralJournalBatchApprovalRequest@55(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode,GenJournalBatch);
    END;

    [EventSubscriber(Codeunit,1535,OnSendGeneralJournalLineForApproval)]
    [Internal]
    PROCEDURE RunWorkflowOnSendGeneralJournalLineForApproval@46(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendGeneralJournalLineForApprovalCode,GenJournalLine);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelGeneralJournalLineApprovalRequest)]
    [Internal]
    PROCEDURE RunWorkflowOnCancelGeneralJournalLineApprovalRequest@43(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode,GenJournalLine);
    END;

    [EventSubscriber(Table,232,OnGeneralJournalBatchBalanced)]
    [Internal]
    PROCEDURE RunWorkflowOnGeneralJournalBatchBalanced@42(VAR Sender@1000 : Record 232);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnGeneralJournalBatchBalancedCode,Sender);
    END;

    [EventSubscriber(Table,232,OnGeneralJournalBatchNotBalanced)]
    [Internal]
    PROCEDURE RunWorkflowOnGeneralJournalBatchNotBalanced@44(VAR Sender@1000 : Record 232);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnGeneralJournalBatchNotBalancedCode,Sender);
    END;

    [EventSubscriber(Table,133,OnAttachBinaryFile)]
    [Internal]
    PROCEDURE RunWorkflowOnBinaryFileAttached@25(VAR Sender@1000 : Record 133);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnBinaryFileAttachedCode,Sender);
    END;

    [EventSubscriber(Table,18,OnAfterModifyEvent)]
    [Internal]
    PROCEDURE RunWorkflowOnCustomerChanged@30(VAR Rec@1000 : Record 18;VAR xRec@1001 : Record 18;RunTrigger@1002 : Boolean);
    BEGIN
      IF FORMAT(xRec) <> FORMAT(Rec) THEN
        WorkflowManagement.HandleEventWithxRec(RunWorkflowOnCustomerChangedCode,Rec,xRec);
    END;

    [EventSubscriber(Table,23,OnAfterModifyEvent)]
    [Internal]
    PROCEDURE RunWorkflowOnVendorChanged@31(VAR Rec@1000 : Record 23;VAR xRec@1001 : Record 23;RunTrigger@1002 : Boolean);
    BEGIN
      IF FORMAT(xRec) <> FORMAT(Rec) THEN
        WorkflowManagement.HandleEventWithxRec(RunWorkflowOnVendorChangedCode,Rec,xRec);
    END;

    [EventSubscriber(Table,27,OnAfterModifyEvent)]
    [Internal]
    PROCEDURE RunWorkflowOnItemChanged@61(VAR Rec@1000 : Record 27;VAR xRec@1001 : Record 27;RunTrigger@1002 : Boolean);
    VAR
      GenJnlPostPreview@1003 : Codeunit 19;
    BEGIN
      IF GenJnlPostPreview.IsActive THEN
        EXIT;

      IF FORMAT(xRec) <> FORMAT(Rec) THEN
        WorkflowManagement.HandleEventWithxRec(RunWorkflowOnItemChangedCode,Rec,xRec);
    END;

    [EventSubscriber(Table,130,OnAfterCreateGenJnlLineFromIncomingDocSuccess)]
    [Internal]
    PROCEDURE RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocSuccess@75(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocSuccessCode,IncomingDocument);
    END;

    [EventSubscriber(Table,130,OnAfterCreateGenJnlLineFromIncomingDocFail)]
    [Internal]
    PROCEDURE RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocFail@72(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocFailCode,IncomingDocument);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 1521 Workflow Response Handling
{
  OBJECT-PROPERTIES
  {
    Date=22/11/17;
    Time=12:00:00;
    Version List=NAVW111.00;
  }
  PROPERTIES
  {
    Permissions=TableData 36=rm,
                TableData 38=rm,
                TableData 1511=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NotSupportedResponseErr@1004 : TextConst 'ENU=Response %1 is not supported in the workflow.;ENG=Response %1 is not supported in the workflow.';
      CreateNotifEntryTxt@1014 : TextConst '@@@=Create a notification for NAVUser.;ENU=Create a notification for %1.;ENG=Create a notification for %1.';
      CreatePmtLineAsyncTxt@1013 : TextConst '@@@=Create a payment journal line in the background for journal template GENERAL and journal batch DEFAULT.;ENU=Create a payment journal line in the background for journal template %1 and journal batch %2.;ENG=Create a payment journal line in the background for journal template %1 and journal batch %2.';
      CreatePmtLineTxt@1000 : TextConst '@@@=Create a payment journal line for journal template GENERAL and journal batch DEFAULT.;ENU=Create a payment journal line for journal template %1 and journal batch %2.;ENG=Create a payment journal line for journal template %1 and journal batch %2.';
      DoNothingTxt@1012 : TextConst 'ENU=Do nothing.;ENG=Do nothing.';
      CreateApprovalRequestsTxt@1030 : TextConst '@@@=Create an approval request for the record using approver type Approver and approver limit type Direct Approver.;ENU=Create an approval request for the record using approver type %1 and %2.;ENG=Create an approval request for the record using approver type %1 and %2.';
      CreateApprovalWorkflowGroupTxt@1028 : TextConst '@@@="%1 = Workflow user group code";ENU=workflow user group code %1;ENG=workflow user group code %1';
      CreateApprovalApprovalLimitTxt@1027 : TextConst '@@@="%1 = Approval limit type";ENU=approver limit type %1;ENG=approver limit type %1';
      GetApprovalCommentTxt@1010 : TextConst 'ENU=Open Approval Comments page.;ENG=Open Approval Comments page.';
      OpenDocumentTxt@1009 : TextConst 'ENU=Reopen the document.;ENG=Reopen the document.';
      ReleaseDocumentTxt@1008 : TextConst 'ENU=Release the document.;ENG=Release the document.';
      SendApprReqForApprovalTxt@1007 : TextConst 'ENU=Send approval request for the record and create a notification.;ENG=Send approval request for the record and create a notification.';
      ApproveAllApprReqTxt@1038 : TextConst 'ENU=Approve the approval request for the record.;ENG=Approve the approval request for the record.';
      RejectAllApprReqTxt@1006 : TextConst 'ENU=Reject the approval request for the record and create a notification.;ENG=Reject the approval request for the record and create a notification.';
      CancelAllAppReqTxt@1005 : TextConst 'ENU=Cancel the approval request for the record and create a notification.;ENG=Cancel the approval request for the record and create a notification.';
      PostDocumentTxt@1015 : TextConst 'ENU=Post the sales or purchase document.;ENG=Post the sales or purchase document.';
      BackgroundDocumentPostTxt@1016 : TextConst 'ENU=Post the sales or purchase document in the background.;ENG=Post the sales or purchase document in the background.';
      BackgroundOCRReceiveIncomingDocTxt@1043 : TextConst 'ENU=Receive the incoming document from OCR in the background.;ENG=Receive the incoming document from OCR in the background.';
      BackgroundOCRSendIncomingDocTxt@1044 : TextConst 'ENU=Send the incoming document to OCR in the background.;ENG=Send the incoming document to OCR in the background.';
      CheckCustomerCreditLimitTxt@1003 : TextConst 'ENU=Check if the customer credit limit is exceeded.;ENG=Check if the customer credit limit is exceeded.';
      CheckGeneralJournalBatchBalanceTxt@1032 : TextConst 'ENU=Check if the general journal batch is balanced.;ENG=Check if the general journal batch is balanced.';
      CreateApproveApprovalRequestAutomaticallyTxt@1021 : TextConst 'ENU=Create and approve an approval request automatically.;ENG=Create and approve an approval request automatically.';
      SetStatusToPendingApprovalTxt@1025 : TextConst 'ENU=Set document status to Pending Approval.;ENG=Set document status to Pending Approval.';
      UserIDTok@1019 : TextConst 'ENU=<User>;ENG=<User>';
      TemplateTok@1018 : TextConst 'ENU=<Template>;ENG=<Template>';
      GenJnlBatchTok@1017 : TextConst 'ENU=<Batch>;ENG=<Batch>';
      UnsupportedRecordTypeErr@1020 : TextConst '@@@=Record type Customer is not supported by this workflow response.;ENU=Record type %1 is not supported by this workflow response.;ENG=Record type %1 is not supported by this workflow response.';
      CreateOverdueNotifTxt@1022 : TextConst 'ENU=Create notification for overdue approval requests.;ENG=Create notification for overdue approval requests.';
      ResponseAlreadyExistErr@1023 : TextConst 'ENU=A response with description %1 already exists.;ENG=A response with description %1 already exists.';
      ApproverTypeTok@1002 : TextConst 'ENU=<Approver Type>;ENG=<Approver Type>';
      ApproverLimitTypeTok@1024 : TextConst 'ENU=<Approver Limit Type>;ENG=<Approver Limit Type>';
      WorkflowUserGroupTok@1011 : TextConst 'ENU=<Workflow User Group Code>;ENG=<Workflow User Group Code>';
      ShowMessageTxt@1033 : TextConst '@@@="%1 = The message to be shown";ENU=Show message "%1".;ENG=Show message "%1".';
      ShowMessagePlaceholderMsg@1034 : TextConst '@@@={Locked};ENU=%1;ENG=%1';
      MessageTok@1029 : TextConst 'ENU=<Message>;ENG=<Message>';
      RestrictRecordUsageTxt@1035 : TextConst 'ENU=Add record restriction.;ENG=Add record restriction.';
      AllowRecordUsageTxt@1036 : TextConst 'ENU=Remove record restriction.;ENG=Remove record restriction.';
      RestrictUsageDetailsTxt@1037 : TextConst '@@@=The restriction was imposed by the PIW workflow, Purchase Invoice Workflow.;ENU=The restriction was imposed by the %1 workflow, %2.;ENG=The restriction was imposed by the %1 workflow, %2.';
      MarkReadyForOCRTxt@1031 : TextConst 'ENU=Mark the incoming document ready for OCR.;ENG=Mark the incoming document ready for OCR.';
      SendToOCRTxt@1040 : TextConst 'ENU=Send the incoming document to OCR.;ENG=Send the incoming document to OCR.';
      ReceiveFromOCRTxt@1042 : TextConst 'ENU=Receive the incoming document from OCR.;ENG=Receive the incoming document from OCR.';
      CreateDocFromIncomingDocTxt@1045 : TextConst 'ENU=Create a purchase document from an incoming document.;ENG=Create a purchase document from an incoming document.';
      CreateReleasedDocFromIncomingDocTxt@1047 : TextConst 'ENU=Create a released purchase document from an incoming document.;ENG=Create a released purchase document from an incoming document.';
      CreateJournalFromIncomingDocTxt@1046 : TextConst 'ENU=Create journal line from incoming document.;ENG=Create journal line from incoming document.';
      RevertRecordValueTxt@1026 : TextConst '@@@=Revert the value of the Credit Limit (LCY) field on the record and save the change.;ENU=Revert the value of the %1 field on the record and save the change.;ENG=Revert the value of the %1 field on the record and save the change.';
      RevertRecordFieldValueTok@1039 : TextConst 'ENU=<Field>;ENG=<Field>';
      ApplyNewValuesTxt@1041 : TextConst 'ENU=Apply the new values.;ENG=Apply the new values.';
      DiscardNewValuesTxt@1001 : TextConst 'ENU=Discard the new values.;ENG=Discard the new values.';

    [External]
    PROCEDURE CreateResponsesLibrary@25();
    BEGIN
      AddResponseToLibrary(DoNothingCode,0,DoNothingTxt,'GROUP 0');
      AddResponseToLibrary(CreateNotificationEntryCode,0,CreateNotifEntryTxt,'GROUP 3');
      AddResponseToLibrary(ReleaseDocumentCode,0,ReleaseDocumentTxt,'GROUP 0');
      AddResponseToLibrary(OpenDocumentCode,0,OpenDocumentTxt,'GROUP 0');
      AddResponseToLibrary(SetStatusToPendingApprovalCode,0,SetStatusToPendingApprovalTxt,'GROUP 0');
      AddResponseToLibrary(GetApprovalCommentCode,0,GetApprovalCommentTxt,'GROUP 0');
      AddResponseToLibrary(CreateApprovalRequestsCode,0,CreateApprovalRequestsTxt,'GROUP 5');
      AddResponseToLibrary(SendApprovalRequestForApprovalCode,0,SendApprReqForApprovalTxt,'GROUP 2');
      AddResponseToLibrary(ApproveAllApprovalRequestsCode,0,ApproveAllApprReqTxt,'GROUP 0');
      AddResponseToLibrary(RejectAllApprovalRequestsCode,0,RejectAllApprReqTxt,'GROUP 2');
      AddResponseToLibrary(CancelAllApprovalRequestsCode,0,CancelAllAppReqTxt,'GROUP 2');
      AddResponseToLibrary(PostDocumentCode,0,PostDocumentTxt,'GROUP 0');
      AddResponseToLibrary(PostDocumentAsyncCode,0,BackgroundDocumentPostTxt,'GROUP 0');

      AddResponseToLibrary(CreatePmtLineForPostedPurchaseDocAsyncCode,DATABASE::"Purch. Inv. Header",CreatePmtLineAsyncTxt,'GROUP 1');
      AddResponseToLibrary(CreatePmtLineForPostedPurchaseDocCode,DATABASE::"Purch. Inv. Header",CreatePmtLineTxt,'GROUP 1');

      AddResponseToLibrary(CreateOverdueNotificationCode,0,CreateOverdueNotifTxt,'GROUP 2');
      AddResponseToLibrary(CheckCustomerCreditLimitCode,0,CheckCustomerCreditLimitTxt,'GROUP 0');
      AddResponseToLibrary(CheckGeneralJournalBatchBalanceCode,0,CheckGeneralJournalBatchBalanceTxt,'GROUP 0');
      AddResponseToLibrary(CreateAndApproveApprovalRequestAutomaticallyCode,0,CreateApproveApprovalRequestAutomaticallyTxt,'GROUP 0');
      AddResponseToLibrary(ShowMessageCode,0,ShowMessageTxt,'GROUP 4');
      AddResponseToLibrary(RestrictRecordUsageCode,0,RestrictRecordUsageTxt,'GROUP 0');
      AddResponseToLibrary(AllowRecordUsageCode,0,AllowRecordUsageTxt,'GROUP 0');

      AddResponseToLibrary(GetMarkReadyForOCRCode,0,MarkReadyForOCRTxt,'GROUP 0');
      AddResponseToLibrary(GetSendToOCRCode,0,SendToOCRTxt,'GROUP 0');
      AddResponseToLibrary(GetReceiveFromOCRCode,0,ReceiveFromOCRTxt,'GROUP 0');
      AddResponseToLibrary(GetSendToOCRAsyncCode,0,BackgroundOCRSendIncomingDocTxt,'GROUP 0');
      AddResponseToLibrary(GetReceiveFromOCRAsyncCode,0,BackgroundOCRReceiveIncomingDocTxt,'GROUP 0');
      AddResponseToLibrary(GetSendToOCRCode,0,SendToOCRTxt,'GROUP 0');
      AddResponseToLibrary(GetCreateDocFromIncomingDocCode,0,CreateDocFromIncomingDocTxt,'GROUP 0');
      AddResponseToLibrary(GetCreateReleasedDocFromIncomingDocCode,0,CreateReleasedDocFromIncomingDocTxt,'GROUP 0');
      AddResponseToLibrary(GetCreateJournalFromIncomingDocCode,0,CreateJournalFromIncomingDocTxt,'GROUP 0');

      AddResponseToLibrary(RevertValueForFieldCode,0,RevertRecordValueTxt,'GROUP 6');
      AddResponseToLibrary(ApplyNewValuesCode,0,ApplyNewValuesTxt,'GROUP 7');
      AddResponseToLibrary(DiscardNewValuesCode,0,DiscardNewValuesTxt,'GROUP 0');

      OnAddWorkflowResponsesToLibrary;
    END;

    LOCAL PROCEDURE AddResponsePredecessors@33(ResponseFunctionName@1002 : Code[128]);
    VAR
      WorkflowEventHandling@1000 : Codeunit 1520;
    BEGIN
      CASE ResponseFunctionName OF
        SetStatusToPendingApprovalCode:
          BEGIN
            AddResponsePredecessor(SetStatusToPendingApprovalCode,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddResponsePredecessor(SetStatusToPendingApprovalCode,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
            AddResponsePredecessor(SetStatusToPendingApprovalCode,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode);
            AddResponsePredecessor(
              SetStatusToPendingApprovalCode,WorkflowEventHandling.RunWorkflowOnCustomerCreditLimitNotExceededCode);
          END;
        CreateApprovalRequestsCode:
          BEGIN
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCustomerChangedCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendVendorForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnVendorChangedCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnItemChangedCode);
            AddResponsePredecessor(
              CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode);
            AddResponsePredecessor(
              CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnGeneralJournalBatchBalancedCode);
          END;
        SendApprovalRequestForApprovalCode:
          BEGIN
            AddResponsePredecessor(
              SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
            AddResponsePredecessor(
              SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnCustomerChangedCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendVendorForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnVendorChangedCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnItemChangedCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,
              WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,
              WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
            AddResponsePredecessor(
              SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnGeneralJournalBatchBalancedCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnDelegateApprovalRequestCode);
          END;
        ReleaseDocumentCode:
          BEGIN
            AddResponsePredecessor(ReleaseDocumentCode,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode);
            AddResponsePredecessor(ReleaseDocumentCode,WorkflowEventHandling.RunWorkflowOnCustomerCreditLimitNotExceededCode);
          END;
        RejectAllApprovalRequestsCode:
          AddResponsePredecessor(RejectAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnRejectApprovalRequestCode);
        OpenDocumentCode:
          BEGIN
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnRejectApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelPurchaseApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelSalesApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelIncomingDocApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelCustomerApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelVendorApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelItemApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode);
          END;
        CancelAllApprovalRequestsCode:
          BEGIN
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelPurchaseApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelSalesApprovalRequestCode);
            AddResponsePredecessor(
              CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelIncomingDocApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelCustomerApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelVendorApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelItemApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,
              WorkflowEventHandling.RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,
              WorkflowEventHandling.RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode);
          END;
        RevertValueForFieldCode:
          BEGIN
            AddResponsePredecessor(RevertValueForFieldCode,WorkflowEventHandling.RunWorkflowOnCustomerChangedCode);
            AddResponsePredecessor(RevertValueForFieldCode,WorkflowEventHandling.RunWorkflowOnVendorChangedCode);
            AddResponsePredecessor(RevertValueForFieldCode,WorkflowEventHandling.RunWorkflowOnItemChangedCode);
          END;
        ApplyNewValuesCode:
          AddResponsePredecessor(ApplyNewValuesCode,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode);
        DiscardNewValuesCode:
          AddResponsePredecessor(DiscardNewValuesCode,WorkflowEventHandling.RunWorkflowOnRejectApprovalRequestCode);
        GetMarkReadyForOCRCode:
          AddResponsePredecessor(GetMarkReadyForOCRCode,WorkflowEventHandling.RunWorkflowOnBinaryFileAttachedCode);
        CreateOverdueNotificationCode:
          AddResponsePredecessor(CreateOverdueNotificationCode,WorkflowEventHandling.RunWorkflowOnSendOverdueNotificationsCode);
        PostDocumentAsyncCode:
          AddResponsePredecessor(PostDocumentAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterReleasePurchaseDocCode);
        PostDocumentCode:
          AddResponsePredecessor(PostDocumentCode,WorkflowEventHandling.RunWorkflowOnAfterReleasePurchaseDocCode);
        CreatePmtLineForPostedPurchaseDocAsyncCode:
          AddResponsePredecessor(
            CreatePmtLineForPostedPurchaseDocAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterPostPurchaseDocCode);
        CreatePmtLineForPostedPurchaseDocCode:
          AddResponsePredecessor(CreatePmtLineForPostedPurchaseDocCode,WorkflowEventHandling.RunWorkflowOnAfterPostPurchaseDocCode);
        CheckGeneralJournalBatchBalanceCode:
          AddResponsePredecessor(CheckGeneralJournalBatchBalanceCode,
            WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
        CheckCustomerCreditLimitCode:
          AddResponsePredecessor(CheckCustomerCreditLimitCode,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
        CreateAndApproveApprovalRequestAutomaticallyCode:
          AddResponsePredecessor(CreateAndApproveApprovalRequestAutomaticallyCode,
            WorkflowEventHandling.RunWorkflowOnCustomerCreditLimitNotExceededCode);
        GetReceiveFromOCRCode:
          AddResponsePredecessor(GetReceiveFromOCRCode,WorkflowEventHandling.RunWorkflowOnAfterSendToOCRIncomingDocCode);
        GetReceiveFromOCRAsyncCode:
          AddResponsePredecessor(GetReceiveFromOCRAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterSendToOCRIncomingDocCode);
        GetSendToOCRCode:
          AddResponsePredecessor(GetSendToOCRCode,WorkflowEventHandling.RunWorkflowOnAfterReadyForOCRIncomingDocCode);
        GetSendToOCRAsyncCode:
          AddResponsePredecessor(GetSendToOCRAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterReadyForOCRIncomingDocCode);
      END;
      OnAddWorkflowResponsePredecessorsToLibrary(ResponseFunctionName);
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAddWorkflowResponsesToLibrary@1();
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAddWorkflowResponsePredecessorsToLibrary@49(ResponseFunctionName@1000 : Code[128]);
    BEGIN
    END;

    [Internal]
    PROCEDURE ExecuteResponse@2(VAR Variant@1000 : Variant;ResponseWorkflowStepInstance@1001 : Record 1504;xVariant@1004 : Variant);
    VAR
      WorkflowResponse@1002 : Record 1521;
      WorkflowChangeRecMgt@1007 : Codeunit 1531;
      ResponseExecuted@1003 : Boolean;
    BEGIN
      IF WorkflowResponse.GET(ResponseWorkflowStepInstance."Function Name") THEN
        CASE WorkflowResponse."Function Name" OF
          DoNothingCode:
            DoNothing;
          CreateNotificationEntryCode:
            CreateNotificationEntry(Variant,ResponseWorkflowStepInstance);
          ReleaseDocumentCode:
            ReleaseDocument(Variant);
          OpenDocumentCode:
            OpenDocument(Variant);
          SetStatusToPendingApprovalCode:
            SetStatusToPendingApproval(Variant);
          GetApprovalCommentCode:
            GetApprovalComment(Variant,ResponseWorkflowStepInstance.ID);
          CreateApprovalRequestsCode:
            CreateApprovalRequests(Variant,ResponseWorkflowStepInstance);
          SendApprovalRequestForApprovalCode:
            SendApprovalRequestForApproval(Variant,ResponseWorkflowStepInstance);
          ApproveAllApprovalRequestsCode:
            ApproveAllApprovalRequests(Variant,ResponseWorkflowStepInstance);
          RejectAllApprovalRequestsCode:
            RejectAllApprovalRequests(Variant,ResponseWorkflowStepInstance);
          CancelAllApprovalRequestsCode:
            CancelAllApprovalRequests(Variant,ResponseWorkflowStepInstance);
          PostDocumentCode:
            PostDocument(Variant);
          PostDocumentAsyncCode:
            PostDocumentAsync(Variant);
          CreatePmtLineForPostedPurchaseDocAsyncCode:
            CreatePmtLineForPostedPurchaseDocAsync(ResponseWorkflowStepInstance);
          CreatePmtLineForPostedPurchaseDocCode:
            CreatePmtLineForPostedPurchaseDoc(ResponseWorkflowStepInstance);
          CreateOverdueNotificationCode:
            CreateOverdueNotifications(ResponseWorkflowStepInstance);
          CheckCustomerCreditLimitCode:
            CheckCustomerCreditLimit(Variant);
          CheckGeneralJournalBatchBalanceCode:
            CheckGeneralJournalBatchBalance(Variant);
          CreateAndApproveApprovalRequestAutomaticallyCode:
            CreateAndApproveApprovalRequestAutomatically(Variant,ResponseWorkflowStepInstance);
          ShowMessageCode:
            ShowMessage(ResponseWorkflowStepInstance);
          RestrictRecordUsageCode:
            RestrictRecordUsage(Variant,ResponseWorkflowStepInstance);
          AllowRecordUsageCode:
            AllowRecordUsage(Variant);
          GetMarkReadyForOCRCode:
            MarkReadyForOCR(Variant);
          GetSendToOCRCode:
            SendToOCR(Variant);
          GetSendToOCRAsyncCode:
            SendToOCRAsync(Variant);
          GetReceiveFromOCRCode:
            ReceiveFromOCR(Variant);
          GetReceiveFromOCRAsyncCode:
            ReceiveFromOCRAsync(Variant);
          GetCreateDocFromIncomingDocCode:
            CreateDocFromIncomingDoc(Variant);
          GetCreateReleasedDocFromIncomingDocCode:
            CreateReleasedDocFromIncomingDoc(Variant);
          GetCreateJournalFromIncomingDocCode:
            CreateJournalFromIncomingDoc(Variant);
          RevertValueForFieldCode:
            WorkflowChangeRecMgt.RevertValueForField(Variant,xVariant,ResponseWorkflowStepInstance);
          ApplyNewValuesCode:
            WorkflowChangeRecMgt.ApplyNewValues(Variant,ResponseWorkflowStepInstance);
          DiscardNewValuesCode:
            WorkflowChangeRecMgt.DiscardNewValues(Variant,ResponseWorkflowStepInstance);
          ELSE BEGIN
            OnExecuteWorkflowResponse(ResponseExecuted,Variant,xVariant,ResponseWorkflowStepInstance);
            IF NOT ResponseExecuted THEN
              ERROR(NotSupportedResponseErr,WorkflowResponse."Function Name");
          END;
        END;
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnExecuteWorkflowResponse@47(VAR ResponseExecuted@1000 : Boolean;Variant@1002 : Variant;xVariant@1003 : Variant;ResponseWorkflowStepInstance@1001 : Record 1504);
    BEGIN
    END;

    [External]
    PROCEDURE DoNothingCode@30() : Code[128];
    BEGIN
      EXIT(UPPERCASE('DoNothing'));
    END;

    [External]
    PROCEDURE CreateNotificationEntryCode@34() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateNotificationEntry'));
    END;

    [External]
    PROCEDURE ReleaseDocumentCode@35() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ReleaseDocument'));
    END;

    [External]
    PROCEDURE OpenDocumentCode@36() : Code[128];
    BEGIN
      EXIT(UPPERCASE('OpenDocument'));
    END;

    [External]
    PROCEDURE SetStatusToPendingApprovalCode@24() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SetStatusToPendingApproval'));
    END;

    [External]
    PROCEDURE GetApprovalCommentCode@38() : Code[128];
    BEGIN
      EXIT(UPPERCASE('GetApprovalComment'));
    END;

    [External]
    PROCEDURE CreateApprovalRequestsCode@39() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateApprovalRequests'));
    END;

    [External]
    PROCEDURE SendApprovalRequestForApprovalCode@40() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SendApprovalRequestForApproval'));
    END;

    [External]
    PROCEDURE ApproveAllApprovalRequestsCode@59() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ApproveAllApprovalRequests'));
    END;

    [External]
    PROCEDURE RejectAllApprovalRequestsCode@42() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RejectAllApprovalRequests'));
    END;

    [External]
    PROCEDURE CancelAllApprovalRequestsCode@43() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CancelAllApprovalRequests'));
    END;

    [External]
    PROCEDURE PostDocumentAsyncCode@44() : Code[128];
    BEGIN
      EXIT(UPPERCASE('BackgroundPostApprovedPurchaseDoc'));
    END;

    [External]
    PROCEDURE PostDocumentCode@45() : Code[128];
    BEGIN
      EXIT(UPPERCASE('PostDocument'));
    END;

    [External]
    PROCEDURE CreatePmtLineForPostedPurchaseDocAsyncCode@46() : Code[128];
    BEGIN
      EXIT(UPPERCASE('BackgroundCreatePmtLineForPostedDocument'));
    END;

    [External]
    PROCEDURE CreatePmtLineForPostedPurchaseDocCode@22() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreatePmtLineForPostedDocument'));
    END;

    [External]
    PROCEDURE CreateOverdueNotificationCode@16() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateOverdueNotifications'));
    END;

    [External]
    PROCEDURE CheckCustomerCreditLimitCode@20() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CheckCustomerCreditLimit'));
    END;

    [External]
    PROCEDURE CheckGeneralJournalBatchBalanceCode@50() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CheckGeneralJournalBatchBalance'));
    END;

    [External]
    PROCEDURE CreateAndApproveApprovalRequestAutomaticallyCode@21() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateAndApproveApprovalRequestAutomatically'));
    END;

    [External]
    PROCEDURE ShowMessageCode@52() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ShowMessage'));
    END;

    [External]
    PROCEDURE RestrictRecordUsageCode@58() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RestrictRecordUsage'));
    END;

    [External]
    PROCEDURE AllowRecordUsageCode@55() : Code[128];
    BEGIN
      EXIT(UPPERCASE('AllowRecordUsage'));
    END;

    [External]
    PROCEDURE GetMarkReadyForOCRCode@41() : Code[128];
    BEGIN
      EXIT(UPPERCASE('MarkReadyForOCR'));
    END;

    [External]
    PROCEDURE GetSendToOCRAsyncCode@68() : Code[128];
    BEGIN
      EXIT(UPPERCASE('BackgroundSendToOCR'));
    END;

    [External]
    PROCEDURE GetSendToOCRCode@65() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SendToOCR'));
    END;

    [External]
    PROCEDURE GetReceiveFromOCRAsyncCode@69() : Code[128];
    BEGIN
      EXIT(UPPERCASE('BackgroundReceiveFromOCR'));
    END;

    [External]
    PROCEDURE GetReceiveFromOCRCode@66() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ReceiveFromOCR'));
    END;

    [External]
    PROCEDURE GetCreateDocFromIncomingDocCode@83() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateDocFromIncomingDoc'));
    END;

    [External]
    PROCEDURE GetCreateReleasedDocFromIncomingDocCode@70() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateReleasedDocFromIncomingDoc'));
    END;

    [External]
    PROCEDURE GetCreateJournalFromIncomingDocCode@63() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateJournalFromIncomingDoc'));
    END;

    [External]
    PROCEDURE RevertValueForFieldCode@64() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RevertValueForField'));
    END;

    [External]
    PROCEDURE ApplyNewValuesCode@32() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ApplyNewValues'));
    END;

    [External]
    PROCEDURE DiscardNewValuesCode@18() : Code[128];
    BEGIN
      EXIT(UPPERCASE('DiscardNewValues'));
    END;

    LOCAL PROCEDURE DoNothing@3();
    BEGIN
    END;

    LOCAL PROCEDURE CreateNotificationEntry@4(Variant@1001 : Variant;WorkflowStepInstance@1003 : Record 1504);
    VAR
      WorkflowStepArgument@1000 : Record 1523;
      NotificationEntry@1004 : Record 1511;
    BEGIN
      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        NotificationEntry.CreateNew(NotificationEntry.Type::"New Record",
          WorkflowStepArgument."Notification User ID",Variant,WorkflowStepArgument."Link Target Page",
          WorkflowStepArgument."Custom Link");
    END;

    LOCAL PROCEDURE ReleaseDocument@5(VAR Variant@1001 : Variant);
    VAR
      ApprovalEntry@1000 : Record 454;
      WorkflowWebhookEntry@1007 : Record 467;
      ReleasePurchaseDocument@1006 : Codeunit 415;
      ReleaseSalesDocument@1005 : Codeunit 414;
      ReleaseIncomingDocument@1009 : Codeunit 132;
      RecRef@1004 : RecordRef;
      TargetRecRef@1008 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            TargetRecRef.GET(ApprovalEntry."Record ID to Approve");
            Variant := TargetRecRef;
            ReleaseDocument(Variant);
          END;
        DATABASE::"Workflow Webhook Entry":
          BEGIN
            WorkflowWebhookEntry := Variant;
            TargetRecRef.GET(WorkflowWebhookEntry."Record ID");
            Variant := TargetRecRef;
            ReleaseDocument(Variant);
          END;
        DATABASE::"Purchase Header":
          ReleasePurchaseDocument.PerformManualCheckAndRelease(Variant);
        DATABASE::"Sales Header":
          ReleaseSalesDocument.PerformManualCheckAndRelease(Variant);
        DATABASE::"Incoming Document":
          ReleaseIncomingDocument.PerformManualRelease(Variant);
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    LOCAL PROCEDURE OpenDocument@6(VAR Variant@1000 : Variant);
    VAR
      ApprovalEntry@1005 : Record 454;
      WorkflowWebhookEntry@1009 : Record 467;
      ReleasePurchaseDocument@1001 : Codeunit 415;
      ReleaseSalesDocument@1006 : Codeunit 414;
      ReleaseIncomingDocument@1008 : Codeunit 132;
      RecRef@1002 : RecordRef;
      TargetRecRef@1007 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            TargetRecRef.GET(ApprovalEntry."Record ID to Approve");
            Variant := TargetRecRef;
            OpenDocument(Variant);
          END;
        DATABASE::"Workflow Webhook Entry":
          BEGIN
            WorkflowWebhookEntry := Variant;
            TargetRecRef.GET(WorkflowWebhookEntry."Record ID");
            Variant := TargetRecRef;
            OpenDocument(Variant);
          END;
        DATABASE::"Purchase Header":
          ReleasePurchaseDocument.Reopen(Variant);
        DATABASE::"Sales Header":
          ReleaseSalesDocument.Reopen(Variant);
        DATABASE::"Incoming Document":
          ReleaseIncomingDocument.Reopen(Variant);
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    [External]
    PROCEDURE SetStatusToPendingApproval@31(VAR Variant@1000 : Variant);
    VAR
      ApprovalsMgmt@1001 : Codeunit 1535;
    BEGIN
      ApprovalsMgmt.SetStatusToPendingApproval(Variant);
    END;

    LOCAL PROCEDURE GetApprovalComment@8(Variant@1000 : Variant;WorkflowStepInstanceID@1002 : GUID);
    VAR
      ApprovalsMgmt@1001 : Codeunit 1535;
    BEGIN
      ApprovalsMgmt.GetApprovalCommentForWorkflowStepInstanceID(Variant,WorkflowStepInstanceID);
    END;

    LOCAL PROCEDURE CreateApprovalRequests@29(Variant@1000 : Variant;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalsMgmt@1004 : Codeunit 1535;
      RecRef@1005 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      ApprovalsMgmt.CreateApprovalRequests(RecRef,WorkflowStepInstance);
    END;

    LOCAL PROCEDURE BuildTheCreateApprovalReqDescription@124(WorkflowResponse@1001 : Record 1521;WorkflowStepArgument@1000 : Record 1523) : Text[250];
    VAR
      ApproverLimitDesc@1002 : Text;
      WorkflowUserGroupDesc@1003 : Text;
    BEGIN
      ApproverLimitDesc := STRSUBSTNO(CreateApprovalApprovalLimitTxt,
          GetTokenValue(ApproverLimitTypeTok,FORMAT(WorkflowStepArgument."Approver Limit Type")));
      WorkflowUserGroupDesc := STRSUBSTNO(CreateApprovalWorkflowGroupTxt,
          GetTokenValue(WorkflowUserGroupTok,FORMAT(WorkflowStepArgument."Workflow User Group Code")));

      IF GetTokenValue(ApproverTypeTok,FORMAT(WorkflowStepArgument."Approver Type")) = ApproverTypeTok THEN
        EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,ApproverTypeTok,
              STRSUBSTNO('%1/%2',ApproverLimitDesc,WorkflowUserGroupDesc)),1,250));

      IF WorkflowStepArgument."Approver Type" <> WorkflowStepArgument."Approver Type"::"Workflow User Group" THEN
        EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
              GetTokenValue(ApproverTypeTok,FORMAT(WorkflowStepArgument."Approver Type")),
              ApproverLimitDesc),1,250));

      EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
            GetTokenValue(ApproverTypeTok,FORMAT(WorkflowStepArgument."Approver Type")),
            WorkflowUserGroupDesc),1,250));
    END;

    LOCAL PROCEDURE SendApprovalRequestForApproval@9(Variant@1000 : Variant;WorkflowStepInstance@1002 : Record 1504);
    VAR
      ApprovalsMgmt@1003 : Codeunit 1535;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          ApprovalsMgmt.SendApprovalRequestFromApprovalEntry(Variant,WorkflowStepInstance);
        ELSE
          ApprovalsMgmt.SendApprovalRequestFromRecord(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE ApproveAllApprovalRequests@60(Variant@1000 : Variant;WorkflowStepInstance@1004 : Record 1504);
    VAR
      ApprovalEntry@1001 : Record 454;
      ApprovalsMgmt@1006 : Codeunit 1535;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            ApproveAllApprovalRequests(RecRef,WorkflowStepInstance);
          END;
        ELSE
          ApprovalsMgmt.ApproveApprovalRequestsForRecord(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE RejectAllApprovalRequests@11(Variant@1000 : Variant;WorkflowStepInstance@1004 : Record 1504);
    VAR
      ApprovalEntry@1001 : Record 454;
      ApprovalsMgmt@1006 : Codeunit 1535;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            RejectAllApprovalRequests(RecRef,WorkflowStepInstance);
          END;
        ELSE
          ApprovalsMgmt.RejectApprovalRequestsForRecord(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE CancelAllApprovalRequests@12(Variant@1000 : Variant;WorkflowStepInstance@1004 : Record 1504);
    VAR
      ApprovalEntry@1001 : Record 454;
      ApprovalsMgmt@1006 : Codeunit 1535;
      RecRef@1003 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            CancelAllApprovalRequests(RecRef,WorkflowStepInstance);
          END;
        ELSE
          ApprovalsMgmt.CancelApprovalRequestsForRecord(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE PostDocumentAsync@13(Variant@1000 : Variant);
    VAR
      JobQueueEntry@1001 : Record 472;
      PurchaseHeader@1002 : Record 38;
      SalesHeader@1003 : Record 36;
      RecRef@1004 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          BEGIN
            PurchaseHeader := Variant;
            PurchaseHeader.TESTFIELD(Status,PurchaseHeader.Status::Released);
            JobQueueEntry.ScheduleJobQueueEntry(CODEUNIT::"Purchase Post via Job Queue",PurchaseHeader.RECORDID);
          END;
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader := Variant;
            SalesHeader.TESTFIELD(Status,SalesHeader.Status::Released);
            JobQueueEntry.ScheduleJobQueueEntry(CODEUNIT::"Sales Post via Job Queue",SalesHeader.RECORDID);
          END;
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    LOCAL PROCEDURE PostDocument@14(Variant@1000 : Variant);
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          CODEUNIT.RUN(CODEUNIT::"Purch.-Post",Variant);
        DATABASE::"Sales Header":
          CODEUNIT.RUN(CODEUNIT::"Sales-Post",Variant);
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    LOCAL PROCEDURE CreatePmtLineForPostedPurchaseDocAsync@15(WorkflowStepInstance@1000 : Record 1504);
    VAR
      JobQueueEntry@1001 : Record 472;
      WorkflowStepArgument@1002 : Record 1523;
    BEGIN
      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        JobQueueEntry.ScheduleJobQueueEntry(CODEUNIT::"Workflow Create Payment Line",WorkflowStepArgument.RECORDID);
    END;

    LOCAL PROCEDURE CreatePmtLineForPostedPurchaseDoc@17(WorkflowStepInstance@1000 : Record 1504);
    VAR
      WorkflowStepArgument@1002 : Record 1523;
      WorkflowCreatePaymentLine@1001 : Codeunit 1512;
    BEGIN
      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        WorkflowCreatePaymentLine.CreatePmtLine(WorkflowStepArgument);
    END;

    LOCAL PROCEDURE CheckCustomerCreditLimit@53(Variant@1000 : Variant);
    VAR
      SalesHeader@1003 : Record 36;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader := Variant;
            SalesHeader.CheckAvailableCreditLimit;
          END;
      END;
    END;

    LOCAL PROCEDURE CheckGeneralJournalBatchBalance@48(Variant@1000 : Variant);
    VAR
      GenJournalBatch@1002 : Record 232;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Gen. Journal Batch":
          BEGIN
            GenJournalBatch := Variant;
            GenJournalBatch.CheckBalance;
          END;
      END;
    END;

    LOCAL PROCEDURE CreateAndApproveApprovalRequestAutomatically@23(Variant@1000 : Variant;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalsMgmt@1002 : Codeunit 1535;
      RecRef@1003 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header":
          ApprovalsMgmt.CreateAndAutomaticallyApproveRequest(RecRef,WorkflowStepInstance);
        DATABASE::Customer:
          ApprovalsMgmt.CreateAndAutomaticallyApproveRequest(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE ShowMessage@54(WorkflowStepInstance@1001 : Record 1504);
    VAR
      WorkflowStepArgument@1002 : Record 1523;
    BEGIN
      WorkflowStepArgument.GET(WorkflowStepInstance.Argument);
      MESSAGE(STRSUBSTNO(ShowMessagePlaceholderMsg,WorkflowStepArgument.Message));
    END;

    LOCAL PROCEDURE RestrictRecordUsage@56(Variant@1000 : Variant;WorkflowStepInstance@1003 : Record 1504);
    VAR
      Workflow@1004 : Record 1501;
      RecordRestrictionMgt@1002 : Codeunit 1550;
    BEGIN
      Workflow.GET(WorkflowStepInstance."Workflow Code");
      RecordRestrictionMgt.RestrictRecordUsage(Variant,STRSUBSTNO(RestrictUsageDetailsTxt,Workflow.Code,Workflow.Description));
    END;

    LOCAL PROCEDURE AllowRecordUsage@57(Variant@1000 : Variant);
    VAR
      ApprovalEntry@1004 : Record 454;
      WorkflowWebhookEntry@1007 : Record 467;
      GenJournalBatch@1003 : Record 232;
      ItemJournalBatch@1005 : Record 233;
      FAJournalBatch@1006 : Record 5620;
      RecordRestrictionMgt@1002 : Codeunit 1550;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            RecordRestrictionMgt.AllowRecordUsage(Variant);
            RecRef.SETTABLE(ApprovalEntry);
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            AllowRecordUsage(RecRef);
          END;
        DATABASE::"Workflow Webhook Entry":
          BEGIN
            RecRef.SETTABLE(WorkflowWebhookEntry);
            RecRef.GET(WorkflowWebhookEntry."Record ID");
            AllowRecordUsage(RecRef);
          END;
        DATABASE::"Gen. Journal Batch":
          BEGIN
            RecRef.SETTABLE(GenJournalBatch);
            RecordRestrictionMgt.AllowGenJournalBatchUsage(GenJournalBatch);
          END;
        DATABASE::"Item Journal Batch":
          BEGIN
            RecRef.SETTABLE(ItemJournalBatch);
            RecordRestrictionMgt.AllowItemJournalBatchUsage(ItemJournalBatch);
          END;
        DATABASE::"FA Journal Batch":
          BEGIN
            RecRef.SETTABLE(FAJournalBatch);
            RecordRestrictionMgt.AllowFAJournalBatchUsage(FAJournalBatch);
          END
        ELSE
          RecordRestrictionMgt.AllowRecordUsage(Variant);
      END;
    END;

    [External]
    PROCEDURE AddResponseToLibrary@26(FunctionName@1002 : Code[128];TableID@1001 : Integer;Description@1000 : Text[250];ResponseOptionGroup@1004 : Code[20]);
    VAR
      WorkflowResponse@1003 : Record 1521;
      LogonManagement@1005 : Codeunit 9802;
    BEGIN
      IF WorkflowResponse.GET(FunctionName) THEN
        EXIT;

      WorkflowResponse.SETRANGE(Description,Description);
      IF NOT WorkflowResponse.ISEMPTY THEN BEGIN
        IF LogonManagement.IsLogonInProgress THEN
          EXIT;
        ERROR(ResponseAlreadyExistErr,Description);
      END;

      WorkflowResponse.INIT;
      WorkflowResponse."Function Name" := FunctionName;
      WorkflowResponse."Table ID" := TableID;
      WorkflowResponse.Description := Description;
      WorkflowResponse."Response Option Group" := ResponseOptionGroup;
      WorkflowResponse.INSERT;

      AddResponsePredecessors(WorkflowResponse."Function Name");
    END;

    [External]
    PROCEDURE AddResponsePredecessor@61(FunctionName@1000 : Code[128];PredecessorFunctionName@1001 : Code[128]);
    VAR
      WFEventResponseCombination@1002 : Record 1509;
    BEGIN
      WFEventResponseCombination.INIT;
      WFEventResponseCombination.Type := WFEventResponseCombination.Type::Response;
      WFEventResponseCombination."Function Name" := FunctionName;
      WFEventResponseCombination."Predecessor Type" := WFEventResponseCombination."Predecessor Type"::"Event";
      WFEventResponseCombination."Predecessor Function Name" := PredecessorFunctionName;
      IF WFEventResponseCombination.INSERT THEN;
    END;

    [External]
    PROCEDURE GetDescription@28(WorkflowStepArgument@1000 : Record 1523) : Text[250];
    VAR
      WorkflowResponse@1001 : Record 1521;
    BEGIN
      IF NOT WorkflowResponse.GET(WorkflowStepArgument."Response Function Name") THEN
        EXIT('');
      CASE WorkflowResponse."Function Name" OF
        CreateNotificationEntryCode:
          EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
                GetTokenValue(UserIDTok,WorkflowStepArgument."Notification User ID")),1,250));
        ShowMessageCode:
          EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
                GetTokenValue(MessageTok,WorkflowStepArgument.Message)),1,250));
        CreatePmtLineForPostedPurchaseDocAsyncCode,
        CreatePmtLineForPostedPurchaseDocCode:
          EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
                GetTokenValue(TemplateTok,WorkflowStepArgument."General Journal Template Name"),
                GetTokenValue(GenJnlBatchTok,WorkflowStepArgument."General Journal Batch Name")),1,250));
        CreateApprovalRequestsCode:
          EXIT(BuildTheCreateApprovalReqDescription(WorkflowResponse,WorkflowStepArgument));
        SendApprovalRequestForApprovalCode,
        RejectAllApprovalRequestsCode,
        CancelAllApprovalRequestsCode,
        CreateOverdueNotificationCode:
          EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description),1,250));
        RevertValueForFieldCode:
          BEGIN
            WorkflowStepArgument.CALCFIELDS("Field Caption");
            EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
                  GetTokenValue(RevertRecordFieldValueTok,WorkflowStepArgument."Field Caption")),1,250));
          END;
        ELSE
          EXIT(WorkflowResponse.Description);
      END;
    END;

    LOCAL PROCEDURE GetTokenValue@27(TokenValue@1001 : Text;FieldValue@1000 : Text) : Text;
    BEGIN
      IF FieldValue <> '' THEN
        EXIT(FieldValue);

      EXIT(TokenValue);
    END;

    [External]
    PROCEDURE IsArgumentMandatory@10(ResponseFunctionName@1000 : Code[128]) : Boolean;
    BEGIN
      IF ResponseFunctionName IN
         [CreateNotificationEntryCode,CreatePmtLineForPostedPurchaseDocAsyncCode,CreateApprovalRequestsCode,
          CreatePmtLineForPostedPurchaseDocCode]
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE HasRequiredArguments@19(WorkflowStep@1001 : Record 1502) : Boolean;
    VAR
      WorkflowStepArgument@1000 : Record 1523;
    BEGIN
      IF NOT IsArgumentMandatory(WorkflowStep."Function Name") THEN
        EXIT(TRUE);

      IF NOT WorkflowStepArgument.GET(WorkflowStep.Argument) THEN
        EXIT(FALSE);

      CASE WorkflowStep."Function Name" OF
        CreatePmtLineForPostedPurchaseDocAsyncCode,
        CreatePmtLineForPostedPurchaseDocCode:
          IF (WorkflowStepArgument."General Journal Template Name" = '') OR
             (WorkflowStepArgument."General Journal Batch Name" = '')
          THEN
            EXIT(FALSE);
        CreateApprovalRequestsCode:
          CASE WorkflowStepArgument."Approver Type" OF
            WorkflowStepArgument."Approver Type"::"Workflow User Group":
              BEGIN
                IF WorkflowStepArgument."Workflow User Group Code" = '' THEN
                  EXIT(FALSE);
              END;
            ELSE BEGIN
              IF WorkflowStepArgument."Approver Limit Type" = WorkflowStepArgument."Approver Limit Type"::"Specific Approver" THEN
                IF WorkflowStepArgument."Approver User ID" = '' THEN
                  EXIT(FALSE);
            END;
          END;
        CreateNotificationEntryCode:
          IF WorkflowStepArgument."Notification User ID" = '' THEN
            EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateOverdueNotifications@7(WorkflowStepInstance@1001 : Record 1504);
    VAR
      WorkflowStepArgument@1003 : Record 1523;
      NotificationManagement@1002 : Codeunit 1510;
    BEGIN
      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        NotificationManagement.CreateOverdueNotifications(WorkflowStepArgument);
    END;

    LOCAL PROCEDURE MarkReadyForOCR@37(Variant@1000 : Variant);
    VAR
      IncomingDocumentAttachment@1001 : Record 133;
      IncomingDocument@1002 : Record 130;
    BEGIN
      IncomingDocumentAttachment := Variant;
      IncomingDocument.GET(IncomingDocumentAttachment."Incoming Document Entry No.");
      IncomingDocument.SendToJobQueue(FALSE);
    END;

    LOCAL PROCEDURE SendToOCRAsync@71(Variant@1000 : Variant);
    VAR
      JobQueueEntry@1001 : Record 472;
      IncomingDocument@1002 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.TESTFIELD(Status,IncomingDocument.Status::Released);
      IncomingDocument.TESTFIELD("OCR Status",IncomingDocument."OCR Status"::Ready);
      JobQueueEntry.ScheduleJobQueueEntry(CODEUNIT::"OCR Inc. Doc. via Job Queue",IncomingDocument.RECORDID);
    END;

    LOCAL PROCEDURE SendToOCR@81(Variant@1000 : Variant);
    VAR
      IncomingDocument@1002 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.SendToOCR(FALSE);
    END;

    LOCAL PROCEDURE ReceiveFromOCRAsync@72(Variant@1000 : Variant);
    VAR
      IncomingDocument@1002 : Record 130;
      OCRIncDocViaJobQueue@1003 : Codeunit 137;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.TESTFIELD(Status,IncomingDocument.Status::Released);
      IncomingDocument.TESTFIELD("OCR Status",IncomingDocument."OCR Status"::Sent);
      OCRIncDocViaJobQueue.EnqueueIncomingDoc(IncomingDocument);
    END;

    LOCAL PROCEDURE ReceiveFromOCR@82(Variant@1000 : Variant);
    VAR
      IncomingDocument@1002 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.RetrieveFromOCR(FALSE);
    END;

    LOCAL PROCEDURE CreateDocFromIncomingDoc@51(Variant@1000 : Variant);
    VAR
      IncomingDocument@1001 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.TryCreateDocumentWithDataExchange;
    END;

    LOCAL PROCEDURE CreateReleasedDocFromIncomingDoc@67(Variant@1000 : Variant);
    VAR
      IncomingDocument@1001 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.CreateReleasedDocumentWithDataExchange;
    END;

    LOCAL PROCEDURE CreateJournalFromIncomingDoc@62(Variant@1000 : Variant);
    VAR
      IncomingDocument@1001 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.TryCreateGeneralJournalLineWithDataExchange;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 1535 Approvals Mgmt.
{
  OBJECT-PROPERTIES
  {
    Date=30/08/19;
    Time=12:00:00;
    Version List=NAVW111.00.00.35815;
  }
  PROPERTIES
  {
    Permissions=TableData 454=imd,
                TableData 455=imd,
                TableData 456=imd,
                TableData 457=imd,
                TableData 458=imd,
                TableData 1511=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      UserIdNotInSetupErr@1015 : TextConst '@@@=User ID NAVUser does not exist in the Approval User Setup window.;ENU=User ID %1 does not exist in the Approval User Setup window.;ENG=User ID %1 does not exist in the Approval User Setup window.';
      ApproverUserIdNotInSetupErr@1005 : TextConst '@@@=You must set up an approver for user ID NAVUser in the Approval User Setup window.;ENU=You must set up an approver for user ID %1 in the Approval User Setup window.;ENG=You must set up an approver for user ID %1 in the Approval User Setup window.';
      WFUserGroupNotInSetupErr@1013 : TextConst '@@@=The workflow user group member with user ID NAVUser does not exist in the Approval User Setup window.;ENU=The workflow user group member with user ID %1 does not exist in the Approval User Setup window.;ENG=The workflow user group member with user ID %1 does not exist in the Approval User Setup window.';
      SubstituteNotFoundErr@1007 : TextConst '@@@=There is no substitute for user ID NAVUser in the Approval User Setup window.;ENU=There is no substitute, direct approver, or approval administrator for user ID %1 in the Approval User Setup window.;ENG=There is no substitute, direct approver, or approval administrator for user ID %1 in the Approval User Setup window.';
      NoSuitableApproverFoundErr@1000 : TextConst 'ENU=No qualified approver was found.;ENG=No qualified approver was found.';
      DelegateOnlyOpenRequestsErr@1049 : TextConst 'ENU=You can only delegate open approval requests.;ENG=You can only delegate open approval requests.';
      ApproveOnlyOpenRequestsErr@1060 : TextConst 'ENU=You can only approve open approval requests.;ENG=You can only approve open approval requests.';
      RejectOnlyOpenRequestsErr@1061 : TextConst 'ENU=You can only reject open approval entries.;ENG=You can only reject open approval entries.';
      ApprovalsDelegatedMsg@1018 : TextConst 'ENU=The selected approval requests have been delegated.;ENG=The selected approval requests have been delegated.';
      NoReqToApproveErr@1056 : TextConst 'ENU=There is no approval request to approve.;ENG=There is no approval request to approve.';
      NoReqToRejectErr@1057 : TextConst 'ENU=There is no approval request to reject.;ENG=There is no approval request to reject.';
      NoReqToDelegateErr@1059 : TextConst 'ENU=There is no approval request to delegate.;ENG=There is no approval request to delegate.';
      PendingApprovalMsg@1002 : TextConst 'ENU=An approval request has been sent.;ENG=An approval request has been sent.';
      NoApprovalsSentMsg@1006 : TextConst 'ENU=No approval requests have been sent, either because they are already sent or because related workflows do not support the journal line.;ENG=No approval requests have been sent, either because they are already sent or because related workflows do not support the journal line.';
      PendingApprovalForSelectedLinesMsg@1020 : TextConst 'ENU=Approval requests have been sent.;ENG=Approval requests have been sent.';
      PendingApprovalForSomeSelectedLinesMsg@1001 : TextConst 'ENU=Approval requests have been sent.\\Requests for some journal lines were not sent, either because they are already sent or because related workflows do not support the journal line.;ENG=Approval requests have been sent.\\Requests for some journal lines were not sent, either because they are already sent or because related workflows do not support the journal line.';
      PurchaserUserNotFoundErr@1003 : TextConst '@@@=Example: The salesperson/purchaser user ID NAVUser does not exist in the Approval User Setup window for Salesperson/Purchaser code AB.;ENU=The salesperson/purchaser user ID %1 does not exist in the Approval User Setup window for %2 %3.;ENG=The salesperson/purchaser user ID %1 does not exist in the Approval User Setup window for %2 %3.';
      NoApprovalRequestsFoundErr@1009 : TextConst 'ENU=No approval requests exist.;ENG=No approval requests exist.';
      NoWFUserGroupMembersErr@1004 : TextConst 'ENU=A workflow user group with at least one member must be set up.;ENG=A workflow user group with at least one member must be set up.';
      DocStatusChangedMsg@1010 : TextConst '@@@=Order 1001 has been automatically approved. The status has been changed to Released.;ENU=%1 %2 has been automatically approved. The status has been changed to %3.;ENG=%1 %2 has been automatically approved. The status has been changed to %3.';
      UnsupportedRecordTypeErr@1011 : TextConst '@@@=Record type Customer is not supported by this workflow response.;ENU=Record type %1 is not supported by this workflow response.;ENG=Record type %1 is not supported by this workflow response.';
      SalesPrePostCheckErr@1012 : TextConst '@@@="%1=document type, %2=document no., e.g. Sales Order 321 must be approved...";ENU=Sales %1 %2 must be approved and released before you can perform this action.;ENG=Sales %1 %2 must be approved and released before you can perform this action.';
      WorkflowEventHandling@1071 : Codeunit 1520;
      WorkflowManagement@1070 : Codeunit 1501;
      PurchPrePostCheckErr@1022 : TextConst '@@@="%1=document type, %2=document no., e.g. Purchase Order 321 must be approved...";ENU=Purchase %1 %2 must be approved and released before you can perform this action.;ENG=Purchase %1 %2 must be approved and released before you can perform this action.';
      NoWorkflowEnabledErr@1101 : TextConst 'ENU=No approval workflow for this record type is enabled.;ENG=No approval workflow for this record type is enabled.';
      ApprovalReqCanceledForSelectedLinesMsg@1019 : TextConst 'ENU=The approval request for the selected record has been canceled.;ENG=The approval request for the selected record has been cancelled.';
      PendingJournalBatchApprovalExistsErr@1017 : TextConst '@@@=%1 is the Document No. of the journal line;ENU=An approval request already exists.;ENG=An approval request already exists.';
      ApporvalChainIsUnsupportedMsg@1016 : TextConst '@@@=Only Direct Approver is supported as Approver Limit Type option for Gen. Journal Batch DEFAULT, CASH. The approval request will be approved automatically.;ENU=Only Direct Approver is supported as Approver Limit Type option for %1. The approval request will be approved automatically.;ENG=Only Direct Approver is supported as Approver Limit Type option for %1. The approval request will be approved automatically.';
      RecHasBeenApprovedMsg@1008 : TextConst '@@@="%1 = Record Id";ENU=%1 has been approved.;ENG=%1 has been approved.';
      NoPermissionToDelegateErr@1014 : TextConst 'ENU=You do not have permission to delegate one or more of the selected approval requests.;ENG=You do not have permission to delegate one or more of the selected approval requests.';
      NothingToApproveErr@1021 : TextConst 'ENU=There is nothing to approve.;ENG=There is nothing to approve.';

    [Integration]
    [External]
    PROCEDURE OnSendPurchaseDocForApproval@3(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendSalesDocForApproval@10(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendIncomingDocForApproval@191(VAR IncomingDocument@1000 : Record 130);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelPurchaseApprovalRequest@4(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelSalesApprovalRequest@34(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelIncomingDocApprovalRequest@100(VAR IncomingDocument@1000 : Record 130);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendCustomerForApproval@52(VAR Customer@1000 : Record 18);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendVendorForApproval@56(VAR Vendor@1000 : Record 23);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendItemForApproval@64(VAR Item@1000 : Record 27);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelCustomerApprovalRequest@51(VAR Customer@1000 : Record 18);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelVendorApprovalRequest@67(VAR Vendor@1000 : Record 23);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelItemApprovalRequest@69(VAR Item@1000 : Record 27);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendGeneralJournalBatchForApproval@62(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelGeneralJournalBatchApprovalRequest@61(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnSendGeneralJournalLineForApproval@65(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnCancelGeneralJournalLineApprovalRequest@63(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnApproveApprovalRequest@68(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnRejectApprovalRequest@76(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnDelegateApprovalRequest@78(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnRenameRecordInApprovalRequest@96(OldRecordId@1000 : RecordID;NewRecordId@1001 : RecordID);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnDeleteRecordInApprovalRequest@97(RecordIDToApprove@1000 : RecordID);
    BEGIN
    END;

    [External]
    PROCEDURE ApproveRecordApprovalRequest@48(RecordID@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      IF NOT FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID) THEN
        ERROR(NoReqToApproveErr);

      ApprovalEntry.SETRECFILTER;
      ApproveApprovalRequests(ApprovalEntry);
    END;

    [External]
    PROCEDURE ApproveGenJournalLineRequest@103(GenJournalLine@1000 : Record 81);
    VAR
      GenJournalBatch@1001 : Record 232;
      ApprovalEntry@1002 : Record 454;
    BEGIN
      GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
      IF FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalBatch.RECORDID) THEN
        ApproveRecordApprovalRequest(GenJournalBatch.RECORDID);
      CLEAR(ApprovalEntry);
      IF FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalLine.RECORDID) THEN
        ApproveRecordApprovalRequest(GenJournalLine.RECORDID);
    END;

    [External]
    PROCEDURE RejectRecordApprovalRequest@57(RecordID@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      IF NOT FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID) THEN
        ERROR(NoReqToRejectErr);

      ApprovalEntry.SETRECFILTER;
      RejectApprovalRequests(ApprovalEntry);
    END;

    [External]
    PROCEDURE RejectGenJournalLineRequest@104(GenJournalLine@1002 : Record 81);
    VAR
      GenJournalBatch@1001 : Record 232;
      ApprovalEntry@1000 : Record 454;
    BEGIN
      GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
      IF FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalBatch.RECORDID) THEN
        RejectRecordApprovalRequest(GenJournalBatch.RECORDID);
      CLEAR(ApprovalEntry);
      IF FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalLine.RECORDID) THEN
        RejectRecordApprovalRequest(GenJournalLine.RECORDID);
    END;

    [External]
    PROCEDURE DelegateRecordApprovalRequest@58(RecordID@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      IF NOT FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID) THEN
        ERROR(NoReqToDelegateErr);

      ApprovalEntry.SETRECFILTER;
      DelegateApprovalRequests(ApprovalEntry);
    END;

    [External]
    PROCEDURE DelegateGenJournalLineRequest@29(GenJournalLine@1000 : Record 81);
    VAR
      GenJournalBatch@1002 : Record 232;
      ApprovalEntry@1001 : Record 454;
    BEGIN
      GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
      IF FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalBatch.RECORDID) THEN
        DelegateRecordApprovalRequest(GenJournalBatch.RECORDID);
      CLEAR(ApprovalEntry);
      IF FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalLine.RECORDID) THEN
        DelegateRecordApprovalRequest(GenJournalLine.RECORDID);
    END;

    [External]
    PROCEDURE ApproveApprovalRequests@108(VAR ApprovalEntry@1000 : Record 454);
    VAR
      ApprovalEntryToUpdate@1002 : Record 454;
    BEGIN
      IF ApprovalEntry.FINDSET(TRUE) THEN
        REPEAT
          ApprovalEntryToUpdate := ApprovalEntry;
          ApproveSelectedApprovalRequest(ApprovalEntryToUpdate);
        UNTIL ApprovalEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE RejectApprovalRequests@28(VAR ApprovalEntry@1000 : Record 454);
    VAR
      ApprovalEntryToUpdate@1001 : Record 454;
    BEGIN
      IF ApprovalEntry.FINDSET(TRUE) THEN
        REPEAT
          ApprovalEntryToUpdate := ApprovalEntry;
          RejectSelectedApprovalRequest(ApprovalEntryToUpdate);
        UNTIL ApprovalEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE DelegateApprovalRequests@27(VAR ApprovalEntry@1000 : Record 454);
    VAR
      ApprovalEntryToUpdate@1001 : Record 454;
    BEGIN
      IF ApprovalEntry.FINDSET(TRUE) THEN BEGIN
        REPEAT
          ApprovalEntryToUpdate := ApprovalEntry;
          DelegateSelectedApprovalRequest(ApprovalEntryToUpdate,TRUE);
        UNTIL ApprovalEntry.NEXT = 0;
        MESSAGE(ApprovalsDelegatedMsg);
      END;
    END;

    LOCAL PROCEDURE ApproveSelectedApprovalRequest@5(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      IF ApprovalEntry.Status <> ApprovalEntry.Status::Open THEN
        ERROR(ApproveOnlyOpenRequestsErr);

      IF ApprovalEntry."Approver ID" <> USERID THEN
        CheckUserAsApprovalAdministrator;

      ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Approved);
      ApprovalEntry.MODIFY(TRUE);
      OnApproveApprovalRequest(ApprovalEntry);
    END;

    LOCAL PROCEDURE RejectSelectedApprovalRequest@2(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      IF ApprovalEntry.Status <> ApprovalEntry.Status::Open THEN
        ERROR(RejectOnlyOpenRequestsErr);

      IF ApprovalEntry."Approver ID" <> USERID THEN
        CheckUserAsApprovalAdministrator;

      OnRejectApprovalRequest(ApprovalEntry);
      ApprovalEntry.GET(ApprovalEntry."Entry No.");
      ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Rejected);
      ApprovalEntry.MODIFY(TRUE);
    END;

    [External]
    PROCEDURE DelegateSelectedApprovalRequest@1(VAR ApprovalEntry@1000 : Record 454;CheckCurrentUser@1001 : Boolean);
    BEGIN
      IF ApprovalEntry.Status <> ApprovalEntry.Status::Open THEN
        ERROR(DelegateOnlyOpenRequestsErr);

      IF CheckCurrentUser AND (NOT ApprovalEntry.CanCurrentUserEdit) THEN
        ERROR(NoPermissionToDelegateErr);

      SubstituteUserIdForApprovalEntry(ApprovalEntry)
    END;

    LOCAL PROCEDURE SubstituteUserIdForApprovalEntry@86(ApprovalEntry@1000 : Record 454);
    VAR
      UserSetup@1001 : Record 91;
      ApprovalAdminUserSetup@1002 : Record 91;
    BEGIN
      IF NOT UserSetup.GET(ApprovalEntry."Approver ID") THEN
        ERROR(ApproverUserIdNotInSetupErr,ApprovalEntry."Sender ID");

      IF UserSetup.Substitute = '' THEN
        IF UserSetup."Approver ID" = '' THEN BEGIN
          ApprovalAdminUserSetup.SETRANGE("Approval Administrator",TRUE);
          IF ApprovalAdminUserSetup.FINDFIRST THEN
            UserSetup.GET(ApprovalAdminUserSetup."User ID")
          ELSE
            ERROR(SubstituteNotFoundErr,UserSetup."User ID");
        END ELSE
          UserSetup.GET(UserSetup."Approver ID")
      ELSE
        UserSetup.GET(UserSetup.Substitute);

      ApprovalEntry."Approver ID" := UserSetup."User ID";
      ApprovalEntry.MODIFY(TRUE);
      OnDelegateApprovalRequest(ApprovalEntry);
    END;

    [External]
    PROCEDURE FindOpenApprovalEntryForCurrUser@43(VAR ApprovalEntry@1002 : Record 454;RecordID@1000 : RecordID) : Boolean;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Approver ID",USERID);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);

      EXIT(ApprovalEntry.FINDFIRST);
    END;

    [External]
    PROCEDURE FindApprovalEntryForCurrUser@101(VAR ApprovalEntry@1002 : Record 454;RecordID@1000 : RecordID) : Boolean;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE("Approver ID",USERID);

      EXIT(ApprovalEntry.FINDFIRST);
    END;

    LOCAL PROCEDURE ShowPurchApprovalStatus@9(PurchaseHeader@1000 : Record 38);
    BEGIN
      PurchaseHeader.FIND;

      CASE PurchaseHeader.Status OF
        PurchaseHeader.Status::Released:
          MESSAGE(DocStatusChangedMsg,PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseHeader.Status);
        PurchaseHeader.Status::"Pending Approval":
          IF HasOpenOrPendingApprovalEntries(PurchaseHeader.RECORDID) THEN
            MESSAGE(PendingApprovalMsg);
        PurchaseHeader.Status::"Pending Prepayment":
          MESSAGE(DocStatusChangedMsg,PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseHeader.Status);
      END;
    END;

    LOCAL PROCEDURE ShowSalesApprovalStatus@26(SalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader.FIND;

      CASE SalesHeader.Status OF
        SalesHeader.Status::Released:
          MESSAGE(DocStatusChangedMsg,SalesHeader."Document Type",SalesHeader."No.",SalesHeader.Status);
        SalesHeader.Status::"Pending Approval":
          IF HasOpenOrPendingApprovalEntries(SalesHeader.RECORDID) THEN
            MESSAGE(PendingApprovalMsg);
        SalesHeader.Status::"Pending Prepayment":
          MESSAGE(DocStatusChangedMsg,SalesHeader."Document Type",SalesHeader."No.",SalesHeader.Status);
      END;
    END;

    LOCAL PROCEDURE ShowApprovalStatus@107(RecId@1000 : RecordID;WorkflowInstanceId@1001 : GUID);
    BEGIN
      IF HasPendingApprovalEntriesForWorkflow(RecId,WorkflowInstanceId) THEN
        MESSAGE(PendingApprovalMsg)
      ELSE
        MESSAGE(RecHasBeenApprovedMsg,FORMAT(RecId,0,1));
    END;

    [External]
    PROCEDURE ApproveApprovalRequestsForRecord@186(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      IF ApprovalEntry.FINDSET(TRUE) THEN
        REPEAT
          ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Approved);
          ApprovalEntry.MODIFY(TRUE);
          CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        UNTIL ApprovalEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE CancelApprovalRequestsForRecord@8(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalEntry@1002 : Record 454;
      OldStatus@1003 : Option;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Rejected,ApprovalEntry.Status::Canceled);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      IF ApprovalEntry.FINDSET(TRUE) THEN
        REPEAT
          OldStatus := ApprovalEntry.Status;
          ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Canceled);
          ApprovalEntry.MODIFY(TRUE);
          IF OldStatus IN [ApprovalEntry.Status::Open,ApprovalEntry.Status::Approved] THEN
            CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        UNTIL ApprovalEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE RejectApprovalRequestsForRecord@7(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalEntry@1002 : Record 454;
      OldStatus@1003 : Option;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Rejected,ApprovalEntry.Status::Canceled);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      IF ApprovalEntry.FINDSET(TRUE) THEN BEGIN
        REPEAT
          OldStatus := ApprovalEntry.Status;
          ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Rejected);
          ApprovalEntry.MODIFY(TRUE);
          IF (OldStatus IN [ApprovalEntry.Status::Open,ApprovalEntry.Status::Approved]) AND
             (ApprovalEntry."Approver ID" <> USERID)
          THEN
            CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        UNTIL ApprovalEntry.NEXT = 0;
        IF ApprovalEntry."Approver ID" <> ApprovalEntry."Sender ID" THEN BEGIN
          ApprovalEntry."Approver ID" := ApprovalEntry."Sender ID";
          CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        END;
      END;
    END;

    [External]
    PROCEDURE SendApprovalRequestFromRecord@33(RecRef@1004 : RecordRef;WorkflowStepInstance@1002 : Record 1504);
    VAR
      ApprovalEntry@1001 : Record 454;
      ApprovalEntry2@1000 : Record 454;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Record ID to Approve",Status,"Workflow Step Instance ID","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Created);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);

      IF ApprovalEntry.FINDFIRST THEN BEGIN
        ApprovalEntry2.COPYFILTERS(ApprovalEntry);
        ApprovalEntry2.SETRANGE("Sequence No.",ApprovalEntry."Sequence No.");
        IF ApprovalEntry2.FINDSET(TRUE) THEN
          REPEAT
            ApprovalEntry2.VALIDATE(Status,ApprovalEntry2.Status::Open);
            ApprovalEntry2.MODIFY(TRUE);
            CreateApprovalEntryNotification(ApprovalEntry2,WorkflowStepInstance);
          UNTIL ApprovalEntry2.NEXT = 0;
        IF FindApprovedApprovalEntryForWorkflowUserGroup(ApprovalEntry,WorkflowStepInstance) THEN
          OnApproveApprovalRequest(ApprovalEntry);
        EXIT;
      END;

      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Approved);
      IF ApprovalEntry.FINDLAST THEN
        OnApproveApprovalRequest(ApprovalEntry)
      ELSE
        ERROR(NoApprovalRequestsFoundErr);
    END;

    [External]
    PROCEDURE SendApprovalRequestFromApprovalEntry@41(ApprovalEntry@1000 : Record 454;WorkflowStepInstance@1002 : Record 1504);
    VAR
      ApprovalEntry2@1001 : Record 454;
      ApprovalEntry3@1003 : Record 454;
    BEGIN
      IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN BEGIN
        CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        EXIT;
      END;

      IF FindOpenApprovalEntriesForWorkflowStepInstance(ApprovalEntry,WorkflowStepInstance."Record ID") THEN
        EXIT;

      ApprovalEntry2.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry2.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
      ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Created);

      IF ApprovalEntry2.FINDFIRST THEN BEGIN
        ApprovalEntry3.COPYFILTERS(ApprovalEntry2);
        ApprovalEntry3.SETRANGE("Sequence No.",ApprovalEntry2."Sequence No.");
        IF ApprovalEntry3.FINDSET THEN
          REPEAT
            ApprovalEntry3.VALIDATE(Status,ApprovalEntry3.Status::Open);
            ApprovalEntry3.MODIFY(TRUE);
            CreateApprovalEntryNotification(ApprovalEntry3,WorkflowStepInstance);
          UNTIL ApprovalEntry3.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE CreateApprovalRequests@6(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      WorkflowStepArgument@1003 : Record 1523;
      ApprovalEntryArgument@1002 : Record 454;
    BEGIN
      PopulateApprovalEntryArgument(RecRef,WorkflowStepInstance,ApprovalEntryArgument);

      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        CASE WorkflowStepArgument."Approver Type" OF
          WorkflowStepArgument."Approver Type"::"Salesperson/Purchaser":
            CreateApprReqForApprTypeSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
          WorkflowStepArgument."Approver Type"::Approver:
            CreateApprReqForApprTypeApprover(WorkflowStepArgument,ApprovalEntryArgument);
          WorkflowStepArgument."Approver Type"::"Workflow User Group":
            CreateApprReqForApprTypeWorkflowUserGroup(WorkflowStepArgument,ApprovalEntryArgument);
        END;

      IF WorkflowStepArgument."Show Confirmation Message" THEN
        InformUserOnStatusChange(RecRef,WorkflowStepInstance.ID);
    END;

    [Internal]
    PROCEDURE CreateAndAutomaticallyApproveRequest@44(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalEntryArgument@1002 : Record 454;
      WorkflowStepArgument@1003 : Record 1523;
    BEGIN
      PopulateApprovalEntryArgument(RecRef,WorkflowStepInstance,ApprovalEntryArgument);
      IF NOT WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        WorkflowStepArgument.INIT;

      CreateApprovalRequestForUser(WorkflowStepArgument,ApprovalEntryArgument);

      InformUserOnStatusChange(RecRef,WorkflowStepInstance.ID);
    END;

    LOCAL PROCEDURE CreateApprReqForApprTypeSalespersPurchaser@32(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1002 : Record 454);
    BEGIN
      ApprovalEntryArgument.TESTFIELD("Salespers./Purch. Code");

      CASE WorkflowStepArgument."Approver Limit Type" OF
        WorkflowStepArgument."Approver Limit Type"::"Approver Chain":
          BEGIN
            CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForChainOfApprovers(WorkflowStepArgument,ApprovalEntryArgument);
          END;
        WorkflowStepArgument."Approver Limit Type"::"Direct Approver":
          CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
        WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver":
          BEGIN
            CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForApproverWithSufficientLimit(WorkflowStepArgument,ApprovalEntryArgument);
          END;
        WorkflowStepArgument."Approver Limit Type"::"Specific Approver":
          BEGIN
            CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForSpecificUser(WorkflowStepArgument,ApprovalEntryArgument);
          END;
      END;
    END;

    LOCAL PROCEDURE CreateApprReqForApprTypeApprover@31(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    BEGIN
      CASE WorkflowStepArgument."Approver Limit Type" OF
        WorkflowStepArgument."Approver Limit Type"::"Approver Chain":
          BEGIN
            CreateApprovalRequestForUser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForChainOfApprovers(WorkflowStepArgument,ApprovalEntryArgument);
          END;
        WorkflowStepArgument."Approver Limit Type"::"Direct Approver":
          CreateApprovalRequestForApprover(WorkflowStepArgument,ApprovalEntryArgument);
        WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver":
          BEGIN
            CreateApprovalRequestForUser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForApproverWithSufficientLimit(WorkflowStepArgument,ApprovalEntryArgument);
          END;
        WorkflowStepArgument."Approver Limit Type"::"Specific Approver":
          CreateApprovalRequestForSpecificUser(WorkflowStepArgument,ApprovalEntryArgument);
      END;
    END;

    LOCAL PROCEDURE CreateApprReqForApprTypeWorkflowUserGroup@49(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    VAR
      UserSetup@1004 : Record 91;
      WorkflowUserGroupMember@1006 : Record 1541;
      ApproverId@1003 : Code[50];
      SequenceNo@1002 : Integer;
    BEGIN
      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      WITH WorkflowUserGroupMember DO BEGIN
        SETCURRENTKEY("Workflow User Group Code","Sequence No.");
        SETRANGE("Workflow User Group Code",WorkflowStepArgument."Workflow User Group Code");

        IF NOT FINDSET THEN
          ERROR(NoWFUserGroupMembersErr);

        REPEAT
          ApproverId := "User Name";
          IF NOT UserSetup.GET(ApproverId) THEN
            ERROR(WFUserGroupNotInSetupErr,ApproverId);
          MakeApprovalEntry(ApprovalEntryArgument,SequenceNo + "Sequence No.",ApproverId,WorkflowStepArgument);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateApprovalRequestForChainOfApprovers@18(WorkflowStepArgument@1008 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    BEGIN
      CreateApprovalRequestForApproverChain(WorkflowStepArgument,ApprovalEntryArgument,FALSE);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForApproverWithSufficientLimit@45(WorkflowStepArgument@1008 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    BEGIN
      CreateApprovalRequestForApproverChain(WorkflowStepArgument,ApprovalEntryArgument,TRUE);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForApproverChain@46(WorkflowStepArgument@1008 : Record 1523;ApprovalEntryArgument@1000 : Record 454;SufficientApproverOnly@1003 : Boolean);
    VAR
      ApprovalEntry@1001 : Record 454;
      UserSetup@1007 : Record 91;
      ApproverId@1002 : Code[50];
      SequenceNo@1006 : Integer;
    BEGIN
      ApproverId := USERID;

      WITH ApprovalEntry DO BEGIN
        SETCURRENTKEY("Record ID to Approve","Workflow Step Instance ID","Sequence No.");
        SETRANGE("Table ID",ApprovalEntryArgument."Table ID");
        SETRANGE("Record ID to Approve",ApprovalEntryArgument."Record ID to Approve");
        SETRANGE("Workflow Step Instance ID",ApprovalEntryArgument."Workflow Step Instance ID");
        SETRANGE(Status,Status::Created);
        IF FINDLAST THEN
          ApproverId := "Approver ID"
        ELSE
          IF (WorkflowStepArgument."Approver Type" = WorkflowStepArgument."Approver Type"::"Salesperson/Purchaser") AND
             (WorkflowStepArgument."Approver Limit Type" = WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver")
          THEN BEGIN
            FindUserSetupBySalesPurchCode(UserSetup,ApprovalEntryArgument);
            ApproverId := UserSetup."User ID";
          END;
      END;

      IF NOT UserSetup.GET(ApproverId) THEN
        ERROR(ApproverUserIdNotInSetupErr,ApprovalEntry."Sender ID");

      IF NOT IsSufficientApprover(UserSetup,ApprovalEntryArgument) THEN
        REPEAT
          ApproverId := UserSetup."Approver ID";

          IF ApproverId = '' THEN
            ERROR(NoSuitableApproverFoundErr);

          IF NOT UserSetup.GET(ApproverId) THEN
            ERROR(ApproverUserIdNotInSetupErr,UserSetup."User ID");

          // Approval Entry should not be created only when IsSufficientApprover is false and SufficientApproverOnly is true
          IF IsSufficientApprover(UserSetup,ApprovalEntryArgument) OR (NOT SufficientApproverOnly) THEN BEGIN
            SequenceNo := GetLastSequenceNo(ApprovalEntryArgument) + 1;
            MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,ApproverId,WorkflowStepArgument);
          END;

        UNTIL IsSufficientApprover(UserSetup,ApprovalEntryArgument);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForApprover@19(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    VAR
      UserSetup@1006 : Record 91;
      UsrId@1005 : Code[50];
      SequenceNo@1004 : Integer;
    BEGIN
      UsrId := USERID;

      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      IF NOT UserSetup.GET(USERID) THEN
        ERROR(UserIdNotInSetupErr,UsrId);

      UsrId := UserSetup."Approver ID";
      IF NOT UserSetup.GET(UsrId) THEN BEGIN
        IF NOT UserSetup."Approval Administrator" THEN
          ERROR(ApproverUserIdNotInSetupErr,UserSetup."User ID");
        UsrId := USERID;
      END;

      SequenceNo += 1;
      MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UsrId,WorkflowStepArgument);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForSalespersPurchaser@21(WorkflowStepArgument@1006 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    VAR
      UserSetup@1001 : Record 91;
      SequenceNo@1002 : Integer;
    BEGIN
      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      FindUserSetupBySalesPurchCode(UserSetup,ApprovalEntryArgument);

      SequenceNo += 1;

      IF WorkflowStepArgument."Approver Limit Type" = WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver" THEN BEGIN
        IF IsSufficientApprover(UserSetup,ApprovalEntryArgument) THEN
          MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UserSetup."User ID",WorkflowStepArgument);
      END ELSE
        MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UserSetup."User ID",WorkflowStepArgument);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForUser@22(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    VAR
      SequenceNo@1002 : Integer;
    BEGIN
      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      SequenceNo += 1;
      MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,USERID,WorkflowStepArgument);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForSpecificUser@118(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    VAR
      UserSetup@1006 : Record 91;
      UsrId@1005 : Code[50];
      SequenceNo@1004 : Integer;
    BEGIN
      UsrId := WorkflowStepArgument."Approver User ID";

      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      IF NOT UserSetup.GET(UsrId) THEN
        ERROR(UserIdNotInSetupErr,UsrId);

      SequenceNo += 1;
      MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UsrId,WorkflowStepArgument);
    END;

    LOCAL PROCEDURE MakeApprovalEntry@23(ApprovalEntryArgument@1007 : Record 454;SequenceNo@1001 : Integer;ApproverId@1003 : Code[50];WorkflowStepArgument@1005 : Record 1523);
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        "Table ID" := ApprovalEntryArgument."Table ID";
        "Document Type" := ApprovalEntryArgument."Document Type";
        "Document No." := ApprovalEntryArgument."Document No.";
        "Salespers./Purch. Code" := ApprovalEntryArgument."Salespers./Purch. Code";
        "Sequence No." := SequenceNo;
        "Sender ID" := USERID;
        Amount := ApprovalEntryArgument.Amount;
        "Amount (LCY)" := ApprovalEntryArgument."Amount (LCY)";
        "Currency Code" := ApprovalEntryArgument."Currency Code";
        "Approver ID" := ApproverId;
        "Workflow Step Instance ID" := ApprovalEntryArgument."Workflow Step Instance ID";
        IF ApproverId = USERID THEN
          Status := Status::Approved
        ELSE
          Status := Status::Created;
        "Date-Time Sent for Approval" := CREATEDATETIME(TODAY,TIME);
        "Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
        "Last Modified By User ID" := USERID;
        "Due Date" := CALCDATE(WorkflowStepArgument."Due Date Formula",TODAY);

        CASE WorkflowStepArgument."Delegate After" OF
          WorkflowStepArgument."Delegate After"::Never:
            EVALUATE("Delegation Date Formula",'');
          WorkflowStepArgument."Delegate After"::"1 day":
            EVALUATE("Delegation Date Formula",'<1D>');
          WorkflowStepArgument."Delegate After"::"2 days":
            EVALUATE("Delegation Date Formula",'<2D>');
          WorkflowStepArgument."Delegate After"::"5 days":
            EVALUATE("Delegation Date Formula",'<5D>');
          ELSE
            EVALUATE("Delegation Date Formula",'');
        END;
        "Available Credit Limit (LCY)" := ApprovalEntryArgument."Available Credit Limit (LCY)";
        SetApproverType(WorkflowStepArgument,ApprovalEntry);
        SetLimitType(WorkflowStepArgument,ApprovalEntry);
        "Record ID to Approve" := ApprovalEntryArgument."Record ID to Approve";
        "Approval Code" := ApprovalEntryArgument."Approval Code";
        INSERT(TRUE);
      END;
    END;

    [Internal]
    PROCEDURE CalcPurchaseDocAmount@24(PurchaseHeader@1002 : Record 38;VAR ApprovalAmount@1001 : Decimal;VAR ApprovalAmountLCY@1000 : Decimal);
    VAR
      TempPurchaseLine@1009 : TEMPORARY Record 39;
      TotalPurchaseLine@1008 : Record 39;
      TotalPurchaseLineLCY@1007 : Record 39;
      PurchPost@1006 : Codeunit 90;
      TempAmount@1005 : Decimal;
      VAtText@1004 : Text[30];
    BEGIN
      PurchaseHeader.CalcInvDiscForHeader;
      PurchPost.GetPurchLines(PurchaseHeader,TempPurchaseLine,0);
      CLEAR(PurchPost);
      PurchPost.SumPurchLinesTemp(
        PurchaseHeader,TempPurchaseLine,0,TotalPurchaseLine,TotalPurchaseLineLCY,
        TempAmount,VAtText);
      ApprovalAmount := TotalPurchaseLine.Amount;
      ApprovalAmountLCY := TotalPurchaseLineLCY.Amount;
    END;

    [Internal]
    PROCEDURE CalcSalesDocAmount@82(SalesHeader@1000 : Record 36;VAR ApprovalAmount@1001 : Decimal;VAR ApprovalAmountLCY@1002 : Decimal);
    VAR
      TempSalesLine@1009 : TEMPORARY Record 37;
      TotalSalesLine@1008 : Record 37;
      TotalSalesLineLCY@1007 : Record 37;
      SalesPost@1006 : Codeunit 80;
      TempAmount@1005 : ARRAY [5] OF Decimal;
      VAtText@1004 : Text[30];
    BEGIN
      SalesHeader.CalcInvDiscForHeader;
      SalesPost.GetSalesLines(SalesHeader,TempSalesLine,0);
      CLEAR(SalesPost);
      SalesPost.SumSalesLinesTemp(
        SalesHeader,TempSalesLine,0,TotalSalesLine,TotalSalesLineLCY,
        TempAmount[1],VAtText,TempAmount[2],TempAmount[3],TempAmount[4]);
      ApprovalAmount := TotalSalesLine.Amount;
      ApprovalAmountLCY := TotalSalesLineLCY.Amount;
    END;

    LOCAL PROCEDURE PopulateApprovalEntryArgument@80(RecRef@1000 : RecordRef;WorkflowStepInstance@1009 : Record 1504;VAR ApprovalEntryArgument@1001 : Record 454);
    VAR
      Customer@1006 : Record 18;
      GenJournalBatch@1008 : Record 232;
      GenJournalLine@1007 : Record 81;
      PurchaseHeader@1003 : Record 38;
      SalesHeader@1004 : Record 36;
      IncomingDocument@1010 : Record 130;
      ApprovalAmount@1002 : Decimal;
      ApprovalAmountLCY@1005 : Decimal;
    BEGIN
      ApprovalEntryArgument.INIT;
      ApprovalEntryArgument."Table ID" := RecRef.NUMBER;
      ApprovalEntryArgument."Record ID to Approve" := RecRef.RECORDID;
      ApprovalEntryArgument."Document Type" := ApprovalEntryArgument."Document Type"::" ";
      ApprovalEntryArgument."Approval Code" := WorkflowStepInstance."Workflow Code";
      ApprovalEntryArgument."Workflow Step Instance ID" := WorkflowStepInstance.ID;

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchaseHeader);
            CalcPurchaseDocAmount(PurchaseHeader,ApprovalAmount,ApprovalAmountLCY);
            ApprovalEntryArgument."Document Type" := PurchaseHeader."Document Type";
            ApprovalEntryArgument."Document No." := PurchaseHeader."No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := PurchaseHeader."Purchaser Code";
            ApprovalEntryArgument.Amount := ApprovalAmount;
            ApprovalEntryArgument."Amount (LCY)" := ApprovalAmountLCY;
            ApprovalEntryArgument."Currency Code" := PurchaseHeader."Currency Code";
          END;
        DATABASE::"Sales Header":
          BEGIN
            RecRef.SETTABLE(SalesHeader);
            CalcSalesDocAmount(SalesHeader,ApprovalAmount,ApprovalAmountLCY);
            ApprovalEntryArgument."Document Type" := SalesHeader."Document Type";
            ApprovalEntryArgument."Document No." := SalesHeader."No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := SalesHeader."Salesperson Code";
            ApprovalEntryArgument.Amount := ApprovalAmount;
            ApprovalEntryArgument."Amount (LCY)" := ApprovalAmountLCY;
            ApprovalEntryArgument."Currency Code" := SalesHeader."Currency Code";
            ApprovalEntryArgument."Available Credit Limit (LCY)" := GetAvailableCreditLimit(SalesHeader);
          END;
        DATABASE::Customer:
          BEGIN
            RecRef.SETTABLE(Customer);
            ApprovalEntryArgument."Salespers./Purch. Code" := Customer."Salesperson Code";
            ApprovalEntryArgument."Currency Code" := Customer."Currency Code";
            ApprovalEntryArgument."Available Credit Limit (LCY)" := Customer.CalcAvailableCredit;
          END;
        DATABASE::"Gen. Journal Batch":
          RecRef.SETTABLE(GenJournalBatch);
        DATABASE::"Gen. Journal Line":
          BEGIN
            RecRef.SETTABLE(GenJournalLine);
            ApprovalEntryArgument."Document Type" := GenJournalLine."Document Type";
            ApprovalEntryArgument."Document No." := GenJournalLine."Document No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := GenJournalLine."Salespers./Purch. Code";
            ApprovalEntryArgument.Amount := GenJournalLine.Amount;
            ApprovalEntryArgument."Amount (LCY)" := GenJournalLine."Amount (LCY)";
            ApprovalEntryArgument."Currency Code" := GenJournalLine."Currency Code";
          END;
        DATABASE::"Incoming Document":
          BEGIN
            RecRef.SETTABLE(IncomingDocument);
            ApprovalEntryArgument."Document No." := FORMAT(IncomingDocument."Entry No.");
          END;
      END;
    END;

    [External]
    PROCEDURE CreateApprovalEntryNotification@50(ApprovalEntry@1000 : Record 454;WorkflowStepInstance@1001 : Record 1504);
    VAR
      WorkflowStepArgument@1002 : Record 1523;
      NotificationEntry@1003 : Record 1511;
      UserSetup@1004 : Record 91;
    BEGIN
      IF NOT WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        EXIT;

      IF WorkflowStepArgument."Notification User ID" = '' THEN BEGIN
        IF NOT UserSetup.GET(ApprovalEntry."Approver ID") THEN
          EXIT;
        WorkflowStepArgument.VALIDATE("Notification User ID",ApprovalEntry."Approver ID");
      END;

      ApprovalEntry.RESET;
      NotificationEntry.CreateNewEntry(
        NotificationEntry.Type::Approval,WorkflowStepArgument."Notification User ID",
        ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link",ApprovalEntry."Sender ID");
    END;

    LOCAL PROCEDURE SetApproverType@71(WorkflowStepArgument@1001 : Record 1523;VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      CASE WorkflowStepArgument."Approver Type" OF
        WorkflowStepArgument."Approver Type"::"Salesperson/Purchaser":
          ApprovalEntry."Approval Type" := ApprovalEntry."Approval Type"::"Sales Pers./Purchaser";
        WorkflowStepArgument."Approver Type"::Approver:
          ApprovalEntry."Approval Type" := ApprovalEntry."Approval Type"::Approver;
        WorkflowStepArgument."Approver Type"::"Workflow User Group":
          ApprovalEntry."Approval Type" := ApprovalEntry."Approval Type"::"Workflow User Group";
      END;
    END;

    LOCAL PROCEDURE SetLimitType@81(WorkflowStepArgument@1000 : Record 1523;VAR ApprovalEntry@1001 : Record 454);
    BEGIN
      CASE WorkflowStepArgument."Approver Limit Type" OF
        WorkflowStepArgument."Approver Limit Type"::"Approver Chain",
        WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver":
          ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"Approval Limits";
        WorkflowStepArgument."Approver Limit Type"::"Direct Approver":
          ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"No Limits";
        WorkflowStepArgument."Approver Limit Type"::"Specific Approver":
          ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"No Limits";
      END;

      IF ApprovalEntry."Approval Type" = ApprovalEntry."Approval Type"::"Workflow User Group" THEN
        ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"No Limits";
    END;

    LOCAL PROCEDURE IsSufficientPurchApprover@12(UserSetup@1000 : Record 91;DocumentType@1003 : Option;ApprovalAmountLCY@1002 : Decimal) : Boolean;
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      IF UserSetup."User ID" = UserSetup."Approver ID" THEN
        EXIT(TRUE);

      CASE DocumentType OF
        PurchaseHeader."Document Type"::Quote:
          IF UserSetup."Unlimited Request Approval" OR
             ((ApprovalAmountLCY <= UserSetup."Request Amount Approval Limit") AND (UserSetup."Request Amount Approval Limit" <> 0))
          THEN
            EXIT(TRUE);
        ELSE
          IF UserSetup."Unlimited Purchase Approval" OR
             ((ApprovalAmountLCY <= UserSetup."Purchase Amount Approval Limit") AND (UserSetup."Purchase Amount Approval Limit" <> 0))
          THEN
            EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsSufficientSalesApprover@13(UserSetup@1000 : Record 91;ApprovalAmountLCY@1002 : Decimal) : Boolean;
    BEGIN
      IF UserSetup."User ID" = UserSetup."Approver ID" THEN
        EXIT(TRUE);

      IF UserSetup."Unlimited Sales Approval" OR
         ((ApprovalAmountLCY <= UserSetup."Sales Amount Approval Limit") AND (UserSetup."Sales Amount Approval Limit" <> 0))
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsSufficientGenJournalLineApprover@89(UserSetup@1000 : Record 91;ApprovalEntryArgument@1001 : Record 454) : Boolean;
    VAR
      GenJournalLine@1003 : Record 81;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GET(ApprovalEntryArgument."Record ID to Approve");
      RecRef.SETTABLE(GenJournalLine);

      IF GenJournalLine.IsForPurchase THEN
        EXIT(IsSufficientPurchApprover(UserSetup,ApprovalEntryArgument."Document Type",ApprovalEntryArgument."Amount (LCY)"));

      IF GenJournalLine.IsForSales THEN
        EXIT(IsSufficientSalesApprover(UserSetup,ApprovalEntryArgument."Amount (LCY)"));

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE IsSufficientApprover@20(UserSetup@1001 : Record 91;ApprovalEntryArgument@1003 : Record 454) : Boolean;
    BEGIN
      CASE ApprovalEntryArgument."Table ID" OF
        DATABASE::"Purchase Header":
          EXIT(IsSufficientPurchApprover(UserSetup,ApprovalEntryArgument."Document Type",ApprovalEntryArgument."Amount (LCY)"));
        DATABASE::"Sales Header":
          EXIT(IsSufficientSalesApprover(UserSetup,ApprovalEntryArgument."Amount (LCY)"));
        DATABASE::"Gen. Journal Batch":
          MESSAGE(ApporvalChainIsUnsupportedMsg,FORMAT(ApprovalEntryArgument."Record ID to Approve"));
        DATABASE::"Gen. Journal Line":
          EXIT(IsSufficientGenJournalLineApprover(UserSetup,ApprovalEntryArgument));
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetAvailableCreditLimit@25(SalesHeader@1000 : Record 36) : Decimal;
    BEGIN
      EXIT(SalesHeader.CheckAvailableCreditLimit);
    END;

    [External]
    PROCEDURE PrePostApprovalCheckSales@38(VAR SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      IF IsSalesHeaderPendingApproval(SalesHeader) THEN
        ERROR(SalesPrePostCheckErr,SalesHeader."Document Type",SalesHeader."No.");

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE PrePostApprovalCheckPurch@39(VAR PurchaseHeader@1001 : Record 38) : Boolean;
    BEGIN
      IF IsPurchaseHeaderPendingApproval(PurchaseHeader) THEN
        ERROR(PurchPrePostCheckErr,PurchaseHeader."Document Type",PurchaseHeader."No.");

      EXIT(TRUE);
    END;

    [Internal]
    PROCEDURE IsIncomingDocApprovalsWorkflowEnabled@102(VAR IncomingDocument@1002 : Record 130) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(IncomingDocument,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode));
    END;

    [External]
    PROCEDURE IsPurchaseApprovalsWorkflowEnabled@59(VAR PurchaseHeader@1002 : Record 38) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(PurchaseHeader,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode));
    END;

    PROCEDURE IsPurchaseHeaderPendingApproval@113(VAR PurchaseHeader@1000 : Record 38) : Boolean;
    BEGIN
      IF PurchaseHeader.Status <> PurchaseHeader.Status::Open THEN
        EXIT(FALSE);

      EXIT(IsPurchaseApprovalsWorkflowEnabled(PurchaseHeader));
    END;

    [Internal]
    PROCEDURE IsSalesApprovalsWorkflowEnabled@17(VAR SalesHeader@1002 : Record 36) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(SalesHeader,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode));
    END;

    PROCEDURE IsSalesHeaderPendingApproval@119(VAR SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      IF SalesHeader.Status <> SalesHeader.Status::Open THEN
        EXIT(FALSE);

      EXIT(IsSalesApprovalsWorkflowEnabled(SalesHeader));
    END;

    [Internal]
    PROCEDURE IsOverdueNotificationsWorkflowEnabled@42() : Boolean;
    VAR
      ApprovalEntry@1000 : Record 454;
    BEGIN
      ApprovalEntry.INIT;
      EXIT(WorkflowManagement.WorkflowExists(ApprovalEntry,ApprovalEntry,
          WorkflowEventHandling.RunWorkflowOnSendOverdueNotificationsCode));
    END;

    [Internal]
    PROCEDURE IsGeneralJournalBatchApprovalsWorkflowEnabled@70(VAR GenJournalBatch@1002 : Record 232) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(GenJournalBatch,
          WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode));
    END;

    [Internal]
    PROCEDURE IsGeneralJournalLineApprovalsWorkflowEnabled@72(VAR GenJournalLine@1002 : Record 81) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(GenJournalLine,
          WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode));
    END;

    [External]
    PROCEDURE CheckPurchaseApprovalPossible@77(VAR PurchaseHeader@1002 : Record 38) : Boolean;
    BEGIN
      IF NOT IsPurchaseApprovalsWorkflowEnabled(PurchaseHeader) THEN
        ERROR(NoWorkflowEnabledErr);

      IF NOT PurchaseHeader.PurchLinesExist THEN
        ERROR(NothingToApproveErr);

      EXIT(TRUE);
    END;

    [Internal]
    PROCEDURE CheckIncomingDocApprovalsWorkflowEnabled@192(VAR IncomingDocument@1002 : Record 130) : Boolean;
    BEGIN
      IF NOT IsIncomingDocApprovalsWorkflowEnabled(IncomingDocument) THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CheckSalesApprovalPossible@155(VAR SalesHeader@1002 : Record 36) : Boolean;
    BEGIN
      IF NOT IsSalesApprovalsWorkflowEnabled(SalesHeader) THEN
        ERROR(NoWorkflowEnabledErr);

      IF NOT SalesHeader.SalesLinesExist THEN
        ERROR(NothingToApproveErr);

      EXIT(TRUE);
    END;

    [Internal]
    PROCEDURE CheckCustomerApprovalsWorkflowEnabled@11(VAR Customer@1002 : Record 18) : Boolean;
    BEGIN
      IF NOT WorkflowManagement.CanExecuteWorkflow(Customer,WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode) THEN BEGIN
        IF WorkflowManagement.EnabledWorkflowExist(DATABASE::Customer,WorkflowEventHandling.RunWorkflowOnCustomerChangedCode) THEN
          EXIT(FALSE);
        ERROR(NoWorkflowEnabledErr);
      END;
      EXIT(TRUE);
    END;

    [Internal]
    PROCEDURE CheckVendorApprovalsWorkflowEnabled@83(VAR Vendor@1002 : Record 23) : Boolean;
    BEGIN
      IF NOT WorkflowManagement.CanExecuteWorkflow(Vendor,WorkflowEventHandling.RunWorkflowOnSendVendorForApprovalCode) THEN BEGIN
        IF WorkflowManagement.EnabledWorkflowExist(DATABASE::Vendor,WorkflowEventHandling.RunWorkflowOnVendorChangedCode) THEN
          EXIT(FALSE);
        ERROR(NoWorkflowEnabledErr);
      END;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CheckItemApprovalsWorkflowEnabled@84(VAR Item@1002 : Record 27) : Boolean;
    BEGIN
      IF NOT WorkflowManagement.CanExecuteWorkflow(Item,WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode) THEN BEGIN
        IF WorkflowManagement.EnabledWorkflowExist(DATABASE::Item,WorkflowEventHandling.RunWorkflowOnItemChangedCode) THEN
          EXIT(FALSE);
        ERROR(NoWorkflowEnabledErr);
      END;
      EXIT(TRUE);
    END;

    [Internal]
    PROCEDURE CheckGeneralJournalBatchApprovalsWorkflowEnabled@74(VAR GenJournalBatch@1002 : Record 232) : Boolean;
    BEGIN
      IF NOT
         WorkflowManagement.CanExecuteWorkflow(GenJournalBatch,
           WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode)
      THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    [Internal]
    PROCEDURE CheckGeneralJournalLineApprovalsWorkflowEnabled@73(VAR GenJournalLine@1002 : Record 81) : Boolean;
    BEGIN
      IF NOT
         WorkflowManagement.CanExecuteWorkflow(GenJournalLine,
           WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode)
      THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE DeleteApprovalEntry@35(Variant@1001 : Variant);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      DeleteApprovalEntries(RecRef.RECORDID);
    END;

    [EventSubscriber(Table,81,OnMoveGenJournalLine)]
    [External]
    PROCEDURE PostApprovalEntriesMoveGenJournalLine@91(VAR Sender@1000 : Record 81;ToRecordID@1002 : RecordID);
    BEGIN
      PostApprovalEntries(Sender.RECORDID,ToRecordID,Sender."Document No.");
    END;

    [EventSubscriber(Table,81,OnAfterDeleteEvent)]
    [External]
    PROCEDURE DeleteApprovalEntriesAfterDeleteGenJournalLine@94(VAR Rec@1000 : Record 81;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT Rec.ISTEMPORARY THEN
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [EventSubscriber(Table,232,OnMoveGenJournalBatch)]
    [External]
    PROCEDURE PostApprovalEntriesMoveGenJournalBatch@36(VAR Sender@1000 : Record 232;ToRecordID@1001 : RecordID);
    VAR
      RecordRestrictionMgt@1002 : Codeunit 1550;
    BEGIN
      IF PostApprovalEntries(Sender.RECORDID,ToRecordID,'') THEN BEGIN
        RecordRestrictionMgt.AllowRecordUsage(Sender);
        DeleteApprovalEntries(Sender.RECORDID);
      END;
    END;

    [EventSubscriber(Table,232,OnAfterDeleteEvent)]
    [External]
    PROCEDURE DeleteApprovalEntriesAfterDeleteGenJournalBatch@98(VAR Rec@1000 : Record 232;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT Rec.ISTEMPORARY THEN
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [EventSubscriber(Table,18,OnAfterDeleteEvent)]
    [External]
    PROCEDURE DeleteApprovalEntriesAfterDeleteCustomer@99(VAR Rec@1000 : Record 18;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT Rec.ISTEMPORARY THEN
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [EventSubscriber(Table,23,OnAfterDeleteEvent)]
    [External]
    PROCEDURE DeleteApprovalEntriesAfterDeleteVendor@112(VAR Rec@1000 : Record 23;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT Rec.ISTEMPORARY THEN
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [EventSubscriber(Table,27,OnAfterDeleteEvent)]
    [External]
    PROCEDURE DeleteApprovalEntriesAfterDeleteItem@109(VAR Rec@1000 : Record 27;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT Rec.ISTEMPORARY THEN
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [External]
    PROCEDURE PostApprovalEntries@105(ApprovedRecordID@1003 : RecordID;PostedRecordID@1001 : RecordID;PostedDocNo@1002 : Code[20]) : Boolean;
    VAR
      ApprovalEntry@1000 : Record 454;
      PostedApprovalEntry@1004 : Record 456;
    BEGIN
      ApprovalEntry.SETAUTOCALCFIELDS("Pending Approvals","Number of Approved Requests","Number of Rejected Requests");
      ApprovalEntry.SETRANGE("Table ID",ApprovedRecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",ApprovedRecordID);
      IF NOT ApprovalEntry.FINDSET THEN
        EXIT(FALSE);

      REPEAT
        PostedApprovalEntry.INIT;
        PostedApprovalEntry.TRANSFERFIELDS(ApprovalEntry);
        PostedApprovalEntry."Number of Approved Requests" := ApprovalEntry."Number of Approved Requests";
        PostedApprovalEntry."Number of Rejected Requests" := ApprovalEntry."Number of Rejected Requests";
        PostedApprovalEntry."Table ID" := PostedRecordID.TABLENO;
        PostedApprovalEntry."Document No." := PostedDocNo;
        PostedApprovalEntry."Posted Record ID" := PostedRecordID;
        PostedApprovalEntry."Entry No." := 0;
        PostedApprovalEntry.INSERT(TRUE);
      UNTIL ApprovalEntry.NEXT = 0;

      PostApprovalCommentLines(ApprovedRecordID,PostedRecordID,PostedDocNo);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE PostApprovalCommentLines@90(ApprovedRecordID@1000 : RecordID;PostedRecordID@1003 : RecordID;PostedDocNo@1004 : Code[20]);
    VAR
      ApprovalCommentLine@1001 : Record 455;
      PostedApprovalCommentLine@1002 : Record 457;
    BEGIN
      ApprovalCommentLine.SETRANGE("Table ID",ApprovedRecordID.TABLENO);
      ApprovalCommentLine.SETRANGE("Record ID to Approve",ApprovedRecordID);
      IF ApprovalCommentLine.FINDSET THEN
        REPEAT
          PostedApprovalCommentLine.INIT;
          PostedApprovalCommentLine.TRANSFERFIELDS(ApprovalCommentLine);
          PostedApprovalCommentLine."Entry No." := 0;
          PostedApprovalCommentLine."Table ID" := PostedRecordID.TABLENO;
          PostedApprovalCommentLine."Document No." := PostedDocNo;
          PostedApprovalCommentLine."Posted Record ID" := PostedRecordID;
          PostedApprovalCommentLine.INSERT(TRUE);
        UNTIL ApprovalCommentLine.NEXT = 0;
    END;

    [External]
    PROCEDURE ShowPostedApprovalEntries@60(PostedRecordID@1000 : RecordID);
    VAR
      PostedApprovalEntry@1001 : Record 456;
    BEGIN
      PostedApprovalEntry.FILTERGROUP(2);
      PostedApprovalEntry.SETRANGE("Posted Record ID",PostedRecordID);
      PostedApprovalEntry.FILTERGROUP(0);
      PAGE.RUN(PAGE::"Posted Approval Entries",PostedApprovalEntry);
    END;

    [External]
    PROCEDURE DeletePostedApprovalEntries@40(PostedRecordID@1000 : RecordID);
    VAR
      PostedApprovalEntry@1003 : Record 456;
    BEGIN
      PostedApprovalEntry.SETRANGE("Table ID",PostedRecordID.TABLENO);
      PostedApprovalEntry.SETRANGE("Posted Record ID",PostedRecordID);
      IF NOT PostedApprovalEntry.ISEMPTY THEN
        PostedApprovalEntry.DELETEALL;
      DeletePostedApprovalCommentLines(PostedRecordID);
    END;

    LOCAL PROCEDURE DeletePostedApprovalCommentLines@37(PostedRecordID@1000 : RecordID);
    VAR
      PostedApprovalCommentLine@1003 : Record 457;
    BEGIN
      PostedApprovalCommentLine.SETRANGE("Table ID",PostedRecordID.TABLENO);
      PostedApprovalCommentLine.SETRANGE("Posted Record ID",PostedRecordID);
      IF NOT PostedApprovalCommentLine.ISEMPTY THEN
        PostedApprovalCommentLine.DELETEALL;
    END;

    [External]
    PROCEDURE SetStatusToPendingApproval@47(VAR Variant@1000 : Variant);
    VAR
      SalesHeader@1002 : Record 36;
      PurchaseHeader@1003 : Record 38;
      IncomingDocument@1004 : Record 130;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchaseHeader);
            PurchaseHeader.VALIDATE(Status,PurchaseHeader.Status::"Pending Approval");
            PurchaseHeader.MODIFY(TRUE);
            Variant := PurchaseHeader;
          END;
        DATABASE::"Sales Header":
          BEGIN
            RecRef.SETTABLE(SalesHeader);
            SalesHeader.VALIDATE(Status,SalesHeader.Status::"Pending Approval");
            SalesHeader.MODIFY(TRUE);
            Variant := SalesHeader;
          END;
        DATABASE::"Incoming Document":
          BEGIN
            RecRef.SETTABLE(IncomingDocument);
            IncomingDocument.VALIDATE(Status,IncomingDocument.Status::"Pending Approval");
            IncomingDocument.MODIFY(TRUE);
            Variant := IncomingDocument;
          END;
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    [External]
    PROCEDURE InformUserOnStatusChange@110(Variant@1001 : Variant;WorkflowInstanceId@1000 : GUID);
    VAR
      RecRef@1004 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          ShowPurchApprovalStatus(Variant);
        DATABASE::"Sales Header":
          ShowSalesApprovalStatus(Variant);
        ELSE
          ShowApprovalStatus(RecRef.RECORDID,WorkflowInstanceId);
      END;
    END;

    [External]
    PROCEDURE GetApprovalComment@53(Variant@1000 : Variant);
    VAR
      BlankGUID@1001 : GUID;
    BEGIN
      ShowApprovalComments(Variant,BlankGUID);
    END;

    [External]
    PROCEDURE GetApprovalCommentForWorkflowStepInstanceID@30(Variant@1000 : Variant;WorkflowStepInstanceID@1001 : GUID);
    BEGIN
      ShowApprovalComments(Variant,WorkflowStepInstanceID);
    END;

    LOCAL PROCEDURE ShowApprovalComments@95(Variant@1002 : Variant;WorkflowStepInstanceID@1000 : GUID);
    VAR
      ApprovalCommentLine@1001 : Record 455;
      ApprovalEntry@1004 : Record 454;
      ApprovalComments@1003 : Page 660;
      RecRef@1005 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            ApprovalCommentLine.SETRANGE("Table ID",RecRef.NUMBER);
            ApprovalCommentLine.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
          END;
        DATABASE::"Purchase Header":
          BEGIN
            ApprovalCommentLine.SETRANGE("Table ID",RecRef.NUMBER);
            ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
            FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecRef.RECORDID);
          END;
        DATABASE::"Sales Header":
          BEGIN
            ApprovalCommentLine.SETRANGE("Table ID",RecRef.NUMBER);
            ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
            FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecRef.RECORDID);
          END;
        ELSE BEGIN
          ApprovalCommentLine.SETRANGE("Table ID",RecRef.NUMBER);
          ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
          FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecRef.RECORDID);
        END;
      END;

      IF ISNULLGUID(WorkflowStepInstanceID) AND (NOT ISNULLGUID(ApprovalEntry."Workflow Step Instance ID")) THEN
        WorkflowStepInstanceID := ApprovalEntry."Workflow Step Instance ID";

      ApprovalComments.SETTABLEVIEW(ApprovalCommentLine);
      ApprovalComments.SetWorkflowStepInstanceID(WorkflowStepInstanceID);
      ApprovalComments.RUN;
    END;

    [External]
    PROCEDURE HasOpenApprovalEntriesForCurrentUser@14(RecordID@1000 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      EXIT(FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID));
    END;

    [External]
    PROCEDURE HasOpenApprovalEntries@154(RecordID@1000 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      EXIT(NOT ApprovalEntry.ISEMPTY);
    END;

    [External]
    PROCEDURE HasOpenOrPendingApprovalEntries@115(RecordID@1000 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Open,ApprovalEntry.Status::Created);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      EXIT(NOT ApprovalEntry.ISEMPTY);
    END;

    [External]
    PROCEDURE HasApprovalEntries@15(RecordID@1001 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1000 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      EXIT(NOT ApprovalEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE HasPendingApprovalEntriesForWorkflow@156(RecId@1000 : RecordID;WorkflowInstanceId@1002 : GUID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Record ID to Approve",RecId);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Open,ApprovalEntry.Status::Created);
      ApprovalEntry.SETFILTER("Workflow Step Instance ID",WorkflowInstanceId);
      EXIT(NOT ApprovalEntry.ISEMPTY);
    END;

    [External]
    PROCEDURE HasAnyOpenJournalLineApprovalEntries@187(JournalTemplateName@1000 : Code[20];JournalBatchName@1003 : Code[20]) : Boolean;
    VAR
      GenJournalLine@1001 : Record 81;
      ApprovalEntry@1002 : Record 454;
      GenJournalLineRecRef@1008 : RecordRef;
      GenJournalLineRecordID@1006 : RecordID;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      IF ApprovalEntry.ISEMPTY THEN
        EXIT(FALSE);

      GenJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      IF GenJournalLine.ISEMPTY THEN
        EXIT(FALSE);

      IF GenJournalLine.COUNT < ApprovalEntry.COUNT THEN BEGIN
        GenJournalLine.FINDSET;
        REPEAT
          IF HasOpenApprovalEntries(GenJournalLine.RECORDID) THEN
            EXIT(TRUE);
        UNTIL GenJournalLine.NEXT = 0;
      END ELSE BEGIN
        ApprovalEntry.FINDSET;
        REPEAT
          GenJournalLineRecordID := ApprovalEntry."Record ID to Approve";
          GenJournalLineRecRef := GenJournalLineRecordID.GETRECORD;
          GenJournalLineRecRef.SETTABLE(GenJournalLine);
          IF (GenJournalLine."Journal Template Name" = JournalTemplateName) AND
             (GenJournalLine."Journal Batch Name" = JournalBatchName)
          THEN
            EXIT(TRUE);
        UNTIL ApprovalEntry.NEXT = 0;
      END;

      EXIT(FALSE)
    END;

    [External]
    PROCEDURE TrySendJournalBatchApprovalRequest@54(VAR GenJournalLine@1000 : Record 81);
    VAR
      GenJournalBatch@1001 : Record 232;
    BEGIN
      GetGeneralJournalBatch(GenJournalBatch,GenJournalLine);
      CheckGeneralJournalBatchApprovalsWorkflowEnabled(GenJournalBatch);
      IF HasOpenApprovalEntries(GenJournalBatch.RECORDID) OR
         HasAnyOpenJournalLineApprovalEntries(GenJournalBatch."Journal Template Name",GenJournalBatch.Name)
      THEN
        ERROR(PendingJournalBatchApprovalExistsErr);
      OnSendGeneralJournalBatchForApproval(GenJournalBatch);
    END;

    [External]
    PROCEDURE TrySendJournalLineApprovalRequests@183(VAR GenJournalLine@1000 : Record 81);
    VAR
      LinesSent@1001 : Integer;
    BEGIN
      IF GenJournalLine.COUNT = 1 THEN
        CheckGeneralJournalLineApprovalsWorkflowEnabled(GenJournalLine);

      REPEAT
        IF WorkflowManagement.CanExecuteWorkflow(GenJournalLine,
             WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode) AND
           NOT HasOpenApprovalEntries(GenJournalLine.RECORDID)
        THEN BEGIN
          OnSendGeneralJournalLineForApproval(GenJournalLine);
          LinesSent += 1;
        END;
      UNTIL GenJournalLine.NEXT = 0;

      CASE LinesSent OF
        0:
          MESSAGE(NoApprovalsSentMsg);
        GenJournalLine.COUNT:
          MESSAGE(PendingApprovalForSelectedLinesMsg);
        ELSE
          MESSAGE(PendingApprovalForSomeSelectedLinesMsg);
      END;
    END;

    [External]
    PROCEDURE TryCancelJournalBatchApprovalRequest@189(VAR GenJournalLine@1000 : Record 81);
    VAR
      GenJournalBatch@1001 : Record 232;
      WorkflowWebhookManagement@1002 : Codeunit 1543;
    BEGIN
      GetGeneralJournalBatch(GenJournalBatch,GenJournalLine);
      OnCancelGeneralJournalBatchApprovalRequest(GenJournalBatch);
      WorkflowWebhookManagement.FindAndCancel(GenJournalBatch.RECORDID);
    END;

    [External]
    PROCEDURE TryCancelJournalLineApprovalRequests@88(VAR GenJournalLine@1000 : Record 81);
    VAR
      WorkflowWebhookManagement@1001 : Codeunit 1543;
    BEGIN
      REPEAT
        IF HasOpenApprovalEntries(GenJournalLine.RECORDID) THEN
          OnCancelGeneralJournalLineApprovalRequest(GenJournalLine);
        WorkflowWebhookManagement.FindAndCancel(GenJournalLine.RECORDID);
      UNTIL GenJournalLine.NEXT = 0;
      MESSAGE(ApprovalReqCanceledForSelectedLinesMsg);
    END;

    [External]
    PROCEDURE ShowJournalApprovalEntries@55(VAR GenJournalLine@1000 : Record 81);
    VAR
      ApprovalEntry@1002 : Record 454;
      GenJournalBatch@1001 : Record 232;
    BEGIN
      GetGeneralJournalBatch(GenJournalBatch,GenJournalLine);

      ApprovalEntry.SETFILTER("Table ID",'%1|%2',DATABASE::"Gen. Journal Batch",DATABASE::"Gen. Journal Line");
      ApprovalEntry.SETFILTER("Record ID to Approve",'%1|%2',GenJournalBatch.RECORDID,GenJournalLine.RECORDID);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      PAGE.RUN(PAGE::"Approval Entries",ApprovalEntry);
    END;

    LOCAL PROCEDURE GetGeneralJournalBatch@87(VAR GenJournalBatch@1000 : Record 232;VAR GenJournalLine@1001 : Record 81);
    BEGIN
      IF NOT GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name") THEN
        GenJournalBatch.GET(GenJournalLine.GETFILTER("Journal Template Name"),GenJournalLine.GETFILTER("Journal Batch Name"));
    END;

    [EventSubscriber(Codeunit,1535,OnRenameRecordInApprovalRequest)]
    [External]
    PROCEDURE RenameApprovalEntries@79(OldRecordId@1000 : RecordID;NewRecordId@1001 : RecordID);
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Record ID to Approve",OldRecordId);
      IF NOT ApprovalEntry.ISEMPTY THEN
        ApprovalEntry.MODIFYALL("Record ID to Approve",NewRecordId,TRUE);
      ChangeApprovalComments(OldRecordId,NewRecordId);
    END;

    LOCAL PROCEDURE ChangeApprovalComments@85(OldRecordId@1000 : RecordID;NewRecordId@1001 : RecordID);
    VAR
      ApprovalCommentLine@1002 : Record 455;
    BEGIN
      ApprovalCommentLine.SETRANGE("Record ID to Approve",OldRecordId);
      IF NOT ApprovalCommentLine.ISEMPTY THEN
        ApprovalCommentLine.MODIFYALL("Record ID to Approve",NewRecordId,TRUE);
    END;

    [EventSubscriber(Codeunit,1535,OnDeleteRecordInApprovalRequest)]
    [External]
    PROCEDURE DeleteApprovalEntries@93(RecordIDToApprove@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordIDToApprove.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordIDToApprove);
      IF NOT ApprovalEntry.ISEMPTY THEN
        ApprovalEntry.DELETEALL(TRUE) ;
      DeleteApprovalCommentLines(RecordIDToApprove);
    END;

    [Internal]
    PROCEDURE DeleteApprovalCommentLines@92(RecordIDToApprove@1000 : RecordID);
    VAR
      ApprovalCommentLine@1001 : Record 455;
    BEGIN
      ApprovalCommentLine.SETRANGE("Table ID",RecordIDToApprove.TABLENO);
      ApprovalCommentLine.SETRANGE("Record ID to Approve",RecordIDToApprove);
      IF NOT ApprovalCommentLine.ISEMPTY THEN
        ApprovalCommentLine.DELETEALL(TRUE);
    END;

    [External]
    PROCEDURE CopyApprovalEntryQuoteToOrder@66(FromRecID@1006 : RecordID;ToDocNo@1007 : Code[20];ToRecID@1008 : RecordID);
    VAR
      FromApprovalEntry@1000 : Record 454;
      ToApprovalEntry@1001 : Record 454;
      FromApprovalCommentLine@1002 : Record 455;
      ToApprovalCommentLine@1003 : Record 455;
      LastEntryNo@1004 : Integer;
    BEGIN
      FromApprovalEntry.SETRANGE("Table ID",FromRecID.TABLENO);
      FromApprovalEntry.SETRANGE("Record ID to Approve",FromRecID);
      IF FromApprovalEntry.FINDSET THEN BEGIN
        ToApprovalEntry.FINDLAST;
        LastEntryNo := ToApprovalEntry."Entry No.";
        REPEAT
          ToApprovalEntry := FromApprovalEntry;
          ToApprovalEntry."Entry No." := LastEntryNo + 1;
          ToApprovalEntry."Document Type" := ToApprovalEntry."Document Type"::Order;
          ToApprovalEntry."Document No." := ToDocNo;
          ToApprovalEntry."Record ID to Approve" := ToRecID;
          LastEntryNo += 1;
          ToApprovalEntry.INSERT;
        UNTIL FromApprovalEntry.NEXT = 0;

        FromApprovalCommentLine.SETRANGE("Table ID",FromRecID.TABLENO);
        FromApprovalCommentLine.SETRANGE("Record ID to Approve",FromRecID);
        IF FromApprovalCommentLine.FINDSET THEN BEGIN
          ToApprovalCommentLine.FINDLAST;
          LastEntryNo := ToApprovalCommentLine."Entry No.";
          REPEAT
            ToApprovalCommentLine := FromApprovalCommentLine;
            ToApprovalCommentLine."Entry No." := LastEntryNo + 1;
            ToApprovalCommentLine."Document Type" := ToApprovalCommentLine."Document Type"::Order;
            ToApprovalCommentLine."Document No." := ToDocNo;
            ToApprovalCommentLine."Record ID to Approve" := ToRecID;
            ToApprovalCommentLine.INSERT;
            LastEntryNo += 1;
          UNTIL FromApprovalCommentLine.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE GetLastSequenceNo@16(ApprovalEntryArgument@1000 : Record 454) : Integer;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        SETCURRENTKEY("Record ID to Approve","Workflow Step Instance ID","Sequence No.");
        SETRANGE("Table ID",ApprovalEntryArgument."Table ID");
        SETRANGE("Record ID to Approve",ApprovalEntryArgument."Record ID to Approve");
        SETRANGE("Workflow Step Instance ID",ApprovalEntryArgument."Workflow Step Instance ID");
        IF FINDLAST THEN
          EXIT("Sequence No.");
      END;
      EXIT(0);
    END;

    [External]
    PROCEDURE OpenApprovalEntriesPage@75(RecId@1000 : RecordID);
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecId.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecId);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      PAGE.RUNMODAL(PAGE::"Approval Entries",ApprovalEntry);
    END;

    [External]
    PROCEDURE CanCancelApprovalForRecord@106(RecID@1000 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
      UserSetup@1002 : Record 91;
    BEGIN
      IF NOT UserSetup.GET(USERID) THEN
        EXIT(FALSE);

      ApprovalEntry.SETRANGE("Table ID",RecID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecID);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);

      IF NOT UserSetup."Approval Administrator" THEN
        ApprovalEntry.SETRANGE("Sender ID",USERID);
      EXIT(ApprovalEntry.FINDFIRST);
    END;

    LOCAL PROCEDURE FindUserSetupBySalesPurchCode@114(VAR UserSetup@1000 : Record 91;ApprovalEntryArgument@1001 : Record 454);
    BEGIN
      IF ApprovalEntryArgument."Salespers./Purch. Code" <> '' THEN BEGIN
        UserSetup.SETCURRENTKEY("Salespers./Purch. Code");
        UserSetup.SETRANGE("Salespers./Purch. Code",ApprovalEntryArgument."Salespers./Purch. Code");
        IF NOT UserSetup.FINDFIRST THEN
          ERROR(
            PurchaserUserNotFoundErr,UserSetup."User ID",UserSetup.FIELDCAPTION("Salespers./Purch. Code"),
            UserSetup."Salespers./Purch. Code");
        EXIT;
      END;
    END;

    LOCAL PROCEDURE CheckUserAsApprovalAdministrator@116();
    VAR
      UserSetup@1000 : Record 91;
    BEGIN
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Approval Administrator");
    END;

    LOCAL PROCEDURE FindApprovedApprovalEntryForWorkflowUserGroup@122(VAR ApprovalEntry@1000 : Record 454;WorkflowStepInstance@1005 : Record 1504) : Boolean;
    VAR
      WorkflowStepArgument@1001 : Record 1523;
      WorkflowResponseHandling@1003 : Codeunit 1521;
    BEGIN
      WorkflowStepInstance.SETRANGE("Function Name",WorkflowResponseHandling.CreateApprovalRequestsCode);
      WorkflowStepInstance.SETRANGE("Record ID",WorkflowStepInstance."Record ID");
      WorkflowStepInstance.SETRANGE("Workflow Code",WorkflowStepInstance."Workflow Code");
      WorkflowStepInstance.SETRANGE(Type,WorkflowStepInstance.Type::Response);
      WorkflowStepInstance.SETRANGE(Status,WorkflowStepInstance.Status::Completed);
      IF WorkflowStepInstance.FINDSET THEN
        REPEAT
          IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
            IF WorkflowStepArgument."Approver Type" = WorkflowStepArgument."Approver Type"::"Workflow User Group" THEN BEGIN
              ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Approved);
              EXIT(ApprovalEntry.FINDLAST);
            END;
        UNTIL WorkflowStepInstance.NEXT = 0;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE FindOpenApprovalEntriesForWorkflowStepInstance@117(ApprovalEntry@1001 : Record 454;WorkflowStepInstanceRecID@1002 : RecordID) : Boolean;
    VAR
      ApprovalEntry2@1000 : Record 454;
    BEGIN
      IF ApprovalEntry."Approval Type" = ApprovalEntry."Approval Type"::"Workflow User Group" THEN
        ApprovalEntry2.SETFILTER("Sequence No.",'>%1',ApprovalEntry."Sequence No.");
      ApprovalEntry2.SETFILTER("Record ID to Approve",'%1|%2',WorkflowStepInstanceRecID,ApprovalEntry."Record ID to Approve");
      ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Open);
      ApprovalEntry2.SETRANGE("Workflow Step Instance ID",ApprovalEntry."Workflow Step Instance ID");
      EXIT(NOT ApprovalEntry2.ISEMPTY);
    END;

    BEGIN
    END.
  }
}

OBJECT Page 99000786 Production BOM
{
  OBJECT-PROPERTIES
  {
    Date=21/12/17;
    Time=12:00:00;
    Version List=NAVW111.00.00.19846;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Production BOM;
               ENG=Production BOM];
    SourceTable=Table99000771;
    PageType=ListPlus;
    OnAfterGetRecord=BEGIN
                       ActiveVersionCode := VersionMgt.GetBOMVersion("No.",WORKDATE,TRUE);
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 19      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Prod. BOM;
                                 ENG=&Prod. BOM];
                      Image=BOM }
      { 20      ;2   ;Action    ;
                      CaptionML=[ENU=Co&mments;
                                 ENG=Co&mments];
                      ToolTipML=[ENU=View or add comments for the record.;
                                 ENG=View or add comments for the record.];
                      ApplicationArea=#Manufacturing;
                      RunObject=Page 99000784;
                      RunPageLink=Table Name=CONST(Production BOM Header),
                                  No.=FIELD(No.);
                      Image=ViewComments }
      { 13      ;2   ;Action    ;
                      CaptionML=[ENU=Versions;
                                 ENG=Versions];
                      ToolTipML=[ENU=View any alternate versions of the production BOM.;
                                 ENG=View any alternate versions of the production BOM.];
                      ApplicationArea=#Manufacturing;
                      RunObject=Page 99000800;
                      RunPageLink=Production BOM No.=FIELD(No.);
                      Promoted=Yes;
                      Image=BOMVersions;
                      PromotedCategory=Process }
      { 10      ;2   ;Action    ;
                      CaptionML=[ENU=Ma&trix per Version;
                                 ENG=Ma&trix per Version];
                      ToolTipML=[ENU=View a list of all versions and items and the used quantity per item of a production BOM. You can use the matrix to compare different production BOM versions concerning the used items per version.;
                                 ENG=View a list of all versions and items and the used quantity per item of a production BOM. You can use the matrix to compare different production BOM versions concerning the used items per version.];
                      ApplicationArea=#Manufacturing;
                      Promoted=Yes;
                      Image=ProdBOMMatrixPerVersion;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 BOMMatrixForm@1001 : Page 99000812;
                               BEGIN
                                 BOMMatrixForm.Set(Rec);

                                 BOMMatrixForm.RUNMODAL;
                                 CLEAR(BOMMatrixForm);
                               END;
                                }
      { 21      ;2   ;Action    ;
                      CaptionML=[ENU=Where-used;
                                 ENG=Where-used];
                      ToolTipML=[ENU=View a list of BOMs in which the item is used.;
                                 ENG=View a list of BOMs in which the item is used.];
                      ApplicationArea=#Manufacturing;
                      Promoted=Yes;
                      Image=Where-Used;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ProdBOMWhereUsed.SetProdBOM(Rec,WORKDATE);
                                 ProdBOMWhereUsed.RUNMODAL;
                                 CLEAR(ProdBOMWhereUsed);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 23      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ENG=F&unctions];
                      Image=Action }
      { 22      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Copy &BOM;
                                 ENG=Copy &BOM];
                      ToolTipML=[ENU=Copy an existing production BOM to quickly create a similar BOM.;
                                 ENG=Copy an existing production BOM to quickly create a similar BOM.];
                      ApplicationArea=#Manufacturing;
                      Image=CopyBOM;
                      OnAction=BEGIN
                                 TESTFIELD("No.");
                                 IF PAGE.RUNMODAL(0,ProdBOMHeader) = ACTION::LookupOK THEN
                                   ProductionBOMCopy.CopyBOM(ProdBOMHeader."No.",'',Rec,'');
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENG=General] }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the involved entry or record, according to the specified number series.;
                           ENG=Specifies the number of the involved entry or record, according to the specified number series.];
                ApplicationArea=#Manufacturing;
                SourceExpr="No.";
                OnAssistEdit=BEGIN
                               IF AssistEdit(xRec) THEN
                                 CurrPage.UPDATE;
                             END;
                              }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a description for the production BOM.;
                           ENG=Specifies a description for the production BOM.];
                ApplicationArea=#Manufacturing;
                SourceExpr=Description }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies how each unit of the item or resource is measured, such as in pieces or hours. By default, the value in the Base Unit of Measure field on the item or resource card is inserted.;
                           ENG=Specifies how each unit of the item or resource is measured, such as in pieces or hours. By default, the value in the Base Unit of Measure field on the item or resource card is inserted.];
                ApplicationArea=#Manufacturing;
                SourceExpr="Unit of Measure Code" }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the status of the production BOM.;
                           ENG=Specifies the status of the production BOM.];
                ApplicationArea=#Manufacturing;
                SourceExpr=Status }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies an alternate name that you can use to search for the record in question when you cannot remember the value in the Name field.;
                           ENG=Specifies an alternate name that you can use to search for the record in question when you cannot remember the value in the Name field.];
                ApplicationArea=#Manufacturing;
                SourceExpr="Search Name" }

    { 29  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the version number series that the production BOM versions refer to.;
                           ENG=Specifies the version number series that the production BOM versions refer to.];
                ApplicationArea=#Manufacturing;
                SourceExpr="Version Nos." }

    { 26  ;2   ;Field     ;
                CaptionML=[ENU=Active Version;
                           ENG=Active Version];
                ToolTipML=[ENU=Specifies which version of the production BOM is valid.;
                           ENG=Specifies which version of the production BOM is valid.];
                ApplicationArea=#Manufacturing;
                SourceExpr=ActiveVersionCode;
                Editable=FALSE;
                OnLookup=VAR
                           ProdBOMVersion@1002 : Record 99000779;
                         BEGIN
                           ProdBOMVersion.SETRANGE("Production BOM No.","No.");
                           ProdBOMVersion.SETRANGE("Version Code",ActiveVersionCode);
                           PAGE.RUNMODAL(PAGE::"Production BOM Version",ProdBOMVersion);
                           ActiveVersionCode := VersionMgt.GetBOMVersion("No.",WORKDATE,TRUE);
                         END;
                          }

    { 11  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the last date that was modified.;
                           ENG=Specifies the last date that was modified.];
                ApplicationArea=#Manufacturing;
                SourceExpr="Last Date Modified" }

    { 27  ;1   ;Part      ;
                Name=ProdBOMLine;
                ApplicationArea=#Manufacturing;
                SubPageView=SORTING(Production BOM No.,Version Code,Line No.);
                SubPageLink=Production BOM No.=FIELD(No.),
                            Version Code=CONST();
                PagePartID=Page99000788;
                PartType=Page }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=TRUE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      ProdBOMHeader@1000 : Record 99000771;
      ProductionBOMCopy@1002 : Codeunit 99000768;
      VersionMgt@1003 : Codeunit 99000756;
      ProdBOMWhereUsed@1001 : Page 99000811;
      ActiveVersionCode@1004 : Code[20];

    BEGIN
    END.
  }
}

