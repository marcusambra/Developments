OBJECT Table 167 Job
{
  OBJECT-PROPERTIES
  {
    Date=16/03/20;
    Time=10:03:04;
    Modified=Yes;
    Version List=NAVW110.00.00.26396,WF;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Description;
    OnInsert=BEGIN
               JobsSetup.GET;

               IF "No." = '' THEN BEGIN
                 JobsSetup.TESTFIELD("Job Nos.");
                 NoSeriesMgt.InitSeries(JobsSetup."Job Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               IF GETFILTER("Bill-to Customer No.") <> '' THEN
                 IF GETRANGEMIN("Bill-to Customer No.") = GETRANGEMAX("Bill-to Customer No.") THEN
                   VALIDATE("Bill-to Customer No.",GETRANGEMIN("Bill-to Customer No."));

               IF NOT "Apply Usage Link" THEN
                 VALIDATE("Apply Usage Link",JobsSetup."Apply Usage Link by Default");
               IF NOT "Allow Schedule/Contract Lines" THEN
                 VALIDATE("Allow Schedule/Contract Lines",JobsSetup."Allow Sched/Contract Lines Def");
               IF "WIP Method" = '' THEN
                 VALIDATE("WIP Method",JobsSetup."Default WIP Method");
               IF "Job Posting Group" = '' THEN
                 VALIDATE("Job Posting Group",JobsSetup."Default Job Posting Group");
               VALIDATE("WIP Posting Method",JobsSetup."Default WIP Posting Method");

               DimMgt.UpdateDefaultDim(
                 DATABASE::Job,"No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");
               InitWIPFields;

               "Creation Date" := TODAY;
               "Last Date Modified" := "Creation Date";

               IF ("Project Manager" <> '') AND (Status = Status::Open) THEN
                 AddToMyJobs("Project Manager");
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;

               IF (("Project Manager" <> xRec."Project Manager") AND (xRec."Project Manager" <> '')) OR (Status <> Status::Open) THEN
                 RemoveFromMyJobs;

               IF ("Project Manager" <> '') AND (xRec."Project Manager" <> "Project Manager") THEN
                 IF Status = Status::Open THEN
                   AddToMyJobs("Project Manager");
             END;

    OnDelete=VAR
               CommentLine@1004 : Record 97;
               JobTask@1000 : Record 1001;
               JobResPrice@1001 : Record 1012;
               JobItemPrice@1002 : Record 1013;
               JobGLAccPrice@1003 : Record 1014;
             BEGIN
               MoveEntries.MoveJobEntries(Rec);

               JobTask.SETCURRENTKEY("Job No.");
               JobTask.SETRANGE("Job No.","No.");
               JobTask.DELETEALL(TRUE);

               JobResPrice.SETRANGE("Job No.","No.");
               JobResPrice.DELETEALL;

               JobItemPrice.SETRANGE("Job No.","No.");
               JobItemPrice.DELETEALL;

               JobGLAccPrice.SETRANGE("Job No.","No.");
               JobGLAccPrice.DELETEALL;

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Job);
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               DimMgt.DeleteDefaultDim(DATABASE::Job,"No.");

               IF "Project Manager" <> '' THEN
                 RemoveFromMyJobs;
             END;

    OnRename=BEGIN
               UpdateJobNoInReservationEntries;
               "Last Date Modified" := TODAY;
             END;

    CaptionML=[ENU=Job;
               ENG=Job];
    LookupPageID=Page89;
    DrillDownPageID=Page89;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  JobsSetup.GET;
                                                                  NoSeriesMgt.TestManual(JobsSetup."Job Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   AltSearchField=Search Description;
                                                   CaptionML=[ENU=No.;
                                                              ENG=No.] }
    { 2   ;   ;Search Description  ;Code50        ;CaptionML=[ENU=Search Description;
                                                              ENG=Search Description] }
    { 3   ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                IF ("Search Description" = UPPERCASE(xRec.Description)) OR ("Search Description" = '') THEN
                                                                  "Search Description" := Description;
                                                              END;

                                                   CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 4   ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENG=Description 2] }
    { 5   ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF ("Bill-to Customer No." = '') OR ("Bill-to Customer No." <> xRec."Bill-to Customer No.") THEN
                                                                  IF JobLedgEntryExist OR JobPlanningLineExist THEN
                                                                    ERROR(AssociatedEntriesExistErr,FIELDCAPTION("Bill-to Customer No."),TABLECAPTION);
                                                                UpdateCust;
                                                              END;

                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENG=Bill-to Customer No.] }
    { 12  ;   ;Creation Date       ;Date          ;CaptionML=[ENU=Creation Date;
                                                              ENG=Creation Date];
                                                   Editable=No }
    { 13  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                CheckDate;
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              ENG=Starting Date] }
    { 14  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                CheckDate;
                                                              END;

                                                   CaptionML=[ENU=Ending Date;
                                                              ENG=Ending Date] }
    { 19  ;   ;Status              ;Option        ;InitValue=Open;
                                                   OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                              BEGIN
                                                                IF xRec.Status <> Status THEN BEGIN
                                                                  IF Status = Status::Completed THEN
                                                                    VALIDATE(Complete,TRUE);
                                                                  IF xRec.Status = xRec.Status::Completed THEN
                                                                    IF DIALOG.CONFIRM(StatusChangeQst) THEN
                                                                      VALIDATE(Complete,FALSE)
                                                                    ELSE
                                                                      Status := xRec.Status;
                                                                  MODIFY;
                                                                  JobPlanningLine.SETCURRENTKEY("Job No.");
                                                                  JobPlanningLine.SETRANGE("Job No.","No.");
                                                                  JobPlanningLine.MODIFYALL(Status,Status);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              ENG=Status];
                                                   OptionCaptionML=[ENU=Planning,Quote,Open,Completed;
                                                                    ENG=Planning,Quote,Open,Completed];
                                                   OptionString=Planning,Quote,Open,Completed }
    { 20  ;   ;Person Responsible  ;Code20        ;TableRelation=Resource WHERE (Type=CONST(Person));
                                                   CaptionML=[ENU=Person Responsible;
                                                              ENG=Person Responsible] }
    { 21  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              ENG=Global Dimension 1 Code];
                                                   CaptionClass='1,1,1' }
    { 22  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              ENG=Global Dimension 2 Code];
                                                   CaptionClass='1,1,2' }
    { 23  ;   ;Job Posting Group   ;Code20        ;TableRelation="Job Posting Group";
                                                   CaptionML=[ENU=Job Posting Group;
                                                              ENG=Job Posting Group] }
    { 24  ;   ;Blocked             ;Option        ;CaptionML=[ENU=Blocked;
                                                              ENG=Blocked];
                                                   OptionCaptionML=[ENU=" ,Posting,All";
                                                                    ENG=" ,Posting,All"];
                                                   OptionString=[ ,Posting,All] }
    { 29  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ENG=Last Date Modified];
                                                   Editable=No }
    { 30  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Job),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ENG=Comment];
                                                   Editable=No }
    { 31  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ENG=Customer Disc. Group] }
    { 32  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=[ENU=Customer Price Group;
                                                              ENG=Customer Price Group] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              ENG=Language Code] }
    { 49  ;   ;Scheduled Res. Qty. ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line"."Quantity (Base)" WHERE (Job No.=FIELD(No.),
                                                                                                                Schedule Line=CONST(Yes),
                                                                                                                Type=CONST(Resource),
                                                                                                                No.=FIELD(Resource Filter),
                                                                                                                Planning Date=FIELD(Planning Date Filter)));
                                                   CaptionML=[ENU=Scheduled Res. Qty.;
                                                              ENG=Scheduled Res. Qty.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 50  ;   ;Resource Filter     ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Resource;
                                                   CaptionML=[ENU=Resource Filter;
                                                              ENG=Resource Filter] }
    { 51  ;   ;Posting Date Filter ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Posting Date Filter;
                                                              ENG=Posting/Tax Point Date Filter] }
    { 55  ;   ;Resource Gr. Filter ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Resource Group";
                                                   CaptionML=[ENU=Resource Gr. Filter;
                                                              ENG=Resource Gr. Filter] }
    { 56  ;   ;Scheduled Res. Gr. Qty.;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line"."Quantity (Base)" WHERE (Job No.=FIELD(No.),
                                                                                                                Schedule Line=CONST(Yes),
                                                                                                                Type=CONST(Resource),
                                                                                                                Resource Group No.=FIELD(Resource Gr. Filter),
                                                                                                                Planning Date=FIELD(Planning Date Filter)));
                                                   CaptionML=[ENU=Scheduled Res. Gr. Qty.;
                                                              ENG=Scheduled Res. Gr. Qty.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 57  ;   ;Picture             ;BLOB          ;CaptionML=[ENU=Picture;
                                                              ENG=Picture];
                                                   SubType=Bitmap }
    { 58  ;   ;Bill-to Name        ;Text50        ;CaptionML=[ENU=Bill-to Name;
                                                              ENG=Bill-to Name] }
    { 59  ;   ;Bill-to Address     ;Text50        ;CaptionML=[ENU=Bill-to Address;
                                                              ENG=Bill-to Address] }
    { 60  ;   ;Bill-to Address 2   ;Text50        ;CaptionML=[ENU=Bill-to Address 2;
                                                              ENG=Bill-to Address 2] }
    { 61  ;   ;Bill-to City        ;Text30        ;TableRelation=IF (Bill-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Bill-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Bill-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to City;
                                                              ENG=Bill-to City] }
    { 63  ;   ;Bill-to County      ;Text30        ;CaptionML=[ENU=Bill-to County;
                                                              ENG=Bill-to County] }
    { 64  ;   ;Bill-to Post Code   ;Code20        ;TableRelation=IF (Bill-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Bill-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Bill-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to Post Code;
                                                              ENG=Bill-to Postcode] }
    { 66  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENG=No. Series];
                                                   Editable=No }
    { 67  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Bill-to Country/Region Code;
                                                              ENG=Bill-to Country/Region Code];
                                                   Editable=Yes }
    { 68  ;   ;Bill-to Name 2      ;Text50        ;CaptionML=[ENU=Bill-to Name 2;
                                                              ENG=Bill-to Name 2] }
    { 117 ;   ;Reserve             ;Option        ;AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Reserve;
                                                              ENG=Reserve];
                                                   OptionCaptionML=[ENU=Never,Optional,Always;
                                                                    ENG=Never,Optional,Always];
                                                   OptionString=Never,Optional,Always }
    { 140 ;   ;Image               ;Media         ;CaptionML=[ENU=Image;
                                                              ENG=Image] }
    { 1000;   ;WIP Method          ;Code20        ;TableRelation="Job WIP Method".Code WHERE (Valid=CONST(Yes));
                                                   OnValidate=VAR
                                                                JobTask@1000 : Record 1001;
                                                                JobWIPMethod@1001 : Record 1006;
                                                              BEGIN
                                                                IF "WIP Posting Method" = "WIP Posting Method"::"Per Job Ledger Entry" THEN BEGIN
                                                                  JobWIPMethod.GET("WIP Method");
                                                                  IF NOT JobWIPMethod."WIP Cost" THEN
                                                                    ERROR(WIPPostMethodErr,FIELDCAPTION("WIP Posting Method"),FIELDCAPTION("WIP Method"),JobWIPMethod.FIELDCAPTION("WIP Cost"));
                                                                  IF NOT JobWIPMethod."WIP Sales" THEN
                                                                    ERROR(WIPPostMethodErr,FIELDCAPTION("WIP Posting Method"),FIELDCAPTION("WIP Method"),JobWIPMethod.FIELDCAPTION("WIP Sales"));
                                                                END;

                                                                JobTask.SETRANGE("Job No.","No.");
                                                                JobTask.SETRANGE("WIP-Total",JobTask."WIP-Total"::Total);
                                                                IF JobTask.FINDFIRST THEN
                                                                  IF CONFIRM(WIPMethodQst,TRUE,JobTask.FIELDCAPTION("WIP Method"),JobTask.TABLECAPTION,JobTask."WIP-Total") THEN
                                                                    JobTask.MODIFYALL("WIP Method","WIP Method",TRUE);
                                                              END;

                                                   CaptionML=[ENU=WIP Method;
                                                              ENG=WIP Method] }
    { 1001;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF "Currency Code" <> xRec."Currency Code" THEN
                                                                  IF NOT JobLedgEntryExist THEN BEGIN
                                                                    CurrencyUpdatePlanningLines;
                                                                    CurrencyUpdatePurchLines;
                                                                  END ELSE
                                                                    ERROR(AssociatedEntriesExistErr,FIELDCAPTION("Currency Code"),TABLECAPTION);
                                                                IF "Currency Code" <> '' THEN
                                                                  VALIDATE("Invoice Currency Code",'');
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ENG=Currency Code] }
    { 1002;   ;Bill-to Contact No. ;Code20        ;OnValidate=BEGIN
                                                                IF ("Bill-to Contact No." <> xRec."Bill-to Contact No.") AND
                                                                   (xRec."Bill-to Contact No." <> '')
                                                                THEN
                                                                  IF ("Bill-to Contact No." = '') AND ("Bill-to Customer No." = '') THEN BEGIN
                                                                    INIT;
                                                                    "No. Series" := xRec."No. Series";
                                                                    VALIDATE(Description,xRec.Description);
                                                                  END;

                                                                IF ("Bill-to Customer No." <> '') AND ("Bill-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Bill-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(ContactBusRelDiffCompErr,Cont."No.",Cont.Name,"Bill-to Customer No.");
                                                                END;
                                                                UpdateBillToCust("Bill-to Contact No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF ("Bill-to Customer No." <> '') AND Cont.GET("Bill-to Contact No.") THEN
                                                                Cont.SETRANGE("Company No.",Cont."Company No.")
                                                              ELSE
                                                                IF Cust.GET("Bill-to Customer No.") THEN BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.");
                                                                END ELSE
                                                                  Cont.SETFILTER("Company No.",'<>''''');

                                                              IF "Bill-to Contact No." <> '' THEN
                                                                IF Cont.GET("Bill-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Bill-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   AccessByPermission=TableData 5050=R;
                                                   CaptionML=[ENU=Bill-to Contact No.;
                                                              ENG=Bill-to Contact No.] }
    { 1003;   ;Bill-to Contact     ;Text50        ;CaptionML=[ENU=Bill-to Contact;
                                                              ENG=Bill-to Contact] }
    { 1004;   ;Planning Date Filter;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Planning Date Filter;
                                                              ENG=Planning Date Filter] }
    { 1005;   ;Total WIP Cost Amount;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                              Job Complete=CONST(No),
                                                                                                              Type=FILTER(Accrued Costs|Applied Costs|Recognized Costs)));
                                                   CaptionML=[ENU=Total WIP Cost Amount;
                                                              ENG=Total WIP Cost Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1006;   ;Total WIP Cost G/L Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                  Reversed=CONST(No),
                                                                                                                  Job Complete=CONST(No),
                                                                                                                  Type=FILTER(Accrued Costs|Applied Costs|Recognized Costs)));
                                                   CaptionML=[ENU=Total WIP Cost G/L Amount;
                                                              ENG=Total WIP Cost G/L Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1007;   ;WIP Entries Exist   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Job WIP Entry" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=[ENU=WIP Entries Exist;
                                                              ENG=WIP Entries Exist] }
    { 1008;   ;WIP Posting Date    ;Date          ;CaptionML=[ENU=WIP Posting Date;
                                                              ENG=WIP Posting/Tax Point Date];
                                                   Editable=No }
    { 1009;   ;WIP G/L Posting Date;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Min("Job WIP G/L Entry"."WIP Posting Date" WHERE (Reversed=CONST(No),
                                                                                                                 Job No.=FIELD(No.)));
                                                   CaptionML=[ENU=WIP G/L Posting Date;
                                                              ENG=WIP G/L Posting/Tax Point Date];
                                                   Editable=No }
    { 1011;   ;Invoice Currency Code;Code10       ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF "Invoice Currency Code" <> '' THEN
                                                                  VALIDATE("Currency Code",'');
                                                              END;

                                                   CaptionML=[ENU=Invoice Currency Code;
                                                              ENG=Invoice Currency Code] }
    { 1012;   ;Exch. Calculation (Cost);Option    ;CaptionML=[ENU=Exch. Calculation (Cost);
                                                              ENG=Exch. Calculation (Cost)];
                                                   OptionCaptionML=[ENU=Fixed FCY,Fixed LCY;
                                                                    ENG=Fixed FCY,Fixed LCY];
                                                   OptionString=Fixed FCY,Fixed LCY }
    { 1013;   ;Exch. Calculation (Price);Option   ;CaptionML=[ENU=Exch. Calculation (Price);
                                                              ENG=Exch. Calculation (Price)];
                                                   OptionCaptionML=[ENU=Fixed FCY,Fixed LCY;
                                                                    ENG=Fixed FCY,Fixed LCY];
                                                   OptionString=Fixed FCY,Fixed LCY }
    { 1014;   ;Allow Schedule/Contract Lines;Boolean;
                                                   CaptionML=[ENU=Allow Budget/Billable Lines;
                                                              ENG=Allow Budget/Billable Lines] }
    { 1015;   ;Complete            ;Boolean       ;OnValidate=BEGIN
                                                                IF Complete <> xRec.Complete THEN
                                                                  ChangeJobCompletionStatus;
                                                              END;

                                                   CaptionML=[ENU=Complete;
                                                              ENG=Complete] }
    { 1017;   ;Recog. Sales Amount ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                              Type=FILTER(Recognized Sales)));
                                                   CaptionML=[ENU=Recog. Sales Amount;
                                                              ENG=Recog. Sales Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1018;   ;Recog. Sales G/L Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                  Reversed=CONST(No),
                                                                                                                  Type=FILTER(Recognized Sales)));
                                                   CaptionML=[ENU=Recog. Sales G/L Amount;
                                                              ENG=Recog. Sales G/L Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1019;   ;Recog. Costs Amount ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                             Type=FILTER(Recognized Costs)));
                                                   CaptionML=[ENU=Recog. Costs Amount;
                                                              ENG=Recog. Costs Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1020;   ;Recog. Costs G/L Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                 Reversed=CONST(No),
                                                                                                                 Type=FILTER(Recognized Costs)));
                                                   CaptionML=[ENU=Recog. Costs G/L Amount;
                                                              ENG=Recog. Costs G/L Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1021;   ;Total WIP Sales Amount;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                             Job Complete=CONST(No),
                                                                                                             Type=FILTER(Accrued Sales|Applied Sales|Recognized Sales)));
                                                   CaptionML=[ENU=Total WIP Sales Amount;
                                                              ENG=Total WIP Sales Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1022;   ;Total WIP Sales G/L Amount;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                 Reversed=CONST(No),
                                                                                                                 Job Complete=CONST(No),
                                                                                                                 Type=FILTER(Accrued Sales|Applied Sales|Recognized Sales)));
                                                   CaptionML=[ENU=Total WIP Sales G/L Amount;
                                                              ENG=Total WIP Sales G/L Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1023;   ;WIP Completion Calculated;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Job WIP Entry" WHERE (Job No.=FIELD(No.),
                                                                                            Job Complete=CONST(Yes)));
                                                   CaptionML=[ENU=WIP Completion Calculated;
                                                              ENG=WIP Completion Calculated] }
    { 1024;   ;Next Invoice Date   ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Min("Job Planning Line"."Planning Date" WHERE (Job No.=FIELD(No.),
                                                                                                              Contract Line=CONST(Yes),
                                                                                                              Qty. to Invoice=FILTER(<>0)));
                                                   CaptionML=[ENU=Next Invoice Date;
                                                              ENG=Next Invoice Date] }
    { 1025;   ;Apply Usage Link    ;Boolean       ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                                JobLedgerEntry@1001 : Record 169;
                                                                JobUsageLink@1002 : Record 1020;
                                                              BEGIN
                                                                IF "Apply Usage Link" THEN BEGIN
                                                                  JobLedgerEntry.SETCURRENTKEY("Job No.");
                                                                  JobLedgerEntry.SETRANGE("Job No.","No.");
                                                                  JobLedgerEntry.SETRANGE("Entry Type",JobLedgerEntry."Entry Type"::Usage);
                                                                  IF JobLedgerEntry.FINDFIRST THEN BEGIN
                                                                    JobUsageLink.SETRANGE("Entry No.",JobLedgerEntry."Entry No.");
                                                                    IF JobUsageLink.ISEMPTY THEN
                                                                      ERROR(ApplyUsageLinkErr,TABLECAPTION);
                                                                  END;

                                                                  JobPlanningLine.SETCURRENTKEY("Job No.");
                                                                  JobPlanningLine.SETRANGE("Job No.","No.");
                                                                  JobPlanningLine.SETRANGE("Schedule Line",TRUE);
                                                                  IF JobPlanningLine.FINDSET THEN
                                                                    REPEAT
                                                                      JobPlanningLine.VALIDATE("Usage Link",TRUE);
                                                                      IF JobPlanningLine."Planning Date" = 0D THEN
                                                                        JobPlanningLine.VALIDATE("Planning Date",WORKDATE);
                                                                      JobPlanningLine.MODIFY(TRUE);
                                                                    UNTIL JobPlanningLine.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Apply Usage Link;
                                                              ENG=Apply Usage Link] }
    { 1026;   ;WIP Warnings        ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Job WIP Warning" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=[ENU=WIP Warnings;
                                                              ENG=WIP Warnings];
                                                   Editable=No }
    { 1027;   ;WIP Posting Method  ;Option        ;OnValidate=VAR
                                                                JobLedgerEntry@1000 : Record 169;
                                                                JobWIPEntry@1001 : Record 1004;
                                                                JobWIPMethod@1002 : Record 1006;
                                                              BEGIN
                                                                IF xRec."WIP Posting Method" = "WIP Posting Method"::"Per Job Ledger Entry" THEN BEGIN
                                                                  JobLedgerEntry.SETRANGE("Job No.","No.");
                                                                  JobLedgerEntry.SETFILTER("Amt. Posted to G/L",'<>%1',0);
                                                                  IF NOT JobLedgerEntry.ISEMPTY THEN
                                                                    ERROR(WIPAlreadyPostedErr,FIELDCAPTION("WIP Posting Method"),xRec."WIP Posting Method");
                                                                END;

                                                                JobWIPEntry.SETRANGE("Job No.","No.");
                                                                IF NOT JobWIPEntry.ISEMPTY THEN
                                                                  ERROR(WIPAlreadyAssociatedErr,FIELDCAPTION("WIP Posting Method"));

                                                                IF "WIP Posting Method" = "WIP Posting Method"::"Per Job Ledger Entry" THEN BEGIN
                                                                  JobWIPMethod.GET("WIP Method");
                                                                  IF NOT JobWIPMethod."WIP Cost" THEN
                                                                    ERROR(WIPPostMethodErr,FIELDCAPTION("WIP Posting Method"),FIELDCAPTION("WIP Method"),JobWIPMethod.FIELDCAPTION("WIP Cost"));
                                                                  IF NOT JobWIPMethod."WIP Sales" THEN
                                                                    ERROR(WIPPostMethodErr,FIELDCAPTION("WIP Posting Method"),FIELDCAPTION("WIP Method"),JobWIPMethod.FIELDCAPTION("WIP Sales"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=WIP Posting Method;
                                                              ENG=WIP Posting Method];
                                                   OptionCaptionML=[ENU=Per Job,Per Job Ledger Entry;
                                                                    ENG=Per Job,Per Job Ledger Entry];
                                                   OptionString=Per Job,Per Job Ledger Entry }
    { 1028;   ;Applied Costs G/L Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                  Reverse=CONST(No),
                                                                                                                  Job Complete=CONST(No),
                                                                                                                  Type=FILTER(Applied Costs)));
                                                   CaptionML=[ENU=Applied Costs G/L Amount;
                                                              ENG=Applied Costs G/L Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1029;   ;Applied Sales G/L Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                  Reverse=CONST(No),
                                                                                                                  Job Complete=CONST(No),
                                                                                                                  Type=FILTER(Applied Sales)));
                                                   CaptionML=[ENU=Applied Sales G/L Amount;
                                                              ENG=Applied Sales G/L Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1030;   ;Calc. Recog. Sales Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Task"."Recognized Sales Amount" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=[ENU=Calc. Recog. Sales Amount;
                                                              ENG=Calc. Recog. Sales Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1031;   ;Calc. Recog. Costs Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Task"."Recognized Costs Amount" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=[ENU=Calc. Recog. Costs Amount;
                                                              ENG=Calc. Recog. Costs Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1032;   ;Calc. Recog. Sales G/L Amount;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Task"."Recognized Sales G/L Amount" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=[ENU=Calc. Recog. Sales G/L Amount;
                                                              ENG=Calc. Recog. Sales G/L Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1033;   ;Calc. Recog. Costs G/L Amount;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Task"."Recognized Costs G/L Amount" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=[ENU=Calc. Recog. Costs G/L Amount;
                                                              ENG=Calc. Recog. Costs G/L Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1034;   ;WIP Completion Posted;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Job WIP G/L Entry" WHERE (Job No.=FIELD(No.),
                                                                                                Job Complete=CONST(Yes)));
                                                   CaptionML=[ENU=WIP Completion Posted;
                                                              ENG=WIP Completion Posted] }
    { 1035;   ;Over Budget         ;Boolean       ;CaptionML=[ENU=Over Budget;
                                                              ENG=Over Budget] }
    { 1036;   ;Project Manager     ;Code50        ;TableRelation="User Setup";
                                                   CaptionML=[ENU=Project Manager;
                                                              ENG=Project Manager] }
    { 50000;  ;Approval Status     ;Option        ;DataClassification=ToBeClassified;
                                                   OptionString=Open,Pending Approval,Released }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Description                       }
    {    ;Bill-to Customer No.                     }
    {    ;Description                              }
    {    ;Status                                   }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Description,Bill-to Customer No.,Starting Date,Status }
    { 2   ;Brick               ;No.,Description,Bill-to Customer No.,Starting Date,Status,Image }
  }
  CODE
  {
    VAR
      AssociatedEntriesExistErr@1000 : TextConst '@@@="%1 = Name of field used in the error; %2 = The name of the Job table";ENU=You cannot change %1 because one or more entries are associated with this %2.;ENG=You cannot change %1 because one or more entries are associated with this %2.';
      JobsSetup@1004 : Record 315;
      PostCode@1015 : Record 225;
      Job@1014 : Record 167;
      Cust@1006 : Record 18;
      Cont@1005 : Record 5050;
      ContBusinessRelation@1001 : Record 5054;
      NoSeriesMgt@1010 : Codeunit 396;
      DimMgt@1012 : Codeunit 408;
      StatusChangeQst@1017 : TextConst 'ENU=This will delete any unposted WIP entries for this job and allow you to reverse the completion postings for this job.\\Do you wish to continue?;ENG=This will delete any unposted WIP entries for this job and allow you to reverse the completion postings for this job.\\Do you wish to continue?';
      ContactBusRelDiffCompErr@1019 : TextConst '@@@="%1 = The contact number; %2 = The contact''s name; %3 = The Bill-To Customer Number associated with this job";ENU=Contact %1 %2 is related to a different company than customer %3.;ENG=Contact %1 %2 is related to a different company than customer %3.';
      ContactBusRelErr@1018 : TextConst '@@@="%1 = The contact number; %2 = The contact''s name; %3 = The Bill-To Customer Number associated with this job";ENU=Contact %1 %2 is not related to customer %3.;ENG=Contact %1 %2 is not related to customer %3.';
      ContactBusRelMissingErr@1009 : TextConst '@@@="%1 = The contact number; %2 = The contact''s name";ENU=Contact %1 %2 is not related to a customer.;ENG=Contact %1 %2 is not related to a customer.';
      TestBlockedErr@1002 : TextConst '@@@="%1 = The Job table name; %2 = The Job number; %3 = The value of the Blocked field";ENU=%1 %2 must not be blocked with type %3.;ENG=%1 %2 must not be blocked with type %3.';
      ReverseCompletionEntriesMsg@1008 : TextConst '@@@="%1 = The name of the Job Post WIP to G/L report";ENU=You must run the %1 function to reverse the completion entries that have already been posted for this job.;ENG=You must run the %1 function to reverse the completion entries that have already been posted for this job.';
      MoveEntries@1003 : Codeunit 361;
      OnlineMapMsg@1007 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;ENG=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      CheckDateErr@1023 : TextConst '@@@="%1 = The job''s starting date; %2 = The job''s ending date";ENU=%1 must be equal to or earlier than %2.;ENG=%1 must be equal to or earlier than %2.';
      BlockedCustErr@1011 : TextConst '@@@="%1 = The Bill-to Customer No. field name; %2 = The job''s Bill-to Customer No. value; %3 = The Customer table name; %4 = The Blocked field name; %5 = The job''s customer''s Blocked value";ENU=You cannot set %1 to %2, as this %3 has set %4 to %5.;ENG=You cannot set %1 to %2, as this %3 has set %4 to %5.';
      ApplyUsageLinkErr@1013 : TextConst '@@@="%1 = The name of the Job table";ENU=A usage link cannot be enabled for the entire %1 because usage without the usage link already has been posted.;ENG=A usage link cannot be enabled for the entire %1 because usage without the usage link already has been posted.';
      WIPMethodQst@1016 : TextConst '@@@="%1 = The WIP Method field name; %2 = The name of the Job Task table; %3 = The current job task''s WIP Total type";ENU=Do you want to set the %1 on every %2 of type %3?;ENG=Do you want to set the %1 on every %2 of type %3?';
      WIPAlreadyPostedErr@1020 : TextConst '@@@="%1 = The name of the WIP Posting Method field; %2 = The previous WIP Posting Method value of this job";ENU=%1 must be %2 because job WIP general ledger entries already were posted with this setting.;ENG=%1 must be %2 because job WIP general ledger entries already were posted with this setting.';
      WIPAlreadyAssociatedErr@1021 : TextConst '@@@="%1 = The name of the WIP Posting Method field";ENU=%1 cannot be modified because the job has associated job WIP entries.;ENG=%1 cannot be modified because the job has associated job WIP entries.';
      WIPPostMethodErr@1024 : TextConst '@@@="%1 = The name of the WIP Posting Method field; %2 = The name of the WIP Method field; %3 = The field caption represented by the value of this job''s WIP method";ENU=The selected %1 requires the %2 to have %3 enabled.;ENG=The selected %1 requires the %2 to have %3 enabled.';
      EndingDateChangedMsg@1025 : TextConst '@@@="%1 = The name of the Ending Date field; %2 = This job''s Ending Date value";ENU=%1 is set to %2.;ENG=%1 is set to %2.';
      UpdateJobTaskDimQst@1026 : TextConst 'ENU=You have changed a dimension.\\Do you want to update the lines?;ENG=You have changed a dimension.\\Do you want to update the lines?';
      DocTxt@1027 : TextConst 'ENU=Job Quote;ENG=Job Quote';
      RunWIPFunctionsQst@1028 : TextConst '@@@="%1 = The name of the Job Calculate WIP report";ENU=You must run the %1 function to create completion entries for this job. \Do you want to run this function now?;ENG=You must run the %1 function to create completion entries for this job. \Do you want to run this function now?';

    PROCEDURE AssistEdit@2(OldJob@1000 : Record 167) : Boolean;
    BEGIN
      WITH Job DO BEGIN
        Job := Rec;
        JobsSetup.GET;
        JobsSetup.TESTFIELD("Job Nos.");
        IF NoSeriesMgt.SelectSeries(JobsSetup."Job Nos.",OldJob."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := Job;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::Job,"No.",FieldNumber,ShortcutDimCode);
      UpdateJobTaskDimension(FieldNumber,ShortcutDimCode);
      MODIFY;
    END;

    LOCAL PROCEDURE UpdateBillToCont@27(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1001 : Record 18;
    BEGIN
      IF Cust.GET(CustomerNo) THEN BEGIN
        IF Cust."Primary Contact No." <> '' THEN
          "Bill-to Contact No." := Cust."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
          ContBusRel.SETRANGE("No.","Bill-to Customer No.");
          IF ContBusRel.FINDFIRST THEN
            "Bill-to Contact No." := ContBusRel."Contact No.";
        END;
        "Bill-to Contact" := Cust.Contact;
      END;
    END;

    LOCAL PROCEDURE JobLedgEntryExist@5() : Boolean;
    VAR
      JobLedgEntry@1000 : Record 169;
    BEGIN
      CLEAR(JobLedgEntry);
      JobLedgEntry.SETCURRENTKEY("Job No.");
      JobLedgEntry.SETRANGE("Job No.","No.");
      EXIT(JobLedgEntry.FINDFIRST);
    END;

    LOCAL PROCEDURE JobPlanningLineExist@3() : Boolean;
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      JobPlanningLine.INIT;
      JobPlanningLine.SETRANGE("Job No.","No.");
      EXIT(JobPlanningLine.FINDFIRST);
    END;

    LOCAL PROCEDURE UpdateBillToCust@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Cust@1004 : Record 18;
      Cont@1003 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Bill-to Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Bill-to Contact" := Cont.Name
        ELSE
          IF Cust.GET("Bill-to Customer No.") THEN
            "Bill-to Contact" := Cust.Contact
          ELSE
            "Bill-to Contact" := '';
      END ELSE BEGIN
        "Bill-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF "Bill-to Customer No." = '' THEN
          VALIDATE("Bill-to Customer No.",ContBusinessRelation."No.")
        ELSE
          IF "Bill-to Customer No." <> ContBusinessRelation."No." THEN
            ERROR(ContactBusRelErr,Cont."No.",Cont.Name,"Bill-to Customer No.");
      END ELSE
        ERROR(ContactBusRelMissingErr,Cont."No.",Cont.Name);
    END;

    LOCAL PROCEDURE UpdateCust@4();
    BEGIN
      IF "Bill-to Customer No." <> '' THEN BEGIN
        Cust.GET("Bill-to Customer No.");
        Cust.TESTFIELD("Customer Posting Group");
        Cust.TESTFIELD("Bill-to Customer No.",'');
        IF Cust."Privacy Blocked" THEN
          ERROR(Cust.GetPrivacyBlockedGenericErrorText(Cust));
        IF Cust.Blocked = Cust.Blocked::All THEN
          ERROR(
            BlockedCustErr,
            FIELDCAPTION("Bill-to Customer No."),
            "Bill-to Customer No.",
            Cust.TABLECAPTION,
            FIELDCAPTION(Blocked),
            Cust.Blocked);
        "Bill-to Name" := Cust.Name;
        "Bill-to Name 2" := Cust."Name 2";
        "Bill-to Address" := Cust.Address;
        "Bill-to Address 2" := Cust."Address 2";
        "Bill-to City" := Cust.City;
        "Bill-to Post Code" := Cust."Post Code";
        "Bill-to Country/Region Code" := Cust."Country/Region Code";
        "Invoice Currency Code" := Cust."Currency Code";
        IF "Invoice Currency Code" <> '' THEN
          VALIDATE("Currency Code",'');
        "Customer Disc. Group" := Cust."Customer Disc. Group";
        "Customer Price Group" := Cust."Customer Price Group";
        "Language Code" := Cust."Language Code";
        "Bill-to County" := Cust.County;
        Reserve := Cust.Reserve;
        UpdateBillToCont("Bill-to Customer No.");
      END ELSE BEGIN
        "Bill-to Name" := '';
        "Bill-to Name 2" := '';
        "Bill-to Address" := '';
        "Bill-to Address 2" := '';
        "Bill-to City" := '';
        "Bill-to Post Code" := '';
        "Bill-to Country/Region Code" := '';
        "Invoice Currency Code" := '';
        "Customer Disc. Group" := '';
        "Customer Price Group" := '';
        "Language Code" := '';
        "Bill-to County" := '';
        VALIDATE("Bill-to Contact No.",'');
      END;
    END;

    PROCEDURE InitWIPFields@1();
    BEGIN
      "WIP Posting Date" := 0D;
      "WIP G/L Posting Date" := 0D;
    END;

    PROCEDURE TestBlocked@6();
    BEGIN
      IF Blocked = Blocked::" " THEN
        EXIT;
      ERROR(TestBlockedErr,TABLECAPTION,"No.",Blocked);
    END;

    PROCEDURE CurrencyUpdatePlanningLines@10();
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      JobPlanningLine.SETRANGE("Job No.","No.");
      JobPlanningLine.SETAUTOCALCFIELDS("Qty. Transferred to Invoice");
      JobPlanningLine.LOCKTABLE;
      IF JobPlanningLine.FIND('-') THEN
        REPEAT
          IF JobPlanningLine."Qty. Transferred to Invoice" <> 0 THEN
            ERROR(AssociatedEntriesExistErr,FIELDCAPTION("Currency Code"),TABLECAPTION);
          JobPlanningLine.VALIDATE("Currency Code","Currency Code");
          JobPlanningLine.VALIDATE("Currency Date");
          JobPlanningLine.MODIFY;
        UNTIL JobPlanningLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CurrencyUpdatePurchLines@17();
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      MODIFY;
      PurchLine.SETRANGE("Job No.","No.");
      IF PurchLine.FINDSET THEN
        REPEAT
          PurchLine.VALIDATE("Job Currency Code","Currency Code");
          PurchLine.VALIDATE("Job Task No.");
          PurchLine.MODIFY;
        UNTIL PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ChangeJobCompletionStatus@7();
    VAR
      JobCalcWIP@1001 : Codeunit 1000;
    BEGIN
      IF Complete THEN BEGIN
        VALIDATE("Ending Date",CalcEndingDate);
        MESSAGE(EndingDateChangedMsg,FIELDCAPTION("Ending Date"),"Ending Date");
      END ELSE BEGIN
        JobCalcWIP.ReOpenJob("No.");
        "WIP Posting Date" := 0D;
        MESSAGE(ReverseCompletionEntriesMsg,GetReportCaption(REPORT::"Job Post WIP to G/L"));
      END;
    END;

    PROCEDURE DisplayMap@8();
    VAR
      OnlineMapSetup@1001 : Record 800;
      OnlineMapManagement@1000 : Codeunit 802;
    BEGIN
      IF OnlineMapSetup.FINDFIRST THEN
        OnlineMapManagement.MakeSelection(DATABASE::Job,GETPOSITION)
      ELSE
        MESSAGE(OnlineMapMsg);
    END;

    PROCEDURE GetQuantityAvailable@9(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];VariantCode@1002 : Code[10];InEntryType@1004 : 'Usage,Sale,Both';Direction@1005 : 'Positive,Negative,Both') : Decimal;
    VAR
      JobLedgEntry@1003 : Record 169;
    BEGIN
      CLEAR(JobLedgEntry);
      JobLedgEntry.SETCURRENTKEY("Job No.","Entry Type",Type,"No.");
      JobLedgEntry.SETRANGE("Job No.","No.");
      IF NOT (InEntryType = InEntryType::Both) THEN
        JobLedgEntry.SETRANGE("Entry Type",InEntryType);
      JobLedgEntry.SETRANGE(Type,JobLedgEntry.Type::Item);
      JobLedgEntry.SETRANGE("No.",ItemNo);
      CASE Direction OF
        Direction::Both:
          BEGIN
            JobLedgEntry.SETRANGE("Location Code",LocationCode);
            JobLedgEntry.SETRANGE("Variant Code",VariantCode);
          END;
        Direction::Positive:
          JobLedgEntry.SETFILTER("Quantity (Base)",'>0');
        Direction::Negative:
          JobLedgEntry.SETFILTER("Quantity (Base)",'<0');
      END;
      JobLedgEntry.CALCSUMS("Quantity (Base)");
      EXIT(JobLedgEntry."Quantity (Base)");
    END;

    LOCAL PROCEDURE CheckDate@30();
    BEGIN
      IF ("Starting Date" > "Ending Date") AND ("Ending Date" <> 0D) THEN
        ERROR(CheckDateErr,FIELDCAPTION("Starting Date"),FIELDCAPTION("Ending Date"));
    END;

    PROCEDURE CalcAccWIPCostsAmount@15() : Decimal;
    BEGIN
      EXIT("Total WIP Cost Amount" + "Applied Costs G/L Amount");
    END;

    PROCEDURE CalcAccWIPSalesAmount@16() : Decimal;
    BEGIN
      EXIT("Total WIP Sales Amount" - "Applied Sales G/L Amount");
    END;

    PROCEDURE CalcRecognizedProfitAmount@11() : Decimal;
    BEGIN
      EXIT("Calc. Recog. Sales Amount" - "Calc. Recog. Costs Amount");
    END;

    PROCEDURE CalcRecognizedProfitPercentage@12() : Decimal;
    BEGIN
      IF "Calc. Recog. Sales Amount" <> 0 THEN
        EXIT((CalcRecognizedProfitAmount / "Calc. Recog. Sales Amount") * 100);
      EXIT(0);
    END;

    PROCEDURE CalcRecognizedProfitGLAmount@14() : Decimal;
    BEGIN
      EXIT("Calc. Recog. Sales G/L Amount" - "Calc. Recog. Costs G/L Amount");
    END;

    PROCEDURE CalcRecognProfitGLPercentage@13() : Decimal;
    BEGIN
      IF "Calc. Recog. Sales G/L Amount" <> 0 THEN
        EXIT((CalcRecognizedProfitGLAmount / "Calc. Recog. Sales G/L Amount") * 100);
      EXIT(0);
    END;

    PROCEDURE PercentCompleted@19() : Decimal;
    VAR
      JobCalcStatistics@1000 : Codeunit 1008;
      CL@1001 : ARRAY [16] OF Decimal;
    BEGIN
      JobCalcStatistics.JobCalculateCommonFilters(Rec);
      JobCalcStatistics.CalculateAmounts;
      JobCalcStatistics.GetLCYCostAmounts(CL);
      IF CL[4] <> 0 THEN
        EXIT((CL[8] / CL[4]) * 100);
      EXIT(0);
    END;

    PROCEDURE PercentInvoiced@20() : Decimal;
    VAR
      JobCalcStatistics@1000 : Codeunit 1008;
      PL@1002 : ARRAY [16] OF Decimal;
    BEGIN
      JobCalcStatistics.JobCalculateCommonFilters(Rec);
      JobCalcStatistics.CalculateAmounts;
      JobCalcStatistics.GetLCYPriceAmounts(PL);
      IF PL[12] <> 0 THEN
        EXIT((PL[16] / PL[12]) * 100);
      EXIT(0);
    END;

    PROCEDURE PercentOverdue@18() : Decimal;
    VAR
      JobPlanningLine@1000 : Record 1003;
      QtyOverdue@1001 : Decimal;
      QtyTotal@1003 : Decimal;
    BEGIN
      JobPlanningLine.SETRANGE("Job No.","No.");
      QtyTotal := JobPlanningLine.COUNT;
      IF QtyTotal = 0 THEN
        EXIT(0);
      JobPlanningLine.SETFILTER("Planning Date",'<%1',WORKDATE);
      JobPlanningLine.SETFILTER("Remaining Qty.",'>%1',0);
      QtyOverdue := JobPlanningLine.COUNT;
      EXIT((QtyOverdue / QtyTotal) * 100);
    END;

    LOCAL PROCEDURE UpdateJobNoInReservationEntries@21();
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      ReservEntry.SETFILTER("Source Type",'%1|%2',DATABASE::"Job Planning Line",DATABASE::"Job Journal Line");
      ReservEntry.SETRANGE("Source ID",xRec."No.");
      ReservEntry.MODIFYALL("Source ID","No.",TRUE);
    END;

    LOCAL PROCEDURE UpdateJobTaskDimension@22(FieldNumber@1001 : Integer;ShortcutDimCode@1000 : Code[20]);
    VAR
      JobTask@1002 : Record 1001;
    BEGIN
      IF GUIALLOWED THEN
        IF NOT CONFIRM(UpdateJobTaskDimQst,FALSE) THEN
          EXIT;

      JobTask.SETRANGE("Job No.","No.");
      IF JobTask.FINDSET(TRUE) THEN
        REPEAT
          CASE FieldNumber OF
            1:
              JobTask.VALIDATE("Global Dimension 1 Code",ShortcutDimCode);
            2:
              JobTask.VALIDATE("Global Dimension 2 Code",ShortcutDimCode);
          END;
          JobTask.MODIFY(TRUE);
        UNTIL JobTask.NEXT = 0;
    END;

    PROCEDURE UpdateOverBudgetValue@23(JobNo@1002 : Code[20];Usage@1001 : Boolean;Cost@1007 : Decimal);
    VAR
      JobLedgerEntry@1003 : Record 169;
      JobPlanningLine@1004 : Record 1003;
      UsageCost@1005 : Decimal;
      ScheduleCost@1006 : Decimal;
    BEGIN
      IF "No." <> JobNo THEN
        IF NOT GET(JobNo) THEN
          EXIT;

      JobLedgerEntry.SETRANGE("Job No.",JobNo);
      JobLedgerEntry.CALCSUMS("Total Cost (LCY)");
      IF JobLedgerEntry."Total Cost (LCY)" = 0 THEN
        EXIT;

      UsageCost := JobLedgerEntry."Total Cost (LCY)";

      JobPlanningLine.SETRANGE("Job No.",JobNo);
      JobPlanningLine.SETRANGE("Schedule Line",TRUE);
      JobPlanningLine.CALCSUMS("Total Cost (LCY)");
      ScheduleCost := JobPlanningLine."Total Cost (LCY)";

      IF Usage THEN
        UsageCost += Cost
      ELSE
        ScheduleCost += Cost;
      "Over Budget" := UsageCost > ScheduleCost;
      MODIFY;
    END;

    PROCEDURE IsJobSimplificationAvailable@24() : Boolean;
    BEGIN
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddToMyJobs@25(ProjectManager@1000 : Code[50]);
    VAR
      MyJob@1001 : Record 9154;
    BEGIN
      IF Status = Status::Open THEN BEGIN
        MyJob.INIT;
        MyJob."User ID" := ProjectManager;
        MyJob."Job No." := "No.";
        MyJob.Description := Description;
        MyJob.Status := Status;
        MyJob."Bill-to Name" := "Bill-to Name";
        MyJob."Percent Completed" := PercentCompleted;
        MyJob."Percent Invoiced" := PercentInvoiced;
        MyJob."Exclude from Business Chart" := FALSE;
        MyJob.INSERT;
      END;
    END;

    LOCAL PROCEDURE RemoveFromMyJobs@28();
    VAR
      MyJob@1001 : Record 9154;
    BEGIN
      MyJob.SETFILTER("Job No.",'=%1',"No.");
      IF MyJob.FINDSET THEN
        REPEAT
          MyJob.DELETE;
        UNTIL MyJob.NEXT = 0;
    END;

    PROCEDURE SendRecords@34();
    VAR
      DocumentSendingProfile@1001 : Record 60;
      DummyReportSelections@1000 : Record 77;
    BEGIN
      DocumentSendingProfile.SendCustomerRecords(
        DummyReportSelections.Usage::JQ,Rec,DocTxt,"Bill-to Customer No.","No.",
        FIELDNO("Bill-to Customer No."),FIELDNO("No."));
    END;

    PROCEDURE SendProfile@33(VAR DocumentSendingProfile@1000 : Record 60);
    VAR
      ReportSelections@1003 : Record 77;
    BEGIN
      DocumentSendingProfile.Send(
        ReportSelections.Usage::JQ,Rec,"No.","Bill-to Customer No.",
        DocTxt,FIELDNO("Bill-to Customer No."),FIELDNO("No."));
    END;

    PROCEDURE PrintRecords@32(ShowRequestForm@1000 : Boolean);
    VAR
      DocumentSendingProfile@1002 : Record 60;
      ReportSelections@1001 : Record 77;
    BEGIN
      DocumentSendingProfile.TrySendToPrinter(
        ReportSelections.Usage::JQ,Rec,FIELDNO("Bill-to Customer No."),ShowRequestForm);
    END;

    PROCEDURE EmailRecords@31(ShowDialog@1000 : Boolean);
    VAR
      DocumentSendingProfile@1003 : Record 60;
      ReportSelections@1001 : Record 77;
    BEGIN
      DocumentSendingProfile.TrySendToEMail(
        ReportSelections.Usage::JQ,Rec,FIELDNO("No."),DocTxt,FIELDNO("Bill-to Customer No."),ShowDialog);
    END;

    PROCEDURE RecalculateJobWIP@48();
    VAR
      Job@1000 : Record 167;
      Confirmed@1001 : Boolean;
      WIPQst@1002 : Text;
    BEGIN
      Job.GET("No.");
      IF Job."WIP Method" = '' THEN
        EXIT;

      Job.SETRECFILTER;
      WIPQst := STRSUBSTNO(RunWIPFunctionsQst,GetReportCaption(REPORT::"Job Calculate WIP"));
      Confirmed := CONFIRM(WIPQst);
      COMMIT;
      REPORT.RUNMODAL(REPORT::"Job Calculate WIP",NOT Confirmed,FALSE,Job);
    END;

    LOCAL PROCEDURE GetReportCaption@41(ReportID@1000 : Integer) : Text;
    VAR
      AllObjWithCaption@1001 : Record 2000000058;
    BEGIN
      AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Report,ReportID);
      EXIT(AllObjWithCaption."Object Caption");
    END;

    LOCAL PROCEDURE CalcEndingDate@35() EndingDate : Date;
    VAR
      JobLedgerEntry@1001 : Record 169;
    BEGIN
      IF "Ending Date" = 0D THEN
        EndingDate := WORKDATE
      ELSE
        EndingDate := "Ending Date";

      JobLedgerEntry.SETRANGE("Job No.","No.");
      JobLedgerEntry.SETCURRENTKEY("Job No.","Posting Date");
      IF JobLedgerEntry.FINDLAST THEN
        IF JobLedgerEntry."Posting Date" > EndingDate THEN
          EndingDate := JobLedgerEntry."Posting Date";

      IF "Ending Date" >= EndingDate THEN
        EndingDate := "Ending Date";
    END;

    BEGIN
    END.
  }
}

OBJECT Table 5405 Production Order
{
  OBJECT-PROPERTIES
  {
    Date=16/03/20;
    Time=11:42:44;
    Modified=Yes;
    Version List=NAVW111.00.00.20783,WF;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Description;
    OnInsert=VAR
               InvtAdjmtEntryOrder@1000 : Record 5896;
             BEGIN
               MfgSetup.GET;
               IF "No." = '' THEN BEGIN
                 TestNoSeries;
                 NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Due Date","No.","No. Series");
               END;

               IF Status = Status::Released THEN BEGIN
                 IF ProdOrder.GET(Status::Finished,"No.") THEN
                   ERROR(Text007,Status,TABLECAPTION,ProdOrder."No.",ProdOrder.Status);
                 InvtAdjmtEntryOrder.SETRANGE("Order Type",InvtAdjmtEntryOrder."Order Type"::Production);
                 InvtAdjmtEntryOrder.SETRANGE("Order No.","No.");
                 IF NOT InvtAdjmtEntryOrder.ISEMPTY THEN
                   ERROR(Text007,Status,TABLECAPTION,ProdOrder."No.",InvtAdjmtEntryOrder.TABLECAPTION);
               END;

               InitRecord;

               "Starting Time" := MfgSetup."Normal Starting Time";
               "Ending Time" := MfgSetup."Normal Ending Time";
               "Creation Date" := TODAY;
               UpdateDatetime;
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
               IF Status = Status::Finished THEN
                 ERROR(Text006);
             END;

    OnDelete=VAR
               ItemLedgEntry@1000 : Record 32;
               CapLedgEntry@1001 : Record 5832;
               PurchLine@1002 : Record 39;
             BEGIN
               IF Status = Status::Released THEN BEGIN
                 ItemLedgEntry.SETRANGE("Order Type",ItemLedgEntry."Order Type"::Production);
                 ItemLedgEntry.SETRANGE("Order No.","No.");
                 IF NOT ItemLedgEntry.ISEMPTY THEN
                   ERROR(
                     Text000,
                     Status,TABLECAPTION,"No.",ItemLedgEntry.TABLECAPTION);

                 CapLedgEntry.SETRANGE("Order Type",CapLedgEntry."Order Type"::Production);
                 CapLedgEntry.SETRANGE("Order No.","No.");
                 IF NOT CapLedgEntry.ISEMPTY THEN
                   ERROR(
                     Text000,
                     Status,TABLECAPTION,"No.",CapLedgEntry.TABLECAPTION);
               END;

               IF Status IN [Status::Released,Status::Finished] THEN BEGIN
                 PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                 PurchLine.SETRANGE(Type,PurchLine.Type::Item);
                 PurchLine.SETRANGE("Prod. Order No.","No.");
                 IF NOT PurchLine.ISEMPTY THEN
                   ERROR(
                     Text000,
                     Status,TABLECAPTION,"No.",PurchLine.TABLECAPTION);
               END;

               IF Status = Status::Finished THEN
                 DeleteFnshdProdOrderRelations
               ELSE
                 DeleteRelations;
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=[ENU=Production Order;
               ENG=Production Order];
    LookupPageID=Page99000815;
    DrillDownPageID=Page99000815;
  }
  FIELDS
  {
    { 1   ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENG=Status];
                                                   OptionCaptionML=[ENU=Simulated,Planned,Firm Planned,Released,Finished;
                                                                    ENG=Simulated,Planned,Firm Planned,Released,Finished];
                                                   OptionString=Simulated,Planned,Firm Planned,Released,Finished }
    { 2   ;   ;No.                 ;Code20        ;TableRelation="Production Order".No. WHERE (Status=FIELD(Status));
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  MfgSetup.GET;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   AltSearchField=Search Description;
                                                   CaptionML=[ENU=No.;
                                                              ENG=No.] }
    { 3   ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                "Search Description" := Description;
                                                              END;

                                                   CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 4   ;   ;Search Description  ;Code50        ;CaptionML=[ENU=Search Description;
                                                              ENG=Search Description] }
    { 5   ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENG=Description 2] }
    { 6   ;   ;Creation Date       ;Date          ;CaptionML=[ENU=Creation Date;
                                                              ENG=Creation Date];
                                                   Editable=No }
    { 7   ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ENG=Last Date Modified];
                                                   Editable=No }
    { 9   ;   ;Source Type         ;Option        ;OnValidate=BEGIN
                                                                IF "Source Type" <> xRec."Source Type" THEN
                                                                  CheckProdOrderStatus(FIELDCAPTION("Source Type"));
                                                              END;

                                                   CaptionML=[ENU=Source Type;
                                                              ENG=Source Type];
                                                   OptionCaptionML=[ENU=Item,Family,Sales Header;
                                                                    ENG=Item,Family,Sales Header];
                                                   OptionString=Item,Family,Sales Header }
    { 10  ;   ;Source No.          ;Code20        ;TableRelation=IF (Source Type=CONST(Item)) Item WHERE (Type=CONST(Inventory))
                                                                 ELSE IF (Source Type=CONST(Family)) Family
                                                                 ELSE IF (Status=CONST(Simulated),
                                                                          Source Type=CONST(Sales Header)) "Sales Header".No. WHERE (Document Type=CONST(Quote))
                                                                          ELSE IF (Status=FILTER(Planned..),
                                                                                   Source Type=CONST(Sales Header)) "Sales Header".No. WHERE (Document Type=CONST(Order));
                                                   OnValidate=VAR
                                                                Item@1000 : Record 27;
                                                                Family@1001 : Record 99000773;
                                                                SalesHeader@1002 : Record 36;
                                                              BEGIN
                                                                IF "Source No." <> xRec."Source No." THEN
                                                                  CheckProdOrderStatus(FIELDCAPTION("Source No."));

                                                                IF "Source No." = '' THEN
                                                                  EXIT;

                                                                CASE "Source Type" OF
                                                                  "Source Type"::Item:
                                                                    BEGIN
                                                                      Item.GET("Source No.");
                                                                      Item.TESTFIELD(Blocked,FALSE);
                                                                      Description := Item.Description;
                                                                      "Description 2" := Item."Description 2";
                                                                      "Routing No." := Item."Routing No.";
                                                                      "Inventory Posting Group" := Item."Inventory Posting Group";
                                                                      "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
                                                                      "Unit Cost" := Item."Unit Cost";
                                                                      CreateDim(DATABASE::Item,"Source No.");
                                                                    END;
                                                                  "Source Type"::Family:
                                                                    BEGIN
                                                                      Family.GET("Source No.");
                                                                      Description := Family.Description;
                                                                      "Description 2" := Family."Description 2";
                                                                      "Routing No." := Family."Routing No.";
                                                                      "Inventory Posting Group" := '';
                                                                      "Gen. Prod. Posting Group" := '';
                                                                      "Unit Cost" := 0;
                                                                    END;
                                                                  "Source Type"::"Sales Header":
                                                                    BEGIN
                                                                      IF Status = Status::Simulated THEN
                                                                        SalesHeader.GET(SalesHeader."Document Type"::Quote,"Source No.")
                                                                      ELSE
                                                                        SalesHeader.GET(SalesHeader."Document Type"::Order,"Source No.");
                                                                      Description := SalesHeader."Ship-to Name";
                                                                      "Description 2" := SalesHeader."Ship-to Name 2";
                                                                      "Routing No." := '';
                                                                      "Inventory Posting Group" := '';
                                                                      "Gen. Prod. Posting Group" := '';
                                                                      "Gen. Bus. Posting Group" := SalesHeader."Gen. Bus. Posting Group";
                                                                      "Unit Cost" := 0;
                                                                      "Location Code" := SalesHeader."Location Code";
                                                                      "Due Date" := SalesHeader."Shipment Date";
                                                                      "Ending Date" := SalesHeader."Shipment Date";
                                                                      "Dimension Set ID" := SalesHeader."Dimension Set ID";
                                                                      "Shortcut Dimension 1 Code" := SalesHeader."Shortcut Dimension 1 Code";
                                                                      "Shortcut Dimension 2 Code" := SalesHeader."Shortcut Dimension 2 Code";
                                                                    END;
                                                                END;
                                                                VALIDATE(Description);
                                                                InitRecord;
                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=[ENU=Source No.;
                                                              ENG=Source No.] }
    { 11  ;   ;Routing No.         ;Code20        ;TableRelation="Routing Header";
                                                   CaptionML=[ENU=Routing No.;
                                                              ENG=Routing No.] }
    { 15  ;   ;Inventory Posting Group;Code20     ;TableRelation="Inventory Posting Group";
                                                   CaptionML=[ENU=Inventory Posting Group;
                                                              ENG=Inventory Posting Group] }
    { 16  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENG=Gen. Prod. Posting Group] }
    { 17  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENG=Gen. Bus. Posting Group] }
    { 19  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Prod. Order Comment Line" WHERE (Status=FIELD(Status),
                                                                                                       Prod. Order No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ENG=Comment];
                                                   Editable=No }
    { 20  ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                ProdOrderLine.SETCURRENTKEY(Status,"Prod. Order No.","Planning Level Code");
                                                                ProdOrderLine.ASCENDING(FALSE);
                                                                ProdOrderLine.SETRANGE(Status,Status);
                                                                ProdOrderLine.SETRANGE("Prod. Order No.","No.");
                                                                ProdOrderLine.SETFILTER("Item No.",'<>%1','');
                                                                ProdOrderLine.SETFILTER("Planning Level Code",'>%1',0);
                                                                IF ProdOrderLine.FIND('-') THEN BEGIN
                                                                  "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time");
                                                                  MODIFY;
                                                                  MultiLevelMessage;
                                                                  EXIT;
                                                                END;
                                                                "Due Date" := 0D;
                                                                ProdOrderLine.SETRANGE("Planning Level Code");
                                                                IF ProdOrderLine.FIND('-') THEN
                                                                  REPEAT
                                                                    ProdOrderLine."Starting Time" := "Starting Time";
                                                                    ProdOrderLine."Starting Date" := "Starting Date";
                                                                    ProdOrderLine.MODIFY;
                                                                    CalcProdOrder.SetParameter(TRUE);
                                                                    CalcProdOrder.Recalculate(ProdOrderLine,0,TRUE);
                                                                    IF ProdOrderLine."Planning Level Code" > 0 THEN
                                                                      ProdOrderLine."Due Date" := ProdOrderLine."Ending Date"
                                                                    ELSE
                                                                      ProdOrderLine."Due Date" :=
                                                                        LeadTimeMgt.PlannedDueDate(
                                                                          ProdOrderLine."Item No.",
                                                                          ProdOrderLine."Location Code",
                                                                          ProdOrderLine."Variant Code",
                                                                          ProdOrderLine."Ending Date",
                                                                          '',
                                                                          2);

                                                                    IF "Due Date" = 0D THEN
                                                                      "Due Date" := ProdOrderLine."Due Date";
                                                                    "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time");
                                                                    ProdOrderLine.MODIFY(TRUE);
                                                                    ProdOrderLine.CheckEndingDate(CurrFieldNo <> 0);
                                                                  UNTIL ProdOrderLine.NEXT = 0
                                                                ELSE BEGIN
                                                                  "Ending Date" := "Starting Date";
                                                                  "Ending Time" := "Starting Time";
                                                                END;
                                                                AdjustStartEndingDate;
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Starting Time;
                                                              ENG=Starting Time] }
    { 21  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Starting Time");
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              ENG=Starting Date] }
    { 22  ;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                ProdOrderLine.SETCURRENTKEY(Status,"Prod. Order No.","Planning Level Code");
                                                                ProdOrderLine.ASCENDING(TRUE);
                                                                ProdOrderLine.SETRANGE(Status,Status);
                                                                ProdOrderLine.SETRANGE("Prod. Order No.","No.");
                                                                ProdOrderLine.SETFILTER("Item No.",'<>%1','');
                                                                ProdOrderLine.SETFILTER("Planning Level Code",'>%1',0);
                                                                IF ProdOrderLine.FIND('-') THEN BEGIN
                                                                  "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
                                                                  MODIFY;
                                                                  MultiLevelMessage;
                                                                  EXIT;
                                                                END;
                                                                "Due Date" := 0D;
                                                                ProdOrderLine.SETRANGE("Planning Level Code");
                                                                IF ProdOrderLine.FIND('-') THEN
                                                                  REPEAT
                                                                    ProdOrderLine."Ending Time" := "Ending Time";
                                                                    ProdOrderLine."Ending Date" := "Ending Date";
                                                                    ProdOrderLine.MODIFY;
                                                                    CalcProdOrder.SetParameter(TRUE);
                                                                    CalcProdOrder.Recalculate(ProdOrderLine,1,TRUE);
                                                                    IF ProdOrderLine."Planning Level Code" > 0 THEN
                                                                      ProdOrderLine."Due Date" := ProdOrderLine."Ending Date"
                                                                    ELSE
                                                                      ProdOrderLine."Due Date" :=
                                                                        LeadTimeMgt.PlannedDueDate(
                                                                          ProdOrderLine."Item No.",
                                                                          ProdOrderLine."Location Code",
                                                                          ProdOrderLine."Variant Code",
                                                                          ProdOrderLine."Ending Date",
                                                                          '',
                                                                          2);
                                                                    IF "Due Date" = 0D THEN
                                                                      "Due Date" := ProdOrderLine."Due Date";
                                                                    "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
                                                                    ProdOrderLine.MODIFY(TRUE);
                                                                    ProdOrderLine.CheckEndingDate(CurrFieldNo <> 0);
                                                                  UNTIL ProdOrderLine.NEXT = 0
                                                                ELSE BEGIN
                                                                  "Starting Date" := "Ending Date";
                                                                  "Starting Time" := "Ending Time";
                                                                END;
                                                                AdjustStartEndingDate;
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Ending Time;
                                                              ENG=Ending Time] }
    { 23  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=[ENU=Ending Date;
                                                              ENG=Ending Date] }
    { 24  ;   ;Due Date            ;Date          ;OnValidate=BEGIN
                                                                IF "Due Date" = 0D THEN
                                                                  EXIT;
                                                                IF (CurrFieldNo = FIELDNO("Due Date")) OR
                                                                   (CurrFieldNo = FIELDNO("Location Code")) OR
                                                                   UpdateEndDate
                                                                THEN BEGIN
                                                                  ProdOrderLine.SETCURRENTKEY(Status,"Prod. Order No.","Planning Level Code");
                                                                  ProdOrderLine.ASCENDING(TRUE);
                                                                  ProdOrderLine.SETRANGE(Status,Status);
                                                                  ProdOrderLine.SETRANGE("Prod. Order No.","No.");
                                                                  ProdOrderLine.SETFILTER("Item No.",'<>%1','');
                                                                  ProdOrderLine.SETFILTER("Planning Level Code",'>%1',0);
                                                                  IF NOT ProdOrderLine.ISEMPTY THEN BEGIN
                                                                    ProdOrderLine.SETRANGE("Planning Level Code",0);
                                                                    IF "Source Type" = "Source Type"::Family THEN BEGIN
                                                                      UpdateEndingDate(ProdOrderLine);
                                                                    END ELSE BEGIN
                                                                      IF ProdOrderLine.FIND('-') THEN
                                                                        "Ending Date" :=
                                                                          LeadTimeMgt.PlannedEndingDate(ProdOrderLine."Item No.","Location Code",'',"Due Date",'',2)
                                                                      ELSE
                                                                        "Ending Date" := "Due Date";
                                                                      "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
                                                                      MultiLevelMessage;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    ProdOrderLine.SETRANGE("Planning Level Code");
                                                                    IF NOT ProdOrderLine.ISEMPTY THEN
                                                                      UpdateEndingDate(ProdOrderLine)
                                                                    ELSE BEGIN
                                                                      IF "Source Type" = "Source Type"::Item THEN
                                                                        "Ending Date" :=
                                                                          LeadTimeMgt.PlannedEndingDate(
                                                                            "Source No.",
                                                                            "Location Code",
                                                                            '',
                                                                            "Due Date",
                                                                            '',
                                                                            2)
                                                                      ELSE
                                                                        "Ending Date" := "Due Date";
                                                                      "Starting Date" := "Ending Date";
                                                                      "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time");
                                                                      "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
                                                                    END;
                                                                    AdjustStartEndingDate;
                                                                    MODIFY;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Due Date;
                                                              ENG=Due Date] }
    { 25  ;   ;Finished Date       ;Date          ;CaptionML=[ENU=Finished Date;
                                                              ENG=Finished Date];
                                                   Editable=No }
    { 28  ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              ENG=Blocked] }
    { 30  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENG=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 31  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENG=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 32  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                GetDefaultBin;

                                                                VALIDATE("Due Date"); // Scheduling consider Calendar assigned to Location
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENG=Location Code] }
    { 33  ;   ;Bin Code            ;Code20        ;TableRelation=IF (Source Type=CONST(Item)) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                              Item Filter=FIELD(Source No.))
                                                                                                              ELSE IF (Source Type=FILTER(<>Item)) Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                IF "Bin Code" <> '' THEN
                                                                  WhseIntegrationMgt.CheckBinTypeCode(DATABASE::"Production Order",
                                                                    FIELDCAPTION("Bin Code"),
                                                                    "Location Code",
                                                                    "Bin Code",0);
                                                              END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ENG=Bin Code] }
    { 34  ;   ;Replan Ref. No.     ;Code20        ;CaptionML=[ENU=Replan Ref. No.;
                                                              ENG=Replan Ref. No.];
                                                   Editable=No }
    { 35  ;   ;Replan Ref. Status  ;Option        ;CaptionML=[ENU=Replan Ref. Status;
                                                              ENG=Replan Ref. Status];
                                                   OptionCaptionML=[ENU=Simulated,Planned,Firm Planned,Released,Finished;
                                                                    ENG=Simulated,Planned,Firm Planned,Released,Finished];
                                                   OptionString=Simulated,Planned,Firm Planned,Released,Finished;
                                                   Editable=No }
    { 38  ;   ;Low-Level Code      ;Integer       ;CaptionML=[ENU=Low-Level Code;
                                                              ENG=Low-Level Code];
                                                   Editable=No }
    { 40  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF "Source Type" = "Source Type"::Item THEN
                                                                  "Cost Amount" := ROUND(Quantity * "Unit Cost")
                                                                ELSE
                                                                  "Cost Amount" := 0;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ENG=Quantity];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 41  ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ENG=Unit Cost];
                                                   DecimalPlaces=2:5 }
    { 42  ;   ;Cost Amount         ;Decimal       ;CaptionML=[ENU=Cost Amount;
                                                              ENG=Cost Amount];
                                                   DecimalPlaces=2:2 }
    { 47  ;   ;Work Center Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Work Center";
                                                   CaptionML=[ENU=Work Center Filter;
                                                              ENG=Work Centre Filter] }
    { 48  ;   ;Capacity Type Filter;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Capacity Type Filter;
                                                              ENG=Capacity Type Filter];
                                                   OptionCaptionML=[ENU=Work Center,Machine Center;
                                                                    ENG=Work Centre,Machine Centre];
                                                   OptionString=Work Center,Machine Center }
    { 49  ;   ;Capacity No. Filter ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=IF (Capacity Type Filter=CONST(Work Center)) "Machine Center"
                                                                 ELSE IF (Capacity Type Filter=CONST(Machine Center)) "Work Center";
                                                   CaptionML=[ENU=Capacity No. Filter;
                                                              ENG=Capacity No. Filter] }
    { 50  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENG=Date Filter] }
    { 51  ;   ;Expected Operation Cost Amt.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Routing Line"."Expected Operation Cost Amt." WHERE (Status=FIELD(Status),
                                                                                                                                    Prod. Order No.=FIELD(No.)));
                                                   CaptionML=[ENU=Expected Operation Cost Amt.;
                                                              ENG=Expected Operation Cost Amt.];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 52  ;   ;Expected Component Cost Amt.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Component"."Cost Amount" WHERE (Status=FIELD(Status),
                                                                                                                Prod. Order No.=FIELD(No.),
                                                                                                                Due Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Expected Component Cost Amt.;
                                                              ENG=Expected Component Cost Amt.];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 55  ;   ;Actual Time Used    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Capacity Ledger Entry".Quantity WHERE (Order Type=CONST(Production),
                                                                                                           Order No.=FIELD(No.),
                                                                                                           Type=FIELD(Capacity Type Filter),
                                                                                                           No.=FIELD(Capacity No. Filter),
                                                                                                           Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Actual Time Used;
                                                              ENG=Actual Time Used];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 56  ;   ;Allocated Capacity Need;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Capacity Need"."Needed Time" WHERE (Status=FIELD(Status),
                                                                                                                    Prod. Order No.=FIELD(No.),
                                                                                                                    Type=FIELD(Capacity Type Filter),
                                                                                                                    No.=FIELD(Capacity No. Filter),
                                                                                                                    Work Center No.=FIELD(Work Center Filter),
                                                                                                                    Date=FIELD(Date Filter),
                                                                                                                    Requested Only=CONST(No)));
                                                   CaptionML=[ENU=Allocated Capacity Need;
                                                              ENG=Allocated Capacity Need];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 57  ;   ;Expected Capacity Need;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Capacity Need"."Needed Time" WHERE (Status=FIELD(Status),
                                                                                                                    Prod. Order No.=FIELD(No.),
                                                                                                                    Type=FIELD(Capacity Type Filter),
                                                                                                                    No.=FIELD(Capacity No. Filter),
                                                                                                                    Work Center No.=FIELD(Work Center Filter),
                                                                                                                    Date=FIELD(Date Filter),
                                                                                                                    Requested Only=CONST(No)));
                                                   CaptionML=[ENU=Expected Capacity Need;
                                                              ENG=Expected Capacity Need];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 80  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENG=No. Series];
                                                   Editable=No }
    { 82  ;   ;Planned Order No.   ;Code20        ;CaptionML=[ENU=Planned Order No.;
                                                              ENG=Planned Order No.] }
    { 83  ;   ;Firm Planned Order No.;Code20      ;CaptionML=[ENU=Firm Planned Order No.;
                                                              ENG=Firm Planned Order No.] }
    { 85  ;   ;Simulated Order No. ;Code20        ;CaptionML=[ENU=Simulated Order No.;
                                                              ENG=Simulated Order No.] }
    { 92  ;   ;Expected Material Ovhd. Cost;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Component"."Overhead Amount" WHERE (Status=FIELD(Status),
                                                                                                                    Prod. Order No.=FIELD(No.)));
                                                   CaptionML=[ENU=Expected Material Ovhd. Cost;
                                                              ENG=Expected Material Ovhd. Cost];
                                                   DecimalPlaces=2:2;
                                                   Editable=No }
    { 94  ;   ;Expected Capacity Ovhd. Cost;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Routing Line"."Expected Capacity Ovhd. Cost" WHERE (Status=FIELD(Status),
                                                                                                                                    Prod. Order No.=FIELD(No.)));
                                                   CaptionML=[ENU=Expected Capacity Ovhd. Cost;
                                                              ENG=Expected Capacity Ovhd. Cost];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 98  ;   ;Starting Date-Time  ;DateTime      ;OnValidate=BEGIN
                                                                "Starting Date" := DT2DATE("Starting Date-Time");
                                                                "Starting Time" := DT2TIME("Starting Date-Time");
                                                                VALIDATE("Starting Time");
                                                              END;

                                                   CaptionML=[ENU=Starting Date-Time;
                                                              ENG=Starting Date-Time] }
    { 99  ;   ;Ending Date-Time    ;DateTime      ;OnValidate=BEGIN
                                                                "Ending Date" := DT2DATE("Ending Date-Time");
                                                                "Ending Time" := DT2TIME("Ending Date-Time");
                                                                VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=[ENU=Ending Date-Time;
                                                              ENG=Ending Date-Time] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENG=Dimension Set ID];
                                                   Editable=No }
    { 7300;   ;Completely Picked   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Prod. Order Component"."Completely Picked" WHERE (Status=FIELD(Status),
                                                                                                                      Prod. Order No.=FIELD(No.),
                                                                                                                      Supplied-by Line No.=FILTER(0)));
                                                   CaptionML=[ENU=Completely Picked;
                                                              ENG=Completely Picked] }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Assigned User ID;
                                                              ENG=Assigned User ID] }
    { 50000;  ;Approval Status     ;Option        ;DataClassification=ToBeClassified;
                                                   OptionString=Open,Pending Approval,Released;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Status,No.                              ;Clustered=Yes }
    {    ;No.,Status                               }
    {    ;Search Description                       }
    {    ;Low-Level Code,Replan Ref. No.,Replan Ref. Status }
    { No ;Source Type,Source No.                   }
    {    ;Description                              }
    {    ;Source No.                               }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Description,Source No.,Source Type   }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst '@@@="%1 = Document status; %2 = Table caption; %3 = Field value; %4 = Table Caption";ENU=You cannot delete %1 %2 %3 because there is at least one %4 associated with it.;ENG=You cannot delete %1 %2 %3 because there is at least one %4 associated with it.';
      Text001@1001 : TextConst 'ENU=You cannot rename a %1.;ENG=You cannot rename a %1.';
      Text002@1002 : TextConst '@@@="%1 = Field caption; %2 = Document status; %3 = Table caption; %4 = Field value; %5 = Table Caption";ENU=You cannot change %1 on %2 %3 %4 because there is at least one %5 associated with it.;ENG=You cannot change %1 on %2 %3 %4 because there is at least one %5 associated with it.';
      Text003@1003 : TextConst 'ENU=The production order contains lines connected in a multi-level structure and the production order lines have not been automatically rescheduled.\;ENG=The production order contains lines connected in a multi-level structure and the production order lines have not been automatically rescheduled.\';
      Text005@1005 : TextConst 'ENU=Use Refresh if you want to reschedule the lines.;ENG=Use Refresh if you want to reschedule the lines.';
      MfgSetup@1006 : Record 99000765;
      ProdOrder@1007 : Record 5405;
      ProdOrderLine@1008 : Record 5406;
      Location@1004 : Record 14;
      NoSeriesMgt@1010 : Codeunit 396;
      CalcProdOrder@1011 : Codeunit 99000773;
      LeadTimeMgt@1013 : Codeunit 5404;
      DimMgt@1014 : Codeunit 408;
      Text006@1016 : TextConst 'ENU=A Finished Production Order cannot be modified.;ENG=A Finished Production Order cannot be modified.';
      Text007@1017 : TextConst 'ENU=%1 %2 %3 cannot be created, because a %4 %2 %3 already exists.;ENG=%1 %2 %3 cannot be created, because a %4 %2 %3 already exists.';
      ItemTrackingMgt@1020 : Codeunit 6500;
      CalendarMgt@1025 : Codeunit 99000755;
      HideValidationDialog@1018 : Boolean;
      Text008@1019 : TextConst 'ENU=Nothing to handle.;ENG=Nothing to handle.';
      UpdateEndDate@1012 : Boolean;
      Text010@1023 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?;ENG=You may have changed a dimension.\\Do you want to update the lines?';
      Text011@1024 : TextConst 'ENU=You cannot change Finished Production Order dimensions.;ENG=You cannot change Finished Production Order dimensions.';

    [External]
    PROCEDURE InitRecord@10();
    BEGIN
      IF "Due Date" = 0D THEN
        VALIDATE("Due Date",WORKDATE);
      IF ("Source Type" = "Source Type"::Item) AND ("Source No." <> '') THEN
        "Ending Date" :=
          LeadTimeMgt.PlannedEndingDate(
            "Source No.",
            "Location Code",
            '',
            "Due Date",
            '',
            2)
      ELSE
        "Ending Date" := "Due Date";
      "Starting Date" := "Ending Date";
      "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time");
      "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
    END;

    [External]
    PROCEDURE TestNoSeries@5();
    BEGIN
      MfgSetup.GET;

      CASE Status OF
        Status::Simulated:
          MfgSetup.TESTFIELD("Simulated Order Nos.");
        Status::Planned:
          MfgSetup.TESTFIELD("Planned Order Nos.");
        Status::"Firm Planned":
          MfgSetup.TESTFIELD("Firm Planned Order Nos.");
        Status::Released:
          MfgSetup.TESTFIELD("Released Order Nos.");
      END;
    END;

    [External]
    PROCEDURE AssistEdit@7(OldProdOrder@1000 : Record 5405) : Boolean;
    BEGIN
      WITH ProdOrder DO BEGIN
        ProdOrder := Rec;
        MfgSetup.GET;
        TestNoSeries;
        IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldProdOrder."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := ProdOrder;
          EXIT(TRUE);
        END;
      END;
    END;

    [External]
    PROCEDURE GetNoSeriesCode@6() : Code[20];
    BEGIN
      MfgSetup.GET;

      CASE Status OF
        Status::Simulated:
          EXIT(MfgSetup."Simulated Order Nos.");
        Status::Planned:
          EXIT(MfgSetup."Planned Order Nos.");
        Status::"Firm Planned":
          EXIT(MfgSetup."Firm Planned Order Nos.");
        Status::Released:
          EXIT(MfgSetup."Released Order Nos.");
      END;
    END;

    LOCAL PROCEDURE CheckProdOrderStatus@3(Name@1000 : Text[80]);
    VAR
      ItemLedgEntry@1001 : Record 32;
      CapLedgEntry@1002 : Record 5832;
    BEGIN
      IF Status <> Status::Released THEN
        EXIT;

      IF Status IN [Status::Released,Status::Finished] THEN BEGIN
        ItemLedgEntry.SETRANGE("Order Type",ItemLedgEntry."Order Type"::Production);
        ItemLedgEntry.SETRANGE("Order No.","No.");
        IF NOT ItemLedgEntry.ISEMPTY THEN
          ERROR(
            Text002,
            Name,Status,TABLECAPTION,"No.",ItemLedgEntry.TABLECAPTION);

        CapLedgEntry.SETRANGE("Order Type",CapLedgEntry."Order Type"::Production);
        CapLedgEntry.SETRANGE("Order No.","No.");
        IF NOT CapLedgEntry.ISEMPTY THEN
          ERROR(
            Text002,
            Name,Status,TABLECAPTION,"No.",CapLedgEntry.TABLECAPTION);
      END;
    END;

    LOCAL PROCEDURE DeleteRelations@2();
    VAR
      ProdOrderComment@1000 : Record 5414;
      WhseRequest@1001 : Record 7325;
      ReservMgt@1002 : Codeunit 99000845;
    BEGIN
      ProdOrderComment.SETRANGE(Status,Status);
      ProdOrderComment.SETRANGE("Prod. Order No.","No.");
      ProdOrderComment.DELETEALL;

      ReservMgt.DeleteDocumentReservation(DATABASE::"Prod. Order Line",Status,"No.",HideValidationDialog);

      ProdOrderLine.LOCKTABLE;
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.","No.");
      ProdOrderLine.DELETEALL(TRUE);

      WhseRequest.SETRANGE("Document Type",WhseRequest."Document Type"::Production);
      WhseRequest.SETRANGE("Document Subtype",Status);
      WhseRequest.SETRANGE("Document No.","No.");
      IF NOT WhseRequest.ISEMPTY THEN
        WhseRequest.DELETEALL(TRUE);
      ItemTrackingMgt.DeleteWhseItemTrkgLines(
        DATABASE::"Prod. Order Component",Status,"No.",'',0,0,'',FALSE);
    END;

    LOCAL PROCEDURE DeleteFnshdProdOrderRelations@12();
    VAR
      FnshdProdOrderRtngLine@1001 : Record 5409;
      FnshdProdOrderLine@1003 : Record 5406;
      FnshdProdOrderComp@1004 : Record 5407;
      FnshdProdOrderRtngTool@1005 : Record 5411;
      FnshdProdOrderRtngPers@1006 : Record 5412;
      FnshdProdOrderRtngQltyMeas@1007 : Record 5413;
      FnshdProdOrderComment@1008 : Record 5414;
      FnshdProdOrderRtngCmt@1009 : Record 5415;
      FnshdProdOrderBOMComment@1010 : Record 5416;
    BEGIN
      FnshdProdOrderRtngLine.SETRANGE(Status,Status);
      FnshdProdOrderRtngLine.SETRANGE("Prod. Order No.","No.");
      FnshdProdOrderRtngLine.DELETEALL;

      FnshdProdOrderLine.SETRANGE(Status,Status);
      FnshdProdOrderLine.SETRANGE("Prod. Order No.","No.");
      FnshdProdOrderLine.DELETEALL;

      FnshdProdOrderComp.SETRANGE(Status,Status);
      FnshdProdOrderComp.SETRANGE("Prod. Order No.","No.");
      FnshdProdOrderComp.DELETEALL;

      FnshdProdOrderRtngTool.SETRANGE(Status,Status);
      FnshdProdOrderRtngTool.SETRANGE("Prod. Order No.","No.");
      FnshdProdOrderRtngTool.DELETEALL;

      FnshdProdOrderRtngPers.SETRANGE(Status,Status);
      FnshdProdOrderRtngPers.SETRANGE("Prod. Order No.","No.");
      FnshdProdOrderRtngPers.DELETEALL;

      FnshdProdOrderRtngQltyMeas.SETRANGE(Status,Status);
      FnshdProdOrderRtngQltyMeas.SETRANGE("Prod. Order No.","No.");
      FnshdProdOrderRtngQltyMeas.DELETEALL;

      FnshdProdOrderComment.SETRANGE(Status,Status);
      FnshdProdOrderComment.SETRANGE("Prod. Order No.","No.");
      FnshdProdOrderComment.DELETEALL;

      FnshdProdOrderRtngCmt.SETRANGE(Status,Status);
      FnshdProdOrderRtngCmt.SETRANGE("Prod. Order No.","No.");
      FnshdProdOrderRtngCmt.DELETEALL;

      FnshdProdOrderBOMComment.SETRANGE(Status,Status);
      FnshdProdOrderBOMComment.SETRANGE("Prod. Order No.","No.");
      FnshdProdOrderBOMComment.DELETEALL;
    END;

    LOCAL PROCEDURE AdjustStartEndingDate@1();
    BEGIN
      ProdOrderLine.RESET;
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.","No.");

      IF NOT ProdOrderLine.FIND('-') THEN
        EXIT;

      "Starting Date" := CalendarMgt.GetMaxDate;
      "Starting Time" := 235959T;
      "Ending Date" := 0D;
      "Ending Time" := 000000T;

      REPEAT
        IF (ProdOrderLine."Starting Date" < "Starting Date") OR
           ((ProdOrderLine."Starting Date" = "Starting Date") AND
            (ProdOrderLine."Starting Time" < "Starting Time"))
        THEN BEGIN
          "Starting Time" := ProdOrderLine."Starting Time";
          "Starting Date" := ProdOrderLine."Starting Date";
        END;
        IF (ProdOrderLine."Ending Date" > "Ending Date") OR
           ((ProdOrderLine."Ending Date" = "Ending Date") AND
            (ProdOrderLine."Ending Time" > "Ending Time"))
        THEN BEGIN
          "Ending Time" := ProdOrderLine."Ending Time";
          "Ending Date" := ProdOrderLine."Ending Date";
        END;
      UNTIL ProdOrderLine.NEXT = 0;
      UpdateDatetime;
    END;

    LOCAL PROCEDURE MultiLevelMessage@4();
    BEGIN
      MESSAGE(
        Text003 +
        Text005);
    END;

    [External]
    PROCEDURE UpdateDatetime@11();
    BEGIN
      IF ("Starting Date" <> 0D) AND ("Starting Time" <> 0T) THEN
        "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time")
      ELSE
        "Starting Date-Time" := 0DT;

      IF ("Ending Date" <> 0D) AND ("Ending Time" <> 0T) THEN
        "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time")
      ELSE
        "Ending Date-Time" := 0DT;
    END;

    LOCAL PROCEDURE CreateDim@8(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,'',"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@13(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      OldDimSetID@1002 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        IF Status = Status::Finished THEN
          ERROR(Text011);
        MODIFY;
        IF SalesLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    [External]
    PROCEDURE Navigate@9();
    VAR
      NavigateForm@1000 : Page 344;
    BEGIN
      NavigateForm.SetDoc("Due Date","No.");
      NavigateForm.RUN;
    END;

    [External]
    PROCEDURE CreatePick@7300(AssignedUserID@1009 : Code[50];SortingMethod@1008 : Option;SetBreakBulkFilter@1007 : Boolean;DoNotFillQtyToHandle@1006 : Boolean;PrintDocument@1005 : Boolean);
    VAR
      ProdOrderCompLine@1001 : Record 5407;
      WhseWkshLine@1004 : Record 7326;
      CreatePickFromWhseSource@1002 : Report 7305;
      ItemTrackingMgt@1003 : Codeunit 6500;
    BEGIN
      ProdOrderCompLine.RESET;
      ProdOrderCompLine.SETRANGE(Status,Status);
      ProdOrderCompLine.SETRANGE("Prod. Order No.","No.");
      IF ProdOrderCompLine.FIND('-') THEN
        REPEAT
          ItemTrackingMgt.InitItemTrkgForTempWkshLine(
            WhseWkshLine."Whse. Document Type"::Production,ProdOrderCompLine."Prod. Order No.",
            ProdOrderCompLine."Prod. Order Line No.",DATABASE::"Prod. Order Component",
            ProdOrderCompLine.Status,ProdOrderCompLine."Prod. Order No.",
            ProdOrderCompLine."Prod. Order Line No.",ProdOrderCompLine."Line No.");
        UNTIL ProdOrderCompLine.NEXT = 0;
      COMMIT;

      TESTFIELD(Status,Status::Released);
      CALCFIELDS("Completely Picked");
      IF "Completely Picked" THEN
        ERROR(Text008);

      ProdOrderCompLine.RESET;
      ProdOrderCompLine.SETRANGE(Status,Status);
      ProdOrderCompLine.SETRANGE("Prod. Order No.","No.");
      ProdOrderCompLine.SETFILTER(
        "Flushing Method",'%1|%2|%3',
        ProdOrderCompLine."Flushing Method"::Manual,
        ProdOrderCompLine."Flushing Method"::"Pick + Forward",
        ProdOrderCompLine."Flushing Method"::"Pick + Backward");
      ProdOrderCompLine.SETRANGE("Planning Level Code",0);
      ProdOrderCompLine.SETFILTER("Expected Quantity",'>0');
      IF ProdOrderCompLine.FIND('-') THEN BEGIN
        CreatePickFromWhseSource.SetProdOrder(Rec);
        CreatePickFromWhseSource.SetHideValidationDialog(HideValidationDialog);
        IF HideValidationDialog THEN
          CreatePickFromWhseSource.Initialize(AssignedUserID,SortingMethod,PrintDocument,DoNotFillQtyToHandle,SetBreakBulkFilter);
        CreatePickFromWhseSource.USEREQUESTPAGE(NOT HideValidationDialog);
        CreatePickFromWhseSource.RUNMODAL;
        CreatePickFromWhseSource.GetResultMessage(2);
        CLEAR(CreatePickFromWhseSource);
      END ELSE
        IF NOT HideValidationDialog THEN
          MESSAGE(Text008);
    END;

    [External]
    PROCEDURE SetHideValidationDialog@7301(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [External]
    PROCEDURE CreateInvtPutAwayPick@29();
    VAR
      WhseRequest@1000 : Record 5765;
    BEGIN
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      WhseRequest.SETFILTER(
        "Source Document",'%1|%2',
        WhseRequest."Source Document"::"Prod. Consumption",
        WhseRequest."Source Document"::"Prod. Output");
      WhseRequest.SETRANGE("Source No.","No.");
      REPORT.RUNMODAL(REPORT::"Create Invt Put-away/Pick/Mvmt",TRUE,FALSE,WhseRequest);
    END;

    LOCAL PROCEDURE GetDefaultBin@50();
    VAR
      WMSManagement@1000 : Codeunit 7302;
    BEGIN
      "Bin Code" := '';
      IF "Source Type" <> "Source Type"::Item THEN
        EXIT;

      IF "Location Code" <> '' THEN BEGIN
        GetLocation("Location Code");
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
          "Bin Code" := Location."From-Production Bin Code";
      END;
      IF ("Bin Code" = '') AND ("Source No." <> '') THEN
        WMSManagement.GetDefaultBin("Source No.",'',"Location Code","Bin Code");
    END;

    LOCAL PROCEDURE GetLocation@15(LocationCode@1000 : Code[10]);
    BEGIN
      IF Location.Code <> LocationCode THEN
        Location.GET(LocationCode);
    END;

    [External]
    PROCEDURE SetUpdateEndDate@16();
    BEGIN
      UpdateEndDate := TRUE;
    END;

    LOCAL PROCEDURE UpdateEndingDate@17(VAR ProdOrderLine@1000 : Record 5406);
    BEGIN
      IF ProdOrderLine.FINDSET(TRUE) THEN
        REPEAT
          ProdOrderLine."Due Date" := "Due Date";
          ProdOrderLine.MODIFY;
          CalcProdOrder.SetParameter(TRUE);
          ProdOrderLine."Ending Date" :=
            LeadTimeMgt.PlannedEndingDate(
              ProdOrderLine."Item No.",
              ProdOrderLine."Location Code",
              ProdOrderLine."Variant Code",
              ProdOrderLine."Due Date",
              '',
              2);
          CalcProdOrder.Recalculate(ProdOrderLine,1,TRUE);
          "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time");
          "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
          ProdOrderLine.MODIFY(TRUE);
          ProdOrderLine.CheckEndingDate(CurrFieldNo <> 0);
        UNTIL ProdOrderLine.NEXT = 0
    END;

    [External]
    PROCEDURE ShowDocDim@18();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      TESTFIELD("No.");
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        IF Status = Status::Finished THEN
          ERROR(Text011);
        MODIFY;
        IF SalesLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE SalesLinesExist@14() : Boolean;
    BEGIN
      ProdOrderLine.RESET;
      ProdOrderLine.SETRANGE("Prod. Order No.","No.");
      ProdOrderLine.SETRANGE(Status,Status);
      EXIT(ProdOrderLine.FINDFIRST);
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      NewDimSetID@1002 : Integer;
      OldDimSetID@1003 : Integer;
    BEGIN
      // Update all lines with changed dimensions.

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT CONFIRM(Text010) THEN
        EXIT;

      ProdOrderLine.RESET;
      ProdOrderLine.SETRANGE("Prod. Order No.","No.");
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.LOCKTABLE;
      IF ProdOrderLine.FIND('-') THEN
        REPEAT
          OldDimSetID := ProdOrderLine."Dimension Set ID";
          NewDimSetID := DimMgt.GetDeltaDimSetID(ProdOrderLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF ProdOrderLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            ProdOrderLine."Dimension Set ID" := NewDimSetID;
            DimMgt.UpdateGlobalDimFromDimSetID(
              ProdOrderLine."Dimension Set ID",ProdOrderLine."Shortcut Dimension 1 Code",ProdOrderLine."Shortcut Dimension 2 Code");
            ProdOrderLine.MODIFY;
            ProdOrderLine.UpdateProdOrderCompDim(NewDimSetID,OldDimSetID);
          END;
        UNTIL ProdOrderLine.NEXT = 0;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@138(VAR ProductionOrder@1000 : Record 5405;FieldNo@1001 : Integer;TableID@1003 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 1510 Notification Management
{
  OBJECT-PROPERTIES
  {
    Date=16/03/20;
    Time=15:55:33;
    Modified=Yes;
    Version List=NAVW110.00,WF;
  }
  PROPERTIES
  {
    Permissions=TableData 458=i,
                TableData 1510=r,
                TableData 1511=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      OverdueEntriesMsg@1047 : TextConst 'ENU=Overdue approval entries have been created.;ENG=Overdue approval entries have been created.';
      SalesTxt@1008 : TextConst 'ENU=Sales;ENG=Sales';
      PurchaseTxt@1007 : TextConst 'ENU=Purchase;ENG=Purchase';
      ServiceTxt@1006 : TextConst 'ENU=Service;ENG=Service';
      SalesInvoiceTxt@1005 : TextConst 'ENU=Sales Invoice;ENG=Sales Invoice';
      PurchaseInvoiceTxt@1004 : TextConst 'ENU=Purchase Invoice;ENG=Purchase Invoice';
      ServiceInvoiceTxt@1003 : TextConst 'ENU=Service Invoice;ENG=Service Invoice';
      SalesCreditMemoTxt@1002 : TextConst 'ENU=Sales Credit Memo;ENG=Sales Credit Memo';
      PurchaseCreditMemoTxt@1001 : TextConst 'ENU=Purchase Credit Memo;ENG=Purchase Credit Memo';
      ServiceCreditMemoTxt@1000 : TextConst 'ENU=Service Credit Memo;ENG=Service Credit Memo';
      ActionNewRecordTxt@1015 : TextConst '@@@=E.g. Sales Invoice 10000 has been created.;ENU=has been created.;ENG=has been created.';
      ActionApproveTxt@1014 : TextConst '@@@=E.g. Sales Invoice 10000 requires your approval.;ENU=requires your approval.;ENG=requires your approval.';
      ActionApprovedTxt@1013 : TextConst '@@@=E.g. Sales Invoice 10000 has been approved.;ENU=has been approved.;ENG=has been approved.';
      ActionApprovalCreatedTxt@1012 : TextConst '@@@=E.g. Sales Invoice 10000 approval request has been created.;ENU=approval request has been created.;ENG=approval request has been created.';
      ActionApprovalCanceledTxt@1011 : TextConst '@@@=E.g. Sales Invoice 10000 approval request has been canceled.;ENU=approval request has been canceled.;ENG=approval request has been cancelled.';
      ActionApprovalRejectedTxt@1010 : TextConst '@@@=E.g. Sales Invoice 10000 approval request has been rejected.;ENU=approval has been rejected.;ENG=approval has been rejected.';
      ActionOverdueTxt@1009 : TextConst '@@@=E.g. Sales Invoice 10000 has a pending approval.;ENU=has a pending approval.;ENG=has a pending approval.';

    PROCEDURE CreateOverdueNotifications@14(WorkflowStepArgument@1002 : Record 1523);
    VAR
      UserSetup@1006 : Record 91;
      ApprovalEntry@1000 : Record 454;
      OverdueApprovalEntry@1001 : Record 458;
      NotificationEntry@1003 : Record 1511;
    BEGIN
      IF UserSetup.FINDSET THEN
        REPEAT
          ApprovalEntry.RESET;
          ApprovalEntry.SETRANGE("Approver ID",UserSetup."User ID");
          ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
          ApprovalEntry.SETFILTER("Due Date",'<=%1',TODAY);
          IF ApprovalEntry.FINDSET THEN
            REPEAT
              InsertOverdueEntry(ApprovalEntry,OverdueApprovalEntry);
              NotificationEntry.CreateNew(NotificationEntry.Type::Overdue,
                UserSetup."User ID",OverdueApprovalEntry,WorkflowStepArgument."Link Target Page",
                WorkflowStepArgument."Custom Link");
            UNTIL ApprovalEntry.NEXT = 0;
        UNTIL UserSetup.NEXT = 0;

      MESSAGE(OverdueEntriesMsg);
    END;

    LOCAL PROCEDURE InsertOverdueEntry@13(ApprovalEntry@1000 : Record 454;VAR OverdueApprovalEntry@1001 : Record 458);
    VAR
      User@1002 : Record 2000000120;
      UserSetup@1003 : Record 91;
    BEGIN
      WITH OverdueApprovalEntry DO BEGIN
        INIT;
        "Approver ID" := ApprovalEntry."Approver ID";
        User.SETRANGE("User Name",ApprovalEntry."Approver ID");
        IF User.FINDFIRST THEN BEGIN
          "Sent to Name" := COPYSTR(User."Full Name",1,MAXSTRLEN("Sent to Name"));
          UserSetup.GET(User."User Name");
        END;

        "Table ID" := ApprovalEntry."Table ID";
        "Document Type" := ApprovalEntry."Document Type";
        "Document No." := ApprovalEntry."Document No.";
        "Sent to ID" := ApprovalEntry."Approver ID";
        "Sent Date" := TODAY;
        "Sent Time" := TIME;
        "E-Mail" := UserSetup."E-Mail";
        "Sequence No." := ApprovalEntry."Sequence No.";
        "Due Date" := ApprovalEntry."Due Date";
        "Approval Code" := ApprovalEntry."Approval Code";
        "Approval Type" := ApprovalEntry."Approval Type";
        "Limit Type" := ApprovalEntry."Limit Type";
        "Record ID to Approve" := ApprovalEntry."Record ID to Approve";
        INSERT;
      END;
    END;

    PROCEDURE CreateDefaultNotificationSetup@1(NotificationType@1000 : Option);
    VAR
      NotificationSetup@1001 : Record 1512;
    BEGIN
      IF DefaultNotificationEntryExists(NotificationType) THEN
        EXIT;

      NotificationSetup.INIT;
      NotificationSetup.VALIDATE("Notification Type",NotificationType);
      NotificationSetup.VALIDATE("Notification Method",NotificationSetup."Notification Method"::Email);
      NotificationSetup.INSERT(TRUE);
    END;

    LOCAL PROCEDURE DefaultNotificationEntryExists@4(NotificationType@1000 : Option) : Boolean;
    VAR
      NotificationSetup@1001 : Record 1512;
    BEGIN
      NotificationSetup.SETRANGE("User ID",'');
      NotificationSetup.SETRANGE("Notification Type",NotificationType);
      EXIT(NOT NotificationSetup.ISEMPTY)
    END;

    PROCEDURE MoveNotificationEntryToSentNotificationEntries@11(VAR NotificationEntry@1000 : Record 1511;NotificationBody@1001 : Text;AggregatedNotifications@1002 : Boolean;NotificationMethod@1005 : Option);
    VAR
      SentNotificationEntry@1003 : Record 1514;
      InitialSentNotificationEntry@1006 : Record 1514;
    BEGIN
      IF AggregatedNotifications THEN BEGIN
        IF NotificationEntry.FINDSET THEN BEGIN
          InitialSentNotificationEntry.NewRecord(NotificationEntry,NotificationBody,NotificationMethod);
          WHILE NotificationEntry.NEXT <> 0 DO BEGIN
            SentNotificationEntry.NewRecord(NotificationEntry,NotificationBody,NotificationMethod);
            SentNotificationEntry.VALIDATE("Aggregated with Entry",InitialSentNotificationEntry.ID);
            SentNotificationEntry.MODIFY(TRUE);
          END;
        END;
        NotificationEntry.DELETEALL(TRUE);
      END ELSE BEGIN
        SentNotificationEntry.NewRecord(NotificationEntry,NotificationBody,NotificationMethod);
        NotificationEntry.DELETE(TRUE);
      END;
    END;

    PROCEDURE GetDocumentTypeAndNumber@3(VAR RecRef@1000 : RecordRef;VAR DocumentType@1001 : Text;VAR DocumentNo@1002 : Text);
    VAR
      FieldRef@1003 : FieldRef;
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::"Incoming Document":
          BEGIN
            DocumentType := RecRef.CAPTION;
            FieldRef := RecRef.FIELD(2);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Sales Header":
          BEGIN
            FieldRef := RecRef.FIELD(1);
            DocumentType := SalesTxt + ' ' + FORMAT(FieldRef.VALUE);
            FieldRef := RecRef.FIELD(3);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            FieldRef := RecRef.FIELD(1);
            DocumentType := PurchaseTxt + ' ' + FORMAT(FieldRef.VALUE);
            FieldRef := RecRef.FIELD(3);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Service Header":
          BEGIN
            FieldRef := RecRef.FIELD(1);
            DocumentType := ServiceTxt + ' ' + FORMAT(FieldRef.VALUE);
            FieldRef := RecRef.FIELD(3);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Sales Invoice Header":
          BEGIN
            DocumentType := SalesInvoiceTxt;
            FieldRef := RecRef.FIELD(3);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Purch. Inv. Header":
          BEGIN
            DocumentType := PurchaseInvoiceTxt;
            FieldRef := RecRef.FIELD(3);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            DocumentType := ServiceInvoiceTxt;
            FieldRef := RecRef.FIELD(3);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            DocumentType := SalesCreditMemoTxt;
            FieldRef := RecRef.FIELD(3);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            DocumentType := PurchaseCreditMemoTxt;
            FieldRef := RecRef.FIELD(3);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            DocumentType := ServiceCreditMemoTxt;
            FieldRef := RecRef.FIELD(3);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Gen. Journal Line":
          BEGIN
            DocumentType := RecRef.CAPTION;
            FieldRef := RecRef.FIELD(1);
            DocumentNo := FORMAT(FieldRef.VALUE);
            FieldRef := RecRef.FIELD(51);
            DocumentNo += ',' + FORMAT(FieldRef.VALUE);
            FieldRef := RecRef.FIELD(2);
            DocumentNo += ',' + FORMAT(FieldRef.VALUE);
          END;
        DATABASE::"Gen. Journal Batch":
          BEGIN
            DocumentType := RecRef.CAPTION;
            FieldRef := RecRef.FIELD(1);
            DocumentNo := FORMAT(FieldRef.VALUE);
            FieldRef := RecRef.FIELD(2);
            DocumentNo += ',' + FORMAT(FieldRef.VALUE);
          END;
        //Chris
        DATABASE::Job:
          BEGIN
            DocumentType:=RecRef.CAPTION;
            FieldRef := RecRef.FIELD(1);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        //Chris
        DATABASE::"Production Order":
          BEGIN
            DocumentType:=RecRef.CAPTION;
            FieldRef := RecRef.FIELD(1);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        DATABASE::Customer,
        DATABASE::Vendor,
        DATABASE::Item:
          BEGIN
            DocumentType := RecRef.CAPTION;
            FieldRef := RecRef.FIELD(1);
            DocumentNo := FORMAT(FieldRef.VALUE);
          END;
        ELSE BEGIN
          DocumentType := RecRef.CAPTION;
          FieldRef := RecRef.FIELD(3);
          DocumentNo := FORMAT(FieldRef.VALUE);
        END;
      END;
    END;

    PROCEDURE GetActionTextFor@7(VAR NotificationEntry@1000 : Record 1511) : Text;
    VAR
      ApprovalEntry@1001 : Record 454;
      DataTypeManagement@1002 : Codeunit 701;
      RecRef@1003 : RecordRef;
    BEGIN
      CASE NotificationEntry.Type OF
        NotificationEntry.Type::"New Record":
          EXIT(ActionNewRecordTxt);
        NotificationEntry.Type::Approval:
          BEGIN
            DataTypeManagement.GetRecordRef(NotificationEntry."Triggered By Record",RecRef);
            RecRef.SETTABLE(ApprovalEntry);
            CASE ApprovalEntry.Status OF
              ApprovalEntry.Status::Open:
                EXIT(ActionApproveTxt);
              ApprovalEntry.Status::Canceled:
                EXIT(ActionApprovalCanceledTxt);
              ApprovalEntry.Status::Rejected:
                EXIT(ActionApprovalRejectedTxt);
              ApprovalEntry.Status::Created:
                EXIT(ActionApprovalCreatedTxt);
              ApprovalEntry.Status::Approved:
                EXIT(ActionApprovedTxt);
            END;
          END;
        NotificationEntry.Type::Overdue:
          EXIT(ActionOverdueTxt);
      END;
    END;

    BEGIN
    {
      //Chris
    }
    END.
  }
}

OBJECT Codeunit 1520 Workflow Event Handling
{
  OBJECT-PROPERTIES
  {
    Date=16/03/20;
    Time=17:15:10;
    Modified=Yes;
    Version List=NAVW110.00,WF;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      IncDocReleasedEventDescTxt@1040 : TextConst 'ENU=An incoming document is released.;ENG=An incoming document is released.';
      CreateDocFromIncDocSuccessfulEventDescTxt@1041 : TextConst 'ENU=Creating a document from an incoming document is successful.;ENG=Creating a document from an incoming document is successful.';
      CreateDocFromIncDocFailsEventDescTxt@1033 : TextConst 'ENU=Creating a document from an incoming document fails.;ENG=Creating a document from an incoming document fails.';
      IncDocCreatedEventDescTxt@1005 : TextConst 'ENU=An incoming document is created.;ENG=An incoming document is created.';
      IncDocIsReadyForOCREventDescTxt@1034 : TextConst 'ENU=An incoming document is ready for OCR.;ENG=An incoming document is ready for OCR.';
      IncDocIsSentForOCREventDescTxt@1042 : TextConst 'ENU=An incoming document is sent for OCR.;ENG=An incoming document is sent for OCR.';
      IncDocIsReceivedFromOCREventDescTxt@1043 : TextConst 'ENU=An incoming document is received from OCR.;ENG=An incoming document is received from OCR.';
      IncDocIsReceivedFromDocExchEventDescTxt@1044 : TextConst 'ENU=An incoming document is received from document exchange.;ENG=An incoming document is received from document exchange.';
      IncDocSendForApprovalEventDescTxt@1011 : TextConst 'ENU=Approval of a incoming document is requested.;ENG=Approval of a incoming document is requested.';
      IncDocApprReqCancelledEventDescTxt@1045 : TextConst 'ENU=An approval request for an incoming document is canceled.;ENG=An approval request for an incoming document is cancelled.';
      PurchDocSendForApprovalEventDescTxt@1004 : TextConst 'ENU=Approval of a purchase document is requested.;ENG=Approval of a purchase document is requested.';
      PurchDocApprReqCancelledEventDescTxt@1007 : TextConst 'ENU=An approval request for a purchase document is canceled.;ENG=An approval request for a purchase document is cancelled.';
      PurchInvPostEventDescTxt@1001 : TextConst 'ENU=A purchase invoice is posted.;ENG=A purchase invoice is posted.';
      PurchDocReleasedEventDescTxt@1013 : TextConst 'ENU=A purchase document is released.;ENG=A purchase document is released.';
      PurchInvPmtCreatedEventDescTxt@1000 : TextConst 'ENU=A general journal line is created.;ENG=A general journal line is created.';
      ApprReqApprovedEventDescTxt@1009 : TextConst 'ENU=An approval request is approved.;ENG=An approval request is approved.';
      ApprReqRejectedEventDescTxt@1008 : TextConst 'ENU=An approval request is rejected.;ENG=An approval request is rejected.';
      ApprReqDelegatedEventDescTxt@1006 : TextConst 'ENU=An approval request is delegated.;ENG=An approval request is delegated.';
      SalesDocSendForApprovalEventDescTxt@1003 : TextConst 'ENU=Approval of a sales document is requested.;ENG=Approval of a sales document is requested.';
      SalesDocApprReqCancelledEventDescTxt@1016 : TextConst 'ENU=An approval request for a sales document is canceled.;ENG=An approval request for a sales document is cancelled.';
      SalesDocReleasedEventDescTxt@1002 : TextConst 'ENU=A sales document is released.;ENG=A sales document is released.';
      EventAlreadyExistErr@1014 : TextConst 'ENU=An event with description %1 already exists.;ENG=An event with description %1 already exists.';
      SendOverdueNotifTxt@1012 : TextConst 'ENU=The overdue approval notifications batch job will be run.;ENG=The overdue approval notifications batch job will be run.';
      CustomerCreditLimitExceededTxt@1017 : TextConst 'ENU=A customer credit limit is exceeded.;ENG=A customer credit limit is exceeded.';
      CustomerCreditLimitNotExceededTxt@1018 : TextConst 'ENU=A customer credit limit is not exceeded.;ENG=A customer credit limit is not exceeded.';
      CustomerSendForApprovalEventDescTxt@1019 : TextConst 'ENU=Approval of a customer is requested.;ENG=Approval of a customer is requested.';
      VendorSendForApprovalEventDescTxt@1015 : TextConst 'ENU=Approval of a vendor is requested.;ENG=Approval of a vendor is requested.';
      ItemSendForApprovalEventDescTxt@1024 : TextConst 'ENU=Approval of an item is requested.;ENG=Approval of an item is requested.';
      CustomerApprovalRequestCancelEventDescTxt@1020 : TextConst 'ENU=An approval request for a customer is canceled.;ENG=An approval request for a customer is cancelled.';
      VendorApprovalRequestCancelEventDescTxt@1029 : TextConst 'ENU=An approval request for a vendor is canceled.;ENG=An approval request for a vendor is cancelled.';
      ItemApprovalRequestCancelEventDescTxt@1030 : TextConst 'ENU=An approval request for an item is canceled.;ENG=An approval request for an item is cancelled.';
      WorkflowManagement@1010 : Codeunit 1501;
      GeneralJournalBatchSendForApprovalEventDescTxt@1026 : TextConst 'ENU=Approval of a general journal batch is requested.;ENG=Approval of a general journal batch is requested.';
      GeneralJournalBatchApprovalRequestCancelEventDescTxt@1025 : TextConst 'ENU=An approval request for a general journal batch is canceled.;ENG=An approval request for a general journal batch is cancelled.';
      GeneralJournalLineSendForApprovalEventDescTxt@1028 : TextConst 'ENU=Approval of a general journal line is requested.;ENG=Approval of a general journal line is requested.';
      GeneralJournalLineApprovalRequestCancelEventDescTxt@1027 : TextConst 'ENU=An approval request for a general journal line is canceled.;ENG=An approval request for a general journal line is cancelled.';
      GeneralJournalBatchBalancedEventDescTxt@1021 : TextConst 'ENU=A general journal batch is balanced.;ENG=A general journal batch is balanced.';
      GeneralJournalBatchNotBalancedEventDescTxt@1022 : TextConst 'ENU=A general journal batch is not balanced.;ENG=A general journal batch is not balanced.';
      ImageOrPDFIsAttachedToAnIncomingDocEventDescTxt@1091 : TextConst 'ENU=An image or pdf is attached to a new incoming document for OCR.;ENG=An image or pdf is attached to a new incoming document for OCR.';
      CustChangedTxt@1023 : TextConst 'ENU=A customer record is changed.;ENG=A customer record is changed.';
      VendChangedTxt@1031 : TextConst 'ENU=A vendor record is changed.;ENG=A vendor record is changed.';
      ItemChangedTxt@1032 : TextConst 'ENU=An item record is changed.;ENG=An item record is changed.';
      CreateGenJnlLineFromIncDocSuccessfulEventDescTxt@1035 : TextConst 'ENU=The creation of a general journal line from the incoming document was successful.;ENG=The creation of a general journal line from the incoming document was successful.';
      CreateGenJnlLineFromIncDocFailsEventDescTxt@1036 : TextConst 'ENU=The creation of a general journal line from the incoming document failed.;ENG=The creation of a general journal line from the incoming document failed.';
      SendapprovalreqJob1@1000000000 : TextConst 'ENU=An approval request of Job is sent';
      AppreqforJob1@1000000001 : TextConst 'ENU=An approval request of Job is approved.';
      RejreqforJob1@1000000002 : TextConst 'ENU=An approval request of Job is rejected.';
      DelegatereqforJob1@1000000003 : TextConst 'ENU=An approval request of Job is delegated.';
      SendApprovalRequestProd@1000000004 : TextConst 'ENU=An approval request of Production Order is Requested';
      AppReqForProd@1000000005 : TextConst 'ENU=An approval request of Production Order is approved';
      RejReqForProd@1000000006 : TextConst 'ENU=An approval request of Production Order is rejected';
      DelegateReqForProd@1000000007 : TextConst 'ENU=An approval request of Production Order is delegated';

    PROCEDURE CreateEventsLibrary@13();
    BEGIN
      AddEventToLibrary(
        RunWorkflowOnAfterInsertIncomingDocumentCode,DATABASE::"Incoming Document",IncDocCreatedEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterReleaseIncomingDocCode,DATABASE::"Incoming Document",IncDocReleasedEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterCreateDocFromIncomingDocSuccessCode,
        DATABASE::"Incoming Document",CreateDocFromIncDocSuccessfulEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterCreateDocFromIncomingDocFailCode,DATABASE::"Incoming Document",CreateDocFromIncDocFailsEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterReadyForOCRIncomingDocCode,DATABASE::"Incoming Document",IncDocIsReadyForOCREventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterSendToOCRIncomingDocCode,DATABASE::"Incoming Document",IncDocIsSentForOCREventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterReceiveFromOCRIncomingDocCode,DATABASE::"Incoming Document",IncDocIsReceivedFromOCREventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterReceiveFromDocExchIncomingDocCode,
        DATABASE::"Incoming Document",IncDocIsReceivedFromDocExchEventDescTxt,0,FALSE);

      AddEventToLibrary(
        RunWorkflowOnSendPurchaseDocForApprovalCode,DATABASE::"Purchase Header",PurchDocSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnSendIncomingDocForApprovalCode,DATABASE::"Incoming Document",IncDocSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnCancelIncomingDocApprovalRequestCode,DATABASE::"Incoming Document",IncDocApprReqCancelledEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnCancelPurchaseApprovalRequestCode,DATABASE::"Purchase Header",
        PurchDocApprReqCancelledEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnAfterReleasePurchaseDocCode,DATABASE::"Purchase Header",
        PurchDocReleasedEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnAfterPostPurchaseDocCode,DATABASE::"Purch. Inv. Header",
        PurchInvPostEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendSalesDocForApprovalCode,DATABASE::"Sales Header",
        SalesDocSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCancelSalesApprovalRequestCode,DATABASE::"Sales Header",
        SalesDocApprReqCancelledEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnAfterReleaseSalesDocCode,DATABASE::"Sales Header",
        SalesDocReleasedEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnAfterInsertGeneralJournalLineCode,DATABASE::"Gen. Journal Line",
        PurchInvPmtCreatedEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnApproveApprovalRequestCode,DATABASE::"Approval Entry",ApprReqApprovedEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnRejectApprovalRequestCode,DATABASE::"Approval Entry",ApprReqRejectedEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnDelegateApprovalRequestCode,DATABASE::"Approval Entry",ApprReqDelegatedEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendOverdueNotificationsCode,DATABASE::"Approval Entry",SendOverdueNotifTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnCustomerCreditLimitExceededCode,DATABASE::"Sales Header",
        CustomerCreditLimitExceededTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCustomerCreditLimitNotExceededCode,DATABASE::"Sales Header",
        CustomerCreditLimitNotExceededTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendCustomerForApprovalCode,DATABASE::Customer,
        CustomerSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCancelCustomerApprovalRequestCode,DATABASE::Customer,
        CustomerApprovalRequestCancelEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendVendorForApprovalCode,DATABASE::Vendor,
        VendorSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCancelVendorApprovalRequestCode,DATABASE::Vendor,
        VendorApprovalRequestCancelEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendItemForApprovalCode,DATABASE::Item,
        ItemSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCancelItemApprovalRequestCode,DATABASE::Item,
        ItemApprovalRequestCancelEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendGeneralJournalBatchForApprovalCode,DATABASE::"Gen. Journal Batch",
        GeneralJournalBatchSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode,DATABASE::"Gen. Journal Batch",
        GeneralJournalBatchApprovalRequestCancelEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendGeneralJournalLineForApprovalCode,DATABASE::"Gen. Journal Line",
        GeneralJournalLineSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode,DATABASE::"Gen. Journal Line",
        GeneralJournalLineApprovalRequestCancelEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnGeneralJournalBatchBalancedCode,DATABASE::"Gen. Journal Batch",
        GeneralJournalBatchBalancedEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnGeneralJournalBatchNotBalancedCode,DATABASE::"Gen. Journal Batch",
        GeneralJournalBatchNotBalancedEventDescTxt,0,FALSE);

      AddEventToLibrary(
        RunWorkflowOnBinaryFileAttachedCode,
        DATABASE::"Incoming Document Attachment",ImageOrPDFIsAttachedToAnIncomingDocEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnCustomerChangedCode,DATABASE::Customer,CustChangedTxt,0,TRUE);
      AddEventToLibrary(RunWorkflowOnVendorChangedCode,DATABASE::Vendor,VendChangedTxt,0,TRUE);
      AddEventToLibrary(RunWorkflowOnItemChangedCode,DATABASE::Item,ItemChangedTxt,0,TRUE);

      AddEventToLibrary(
        RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocSuccessCode,DATABASE::"Incoming Document",
        CreateGenJnlLineFromIncDocSuccessfulEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocFailCode,DATABASE::"Incoming Document",
        CreateGenJnlLineFromIncDocFailsEventDescTxt,0,FALSE);

      // Chris Add Event to Library **ST**
      AddEventToLibrary(RunWorkflowOnSendJobforApprovalCode1,DATABASE::Job,SendapprovalreqJob1,0,FALSE);
      AddEventToLibrary(RunWorkflowOnApproveApprovalRequestForJobsCode1,DATABASE::"Approval Entry",AppreqforJob1,0,FALSE);
      AddEventToLibrary(RunWorkflowOnRejectApprovalRequestforJobsCode1,DATABASE::"Approval Entry",RejreqforJob1,0,FALSE);
      AddEventToLibrary(RunWorkflowOnDelegateApprovalRequestForJobsCode1,DATABASE::"Approval Entry",DelegatereqforJob1,0,FALSE);
      // Chris Add Event to Library **EN**

      //MARCUS -
      AddEventToLibrary(RunWorkflowOnSendProdOrderforApprovalCode,DATABASE::"Production Order",SendApprovalRequestProd,0,FALSE);
      AddEventToLibrary(RunWorkflowOnApproveApprovalRequestForProdOrderCode,DATABASE::"Approval Entry",AppReqForProd,0,FALSE);
      AddEventToLibrary(RunWorkflowOnRejectApprovalRequestforProdOrderCode,DATABASE::"Approval Entry",RejReqForProd,0,FALSE);
      AddEventToLibrary(RunWorkflowOnDelegateApprovalRequestforProdOrderCode,DATABASE::"Approval Entry", DelegateReqForProd,0,FALSE);
      //MARCUS +

      OnAddWorkflowEventsToLibrary;
      OnAddWorkflowTableRelationsToLibrary;
    END;

    LOCAL PROCEDURE AddEventPredecessors@67(EventFunctionName@1001 : Code[128]);
    BEGIN
      CASE EventFunctionName OF
        RunWorkflowOnAfterPostPurchaseDocCode:
          AddEventPredecessor(RunWorkflowOnAfterPostPurchaseDocCode,RunWorkflowOnAfterReleasePurchaseDocCode);
        RunWorkflowOnCancelIncomingDocApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelIncomingDocApprovalRequestCode,RunWorkflowOnSendIncomingDocForApprovalCode);
        RunWorkflowOnCancelPurchaseApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelPurchaseApprovalRequestCode,RunWorkflowOnSendPurchaseDocForApprovalCode);
        RunWorkflowOnCancelSalesApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelSalesApprovalRequestCode,RunWorkflowOnSendSalesDocForApprovalCode);
        RunWorkflowOnCancelCustomerApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelCustomerApprovalRequestCode,RunWorkflowOnSendCustomerForApprovalCode);
        RunWorkflowOnCancelVendorApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelVendorApprovalRequestCode,RunWorkflowOnSendVendorForApprovalCode);
        RunWorkflowOnCancelItemApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelItemApprovalRequestCode,RunWorkflowOnSendItemForApprovalCode);
        RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode,
            RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
        RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode,
            RunWorkflowOnSendGeneralJournalLineForApprovalCode);
        RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode,
            RunWorkflowOnGeneralJournalBatchBalancedCode);
        RunWorkflowOnCustomerCreditLimitExceededCode:
          AddEventPredecessor(RunWorkflowOnCustomerCreditLimitExceededCode,RunWorkflowOnSendSalesDocForApprovalCode);
        RunWorkflowOnCustomerCreditLimitNotExceededCode:
          AddEventPredecessor(RunWorkflowOnCustomerCreditLimitNotExceededCode,RunWorkflowOnSendSalesDocForApprovalCode);
        RunWorkflowOnApproveApprovalRequestCode:
          BEGIN
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendIncomingDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendSalesDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendCustomerForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendVendorForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendItemForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnGeneralJournalBatchBalancedCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendGeneralJournalLineForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnCustomerChangedCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnVendorChangedCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnItemChangedCode);
          END;
        RunWorkflowOnRejectApprovalRequestCode:
          BEGIN
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendIncomingDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendSalesDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendCustomerForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendVendorForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendItemForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnGeneralJournalBatchBalancedCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendGeneralJournalLineForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnCustomerChangedCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnVendorChangedCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnItemChangedCode);
          END;
        RunWorkflowOnDelegateApprovalRequestCode:
          BEGIN
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendIncomingDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendSalesDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendCustomerForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendVendorForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendItemForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnGeneralJournalBatchBalancedCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendGeneralJournalLineForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnCustomerChangedCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnVendorChangedCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnItemChangedCode);
          END;
        RunWorkflowOnGeneralJournalBatchBalancedCode:
          AddEventPredecessor(RunWorkflowOnGeneralJournalBatchBalancedCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
        RunWorkflowOnGeneralJournalBatchNotBalancedCode:
          AddEventPredecessor(RunWorkflowOnGeneralJournalBatchNotBalancedCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
      END;

      OnAddWorkflowEventPredecessorsToLibrary(EventFunctionName);
    END;

    PROCEDURE AddEventToLibrary@14(FunctionName@1001 : Code[128];TableID@1002 : Integer;Description@1003 : Text[250];RequestPageID@1004 : Integer;UsedForRecordChange@1005 : Boolean);
    VAR
      WorkflowEvent@1000 : Record 1520;
    BEGIN
      IF WorkflowEvent.GET(FunctionName) THEN
        EXIT;

      WorkflowEvent.SETRANGE(Description,Description);
      IF NOT WorkflowEvent.ISEMPTY THEN
        ERROR(EventAlreadyExistErr,Description);

      WorkflowEvent.INIT;
      WorkflowEvent."Function Name" := FunctionName;
      WorkflowEvent."Table ID" := TableID;
      WorkflowEvent.Description := Description;
      WorkflowEvent."Request Page ID" := RequestPageID;
      WorkflowEvent."Used for Record Change" := UsedForRecordChange;
      WorkflowEvent.INSERT;

      AddEventPredecessors(WorkflowEvent."Function Name");
    END;

    PROCEDURE AddEventPredecessor@66(FunctionName@1001 : Code[128];PredecessorFunctionName@1002 : Code[128]);
    VAR
      WFEventResponseCombination@1000 : Record 1509;
    BEGIN
      WFEventResponseCombination.INIT;
      WFEventResponseCombination.Type := WFEventResponseCombination.Type::"Event";
      WFEventResponseCombination."Function Name" := FunctionName;
      WFEventResponseCombination."Predecessor Type" := WFEventResponseCombination."Predecessor Type"::"Event";
      WFEventResponseCombination."Predecessor Function Name" := PredecessorFunctionName;
      IF WFEventResponseCombination.INSERT THEN;
    END;

    [Integration]
    LOCAL PROCEDURE OnAddWorkflowEventsToLibrary@3();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAddWorkflowEventPredecessorsToLibrary@70(EventFunctionName@1000 : Code[128]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAddWorkflowTableRelationsToLibrary@71();
    BEGIN
    END;

    PROCEDURE RunWorkflowOnAfterInsertIncomingDocumentCode@15() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterInsertIncomingDocument'));
    END;

    PROCEDURE RunWorkflowOnAfterReleaseIncomingDocCode@79() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterReleaseIncomingDoc'));
    END;

    PROCEDURE RunWorkflowOnAfterCreateDocFromIncomingDocSuccessCode@80() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterCreateDocFromIncomingDocSuccess'));
    END;

    PROCEDURE RunWorkflowOnAfterCreateDocFromIncomingDocFailCode@81() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterCreateDocFromIncomingDocFail'));
    END;

    PROCEDURE RunWorkflowOnAfterReadyForOCRIncomingDocCode@69() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterreadyforOCRIncomingDoc'));
    END;

    PROCEDURE RunWorkflowOnAfterSendToOCRIncomingDocCode@82() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterSendToOCRIncomingDoc'));
    END;

    PROCEDURE RunWorkflowOnAfterReceiveFromOCRIncomingDocCode@83() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterReceiveFromOCRIncomingDoc'));
    END;

    PROCEDURE RunWorkflowOnAfterReceiveFromDocExchIncomingDocCode@84() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterReceiveFromDocExchIncomingDoc'));
    END;

    PROCEDURE RunWorkflowOnSendPurchaseDocForApprovalCode@16() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendPurchaseDocForApproval'));
    END;

    PROCEDURE RunWorkflowOnSendIncomingDocForApprovalCode@12() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendIncomingDocForApproval'));
    END;

    PROCEDURE RunWorkflowOnCancelIncomingDocApprovalRequestCode@160() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelIncomingDocApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnCancelPurchaseApprovalRequestCode@22() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelPurchaseApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnAfterReleasePurchaseDocCode@29() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterReleasePurchaseDoc'));
    END;

    PROCEDURE RunWorkflowOnSendSalesDocForApprovalCode@17() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendSalesDocForApproval'));
    END;

    PROCEDURE RunWorkflowOnCancelSalesApprovalRequestCode@32() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelSalesApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnAfterReleaseSalesDocCode@4() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterReleaseSalesDoc'));
    END;

    PROCEDURE RunWorkflowOnAfterPostPurchaseDocCode@19() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterPostPurchaseDoc'));
    END;

    PROCEDURE RunWorkflowOnAfterInsertGeneralJournalLineCode@20() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterInsertGeneralJournalLine'));
    END;

    PROCEDURE RunWorkflowOnApproveApprovalRequestCode@21() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnApproveApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnDelegateApprovalRequestCode@23() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnDelegateApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnRejectApprovalRequestCode@24() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnRejectApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnSendOverdueNotificationsCode@27() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendOverdueNotifications'));
    END;

    PROCEDURE RunWorkflowOnCustomerCreditLimitExceededCode@35() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCustomerCreditLimitExceeded'));
    END;

    PROCEDURE RunWorkflowOnCustomerCreditLimitNotExceededCode@36() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCustomerCreditLimitNotExceeded'));
    END;

    PROCEDURE RunWorkflowOnSendCustomerForApprovalCode@34() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendCustomerForApproval'));
    END;

    PROCEDURE RunWorkflowOnSendVendorForApprovalCode@45() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendVendorForApproval'));
    END;

    PROCEDURE RunWorkflowOnSendItemForApprovalCode@48() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendItemForApproval'));
    END;

    PROCEDURE RunWorkflowOnCancelCustomerApprovalRequestCode@40() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelCustomerApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnCancelVendorApprovalRequestCode@62() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelVendorApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnCancelItemApprovalRequestCode@63() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelItemApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnSendGeneralJournalBatchForApprovalCode@51() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendGeneralJournalBatchForApproval'));
    END;

    PROCEDURE RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode@161() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelGeneralJournalBatchApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnSendGeneralJournalLineForApprovalCode@52() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendGeneralJournalLineForApproval'));
    END;

    PROCEDURE RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode@47() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelGeneralJournalLineApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnGeneralJournalBatchBalancedCode@57() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnGeneralJournalBatchBalanced'));
    END;

    PROCEDURE RunWorkflowOnGeneralJournalBatchNotBalancedCode@58() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnGeneralJournalBatchNotBalanced'));
    END;

    PROCEDURE RunWorkflowOnBinaryFileAttachedCode@53() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnBinaryFileAttached'));
    END;

    PROCEDURE RunWorkflowOnCustomerChangedCode@50() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCustomerChangedCode'));
    END;

    PROCEDURE RunWorkflowOnVendorChangedCode@49() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnVendorChangedCode'));
    END;

    PROCEDURE RunWorkflowOnItemChangedCode@54() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnItemChangedCode'));
    END;

    PROCEDURE RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocSuccessCode@73() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocSuccessCode'));
    END;

    PROCEDURE RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocFailCode@92() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterCreateGenJnlLineFromIncomingDoFailCode'));
    END;

    [EventSubscriber(Table,130,OnAfterInsertEvent)]
    PROCEDURE RunWorkflowOnAfterInsertIncomingDocument@2(VAR Rec@1000 : Record 130;RunTrigger@1001 : Boolean);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterInsertIncomingDocumentCode,Rec);
    END;

    [EventSubscriber(Codeunit,1535,OnSendPurchaseDocForApproval)]
    PROCEDURE RunWorkflowOnSendPurchaseDocForApproval@1(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendPurchaseDocForApprovalCode,PurchaseHeader);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelPurchaseApprovalRequest)]
    PROCEDURE RunWorkflowOnCancelPurchaseApprovalRequest@8(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelPurchaseApprovalRequestCode,PurchaseHeader);
    END;

    [EventSubscriber(Codeunit,1535,OnSendIncomingDocForApproval)]
    PROCEDURE RunWorkflowOnSendIncomingDocForApproval@88(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendIncomingDocForApprovalCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelIncomingDocApprovalRequest)]
    PROCEDURE RunWorkflowOnCancelIncomingDocApprovalRequest@89(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelIncomingDocApprovalRequestCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,415,OnAfterReleasePurchaseDoc)]
    PROCEDURE RunWorkflowOnAfterReleasePurchaseDoc@28(VAR PurchaseHeader@1000 : Record 38;PreviewMode@1001 : Boolean);
    BEGIN
      IF NOT PreviewMode THEN
        WorkflowManagement.HandleEvent(RunWorkflowOnAfterReleasePurchaseDocCode,PurchaseHeader);
    END;

    [EventSubscriber(Codeunit,1535,OnSendSalesDocForApproval)]
    PROCEDURE RunWorkflowOnSendSalesDocForApproval@18(VAR SalesHeader@1000 : Record 36);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendSalesDocForApprovalCode,SalesHeader);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelSalesApprovalRequest)]
    PROCEDURE RunWorkflowOnCancelSalesApprovalRequest@33(VAR SalesHeader@1000 : Record 36);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelSalesApprovalRequestCode,SalesHeader);
    END;

    [EventSubscriber(Codeunit,414,OnAfterReleaseSalesDoc)]
    PROCEDURE RunWorkflowOnAfterReleaseSalesDoc@9(VAR SalesHeader@1000 : Record 36;PreviewMode@1001 : Boolean);
    BEGIN
      IF NOT PreviewMode THEN
        WorkflowManagement.HandleEvent(RunWorkflowOnAfterReleaseSalesDocCode,SalesHeader);
    END;

    [EventSubscriber(Codeunit,132,OnAfterReleaseIncomingDoc)]
    PROCEDURE RunWorkflowOnAfterReleaseIncomingDoc@90(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterReleaseIncomingDocCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,132,OnAfterCreateDocFromIncomingDocSuccess)]
    PROCEDURE RunWorkflowOnAfterCreateDocFromIncomingDocSuccess@77(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterCreateDocFromIncomingDocSuccessCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,132,OnAfterCreateDocFromIncomingDocFail)]
    PROCEDURE RunWorkflowOnAfterCreateDocFromIncomingDocFail@78(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterCreateDocFromIncomingDocFailCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,133,OnAfterIncomingDocReadyForOCR)]
    PROCEDURE RunWorkflowOnAfterIncomingDocReadyForOCR@68(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterReadyForOCRIncomingDocCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,133,OnAfterIncomingDocSentToOCR)]
    PROCEDURE RunWorkflowOnAfterIncomingDocSentToOCR@85(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterSendToOCRIncomingDocCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,133,OnAfterIncomingDocReceivedFromOCR)]
    PROCEDURE RunWorkflowOnAfterIncomingDocReceivedFromOCR@86(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterReceiveFromOCRIncomingDocCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,1410,OnAfterIncomingDocReceivedFromDocExch)]
    PROCEDURE RunWorkflowOnAfterIncomingDocReceivedFromDocExch@87(VAR IncomingDocument@1001 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterReceiveFromDocExchIncomingDocCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,90,OnAfterPostPurchaseDoc)]
    PROCEDURE RunWorkflowOnAfterPostPurchaseDoc@5(VAR PurchaseHeader@1000 : Record 38;VAR GenJnlPostLine@1001 : Codeunit 12;PurchRcpHdrNo@1002 : Code[20];RetShptHdrNo@1003 : Code[20];PurchInvHdrNo@1004 : Code[20];PurchCrMemoHdrNo@1005 : Code[20]);
    VAR
      PurchInvHeader@1006 : Record 122;
    BEGIN
      CASE PurchaseHeader."Document Type" OF
        PurchaseHeader."Document Type"::Order,PurchaseHeader."Document Type"::Invoice:
          BEGIN
            IF PurchInvHeader.GET(PurchInvHdrNo) THEN
              WorkflowManagement.HandleEvent(RunWorkflowOnAfterPostPurchaseDocCode,PurchInvHeader);
          END;
      END;
    END;

    [EventSubscriber(Table,81,OnAfterInsertEvent)]
    PROCEDURE RunWorkflowOnAfterInsertGeneralJournalLine@6(VAR Rec@1000 : Record 81;RunTrigger@1001 : Boolean);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterInsertGeneralJournalLineCode,Rec);
    END;

    [EventSubscriber(Codeunit,1535,OnApproveApprovalRequest)]
    PROCEDURE RunWorkflowOnApproveApprovalRequest@7(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      WorkflowManagement.HandleEventOnKnownWorkflowInstance(RunWorkflowOnApproveApprovalRequestCode,
        ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");
    END;

    [EventSubscriber(Codeunit,1535,OnDelegateApprovalRequest)]
    PROCEDURE RunWorkflowOnDelegateApprovalRequest@10(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      WorkflowManagement.HandleEventOnKnownWorkflowInstance(RunWorkflowOnDelegateApprovalRequestCode,
        ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");
    END;

    [EventSubscriber(Codeunit,1535,OnRejectApprovalRequest)]
    PROCEDURE RunWorkflowOnRejectApprovalRequest@11(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      WorkflowManagement.HandleEventOnKnownWorkflowInstance(RunWorkflowOnRejectApprovalRequestCode,
        ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");
    END;

    [EventSubscriber(Report,1509,OnSendOverdueNotifications)]
    PROCEDURE RunWorkflowOnSendOverdueNotifications@26();
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      ApprovalEntry.INIT;
      WorkflowManagement.HandleEvent(RunWorkflowOnSendOverdueNotificationsCode,ApprovalEntry);
    END;

    [EventSubscriber(Table,36,OnCustomerCreditLimitExceeded)]
    PROCEDURE RunWorkflowOnCustomerCreditLimitExceeded@38(VAR Sender@1000 : Record 36);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCustomerCreditLimitExceededCode,Sender);
    END;

    [EventSubscriber(Table,36,OnCustomerCreditLimitNotExceeded)]
    PROCEDURE RunWorkflowOnCustomerCreditLimitNotExceeded@37(VAR Sender@1000 : Record 36);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCustomerCreditLimitNotExceededCode,Sender);
    END;

    [EventSubscriber(Codeunit,1535,OnSendCustomerForApproval)]
    PROCEDURE RunWorkflowOnSendCustomerForApproval@39(Customer@1003 : Record 18);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendCustomerForApprovalCode,Customer);
    END;

    [EventSubscriber(Codeunit,1535,OnSendVendorForApproval)]
    PROCEDURE RunWorkflowOnSendVendorForApproval@59(Vendor@1003 : Record 23);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendVendorForApprovalCode,Vendor);
    END;

    [EventSubscriber(Codeunit,1535,OnSendItemForApproval)]
    PROCEDURE RunWorkflowOnSendItemForApproval@60(Item@1003 : Record 27);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendItemForApprovalCode,Item);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelCustomerApprovalRequest)]
    PROCEDURE RunWorkflowOnCancelCustomerApprovalRequest@41(Customer@1003 : Record 18);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelCustomerApprovalRequestCode,Customer);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelVendorApprovalRequest)]
    PROCEDURE RunWorkflowOnCancelVendorApprovalRequest@64(Vendor@1003 : Record 23);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelVendorApprovalRequestCode,Vendor);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelItemApprovalRequest)]
    PROCEDURE RunWorkflowOnCancelItemApprovalRequest@65(Item@1003 : Record 27);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelItemApprovalRequestCode,Item);
    END;

    [EventSubscriber(Codeunit,1535,OnSendGeneralJournalBatchForApproval)]
    PROCEDURE RunWorkflowOnSendGeneralJournalBatchForApproval@56(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendGeneralJournalBatchForApprovalCode,GenJournalBatch);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelGeneralJournalBatchApprovalRequest)]
    PROCEDURE RunWorkflowOnCancelGeneralJournalBatchApprovalRequest@55(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode,GenJournalBatch);
    END;

    [EventSubscriber(Codeunit,1535,OnSendGeneralJournalLineForApproval)]
    PROCEDURE RunWorkflowOnSendGeneralJournalLineForApproval@46(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendGeneralJournalLineForApprovalCode,GenJournalLine);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelGeneralJournalLineApprovalRequest)]
    PROCEDURE RunWorkflowOnCancelGeneralJournalLineApprovalRequest@43(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode,GenJournalLine);
    END;

    [EventSubscriber(Table,232,OnGeneralJournalBatchBalanced)]
    PROCEDURE RunWorkflowOnGeneralJournalBatchBalanced@42(VAR Sender@1000 : Record 232);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnGeneralJournalBatchBalancedCode,Sender);
    END;

    [EventSubscriber(Table,232,OnGeneralJournalBatchNotBalanced)]
    PROCEDURE RunWorkflowOnGeneralJournalBatchNotBalanced@44(VAR Sender@1000 : Record 232);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnGeneralJournalBatchNotBalancedCode,Sender);
    END;

    [EventSubscriber(Table,133,OnAttachBinaryFile)]
    PROCEDURE RunWorkflowOnBinaryFileAttached@25(VAR Sender@1000 : Record 133);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnBinaryFileAttachedCode,Sender);
    END;

    [EventSubscriber(Table,18,OnAfterModifyEvent)]
    PROCEDURE RunWorkflowOnCustomerChanged@30(VAR Rec@1000 : Record 18;VAR xRec@1001 : Record 18;RunTrigger@1002 : Boolean);
    BEGIN
      IF FORMAT(xRec) <> FORMAT(Rec) THEN
        WorkflowManagement.HandleEventWithxRec(RunWorkflowOnCustomerChangedCode,Rec,xRec);
    END;

    [EventSubscriber(Table,23,OnAfterModifyEvent)]
    PROCEDURE RunWorkflowOnVendorChanged@31(VAR Rec@1000 : Record 23;VAR xRec@1001 : Record 23;RunTrigger@1002 : Boolean);
    BEGIN
      IF FORMAT(xRec) <> FORMAT(Rec) THEN
        WorkflowManagement.HandleEventWithxRec(RunWorkflowOnVendorChangedCode,Rec,xRec);
    END;

    [EventSubscriber(Table,27,OnAfterModifyEvent)]
    PROCEDURE RunWorkflowOnItemChanged@61(VAR Rec@1000 : Record 27;VAR xRec@1001 : Record 27;RunTrigger@1002 : Boolean);
    VAR
      GenJnlPostPreview@1003 : Codeunit 19;
    BEGIN
      IF GenJnlPostPreview.IsActive THEN
        EXIT;

      IF FORMAT(xRec) <> FORMAT(Rec) THEN
        WorkflowManagement.HandleEventWithxRec(RunWorkflowOnItemChangedCode,Rec,xRec);
    END;

    [EventSubscriber(Table,130,OnAfterCreateGenJnlLineFromIncomingDocSuccess)]
    PROCEDURE RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocSuccess@75(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocSuccessCode,IncomingDocument);
    END;

    [EventSubscriber(Table,130,OnAfterCreateGenJnlLineFromIncomingDocFail)]
    PROCEDURE RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocFail@72(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterCreateGenJnlLineFromIncomingDocFailCode,IncomingDocument);

      //Chris Events added **ST**
    END;

    PROCEDURE RunWorkflowOnSendJobforApprovalCode1@1000000000() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendJobforApproval1'));
    END;

    [EventSubscriber(Codeunit,1535,OnSendJobsforApproval)]
    PROCEDURE RunWorkflowOnSendJobforApproval1@1000000001(VAR Job@1000000000 : Record 167);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendJobforApprovalCode1,Job);
    END;

    PROCEDURE RunWorkflowOnApproveApprovalRequestForJobsCode1@1000000002() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnApproveApprovalRequestforJobs1'));
    END;

    [EventSubscriber(Codeunit,1535,OnApproveApprovalRequest)]
    PROCEDURE RunWorkflowOnApproveApprovalRequestforJobs1@1000000003(VAR ApprovalEntry@1000000000 : Record 454);
    BEGIN
      WorkflowManagement.HandleEventOnKnownWorkflowInstance(RunWorkflowOnApproveApprovalRequestForJobsCode1,ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");
    END;

    PROCEDURE RunWorkflowOnRejectApprovalRequestforJobsCode1@1000000004() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnRejectApprovalRequestforJobs1'));
    END;

    [EventSubscriber(Codeunit,1535,OnRejectApprovalRequest)]
    PROCEDURE RunWorkflowOnRejectApprovalRequestforJobs1@1000000005(VAR ApprovalEntry@1000000000 : Record 454);
    BEGIN
      WorkflowManagement.HandleEventOnKnownWorkflowInstance(RunWorkflowOnRejectApprovalRequestforJobsCode1,ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");
    END;

    PROCEDURE RunWorkflowOnDelegateApprovalRequestForJobsCode1@1000000006() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnDelegateApprovalRequestForJobs1'));
    END;

    [EventSubscriber(Codeunit,1535,OnDelegateApprovalRequest)]
    PROCEDURE RunWorkflowOnDelegateApprovalRequestForJobs1@1000000007(VAR ApprovalEntry@1000000000 : Record 454);
    BEGIN
      WorkflowManagement.HandleEventOnKnownWorkflowInstance(RunWorkflowOnDelegateApprovalRequestForJobsCode1,ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");

      //Chris Events added **EN**

      //MARCUS -
    END;

    PROCEDURE RunWorkflowOnSendProdOrderforApprovalCode@1000000008() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendProdOrderforApproval'));
    END;

    [EventSubscriber(Codeunit,1535,OnSendProdOrderforApproval)]
    PROCEDURE RunWorkflowOnSendProdOrderforApproval@1000000010(VAR ProdOrder@1000000000 : Record 5405);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendProdOrderforApprovalCode,ProdOrder);
    END;

    PROCEDURE RunWorkflowOnApproveApprovalRequestForProdOrderCode@1000000027() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnApproveApprovalRequestForProdOrder'));
    END;

    [EventSubscriber(Codeunit,1535,OnApproveApprovalRequest)]
    PROCEDURE RunWorkflowOnApproveApprovalRequestforProdOrder@1000000013(VAR ApprovalEntry@1000000000 : Record 454);
    BEGIN
      WorkflowManagement.HandleEventOnKnownWorkflowInstance(RunWorkflowOnApproveApprovalRequestForProdOrderCode,ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");
    END;

    PROCEDURE RunWorkflowOnRejectApprovalRequestforProdOrderCode@1000000014() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnRejectApprovalRequestforProdOrder'));
    END;

    [EventSubscriber(Codeunit,1535,OnRejectApprovalRequest)]
    PROCEDURE RunWorkflowOnRejectApprovalRequestforProdOrder@1000000015(VAR ApprovalEntry@1000000000 : Record 454);
    BEGIN
      WorkflowManagement.HandleEventOnKnownWorkflowInstance(RunWorkflowOnRejectApprovalRequestforProdOrderCode,ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");
    END;

    PROCEDURE RunWorkflowOnDelegateApprovalRequestforProdOrderCode@1000000016() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnDelegateApprovalRequestforProdOrder'));
    END;

    [EventSubscriber(Codeunit,1535,OnDelegateApprovalRequest)]
    PROCEDURE RunWorkflowOnDelegateApprovalRequestforProdOrder@1000000017(VAR ApprovalEntry@1000000000 : Record 454);
    BEGIN
      WorkflowManagement.HandleEventOnKnownWorkflowInstance(RunWorkflowOnDelegateApprovalRequestforProdOrderCode,ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");

      //MARCUS +
    END;

    BEGIN
    {
      //Chris Events added
      //Add Event to Library
    }
    END.
  }
}

OBJECT Codeunit 1521 Workflow Response Handling
{
  OBJECT-PROPERTIES
  {
    Date=16/03/20;
    Time=15:48:38;
    Modified=Yes;
    Version List=NAVW110.00.00.18197,WF;
  }
  PROPERTIES
  {
    Permissions=TableData 36=rm,
                TableData 38=rm,
                TableData 1511=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NotSupportedResponseErr@1004 : TextConst 'ENU=Response %1 is not supported in the workflow.;ENG=Response %1 is not supported in the workflow.';
      CreateNotifEntryTxt@1014 : TextConst '@@@=Create a notification for NAVUser.;ENU=Create a notification for %1.;ENG=Create a notification for %1.';
      CreatePmtLineAsyncTxt@1013 : TextConst '@@@=Create a payment journal line in the background for journal template GENERAL and journal batch DEFAULT.;ENU=Create a payment journal line in the background for journal template %1 and journal batch %2.;ENG=Create a payment journal line in the background for journal template %1 and journal batch %2.';
      CreatePmtLineTxt@1000 : TextConst '@@@=Create a payment journal line for journal template GENERAL and journal batch DEFAULT.;ENU=Create a payment journal line for journal template %1 and journal batch %2.;ENG=Create a payment journal line for journal template %1 and journal batch %2.';
      DoNothingTxt@1012 : TextConst 'ENU=Do nothing.;ENG=Do nothing.';
      CreateApprovalRequestsTxt@1030 : TextConst '@@@=Create an approval request for the record using approver type Approver and approver limit type Direct Approver.;ENU=Create an approval request for the record using approver type %1 and %2.;ENG=Create an approval request for the record using approver type %1 and %2.';
      CreateApprovalWorkflowGroupTxt@1028 : TextConst '@@@="%1 = Workflow user group code";ENU=workflow user group code %1;ENG=workflow user group code %1';
      CreateApprovalApprovalLimitTxt@1027 : TextConst '@@@="%1 = Approval limit type";ENU=approver limit type %1;ENG=approver limit type %1';
      GetApprovalCommentTxt@1010 : TextConst 'ENU=Open Approval Comments page.;ENG=Open Approval Comments page.';
      OpenDocumentTxt@1009 : TextConst 'ENU=Reopen the document.;ENG=Reopen the document.';
      ReleaseDocumentTxt@1008 : TextConst 'ENU=Release the document.;ENG=Release the document.';
      SendApprReqForApprovalTxt@1007 : TextConst 'ENU=Send approval request for the record and create a notification.;ENG=Send approval request for the record and create a notification.';
      ApproveAllApprReqTxt@1038 : TextConst 'ENU=Approve the approval request for the record.;ENG=Approve the approval request for the record.';
      RejectAllApprReqTxt@1006 : TextConst 'ENU=Reject the approval request for the record and create a notification.;ENG=Reject the approval request for the record and create a notification.';
      CancelAllAppReqTxt@1005 : TextConst 'ENU=Cancel the approval request for the record and create a notification.;ENG=Cancel the approval request for the record and create a notification.';
      PostDocumentTxt@1015 : TextConst 'ENU=Post the sales or purchase document.;ENG=Post the sales or purchase document.';
      BackgroundDocumentPostTxt@1016 : TextConst 'ENU=Post the sales or purchase document in the background.;ENG=Post the sales or purchase document in the background.';
      BackgroundOCRReceiveIncomingDocTxt@1043 : TextConst 'ENU=Receive the incoming document from OCR in the background.;ENG=Receive the incoming document from OCR in the background.';
      BackgroundOCRSendIncomingDocTxt@1044 : TextConst 'ENU=Send the incoming document to OCR in the background.;ENG=Send the incoming document to OCR in the background.';
      CheckCustomerCreditLimitTxt@1003 : TextConst 'ENU=Check if the customer credit limit is exceeded.;ENG=Check if the customer credit limit is exceeded.';
      CheckGeneralJournalBatchBalanceTxt@1032 : TextConst 'ENU=Check if the general journal batch is balanced.;ENG=Check if the general journal batch is balanced.';
      CreateApproveApprovalRequestAutomaticallyTxt@1021 : TextConst 'ENU=Create and approve an approval request automatically.;ENG=Create and approve an approval request automatically.';
      SetStatusToPendingApprovalTxt@1025 : TextConst 'ENU=Set document status to Pending Approval.;ENG=Set document status to Pending Approval.';
      UserIDTok@1019 : TextConst 'ENU=<User>;ENG=<User>';
      TemplateTok@1018 : TextConst 'ENU=<Template>;ENG=<Template>';
      GenJnlBatchTok@1017 : TextConst 'ENU=<Batch>;ENG=<Batch>';
      UnsupportedRecordTypeErr@1020 : TextConst '@@@=Record type Customer is not supported by this workflow response.;ENU=Record type %1 is not supported by this workflow response.;ENG=Record type %1 is not supported by this workflow response.';
      CreateOverdueNotifTxt@1022 : TextConst 'ENU=Create notification for overdue approval requests.;ENG=Create notification for overdue approval requests.';
      ResponseAlreadyExistErr@1023 : TextConst 'ENU=A response with description %1 already exists.;ENG=A response with description %1 already exists.';
      ApproverTypeTok@1002 : TextConst 'ENU=<Approver Type>;ENG=<Approver Type>';
      ApproverLimitTypeTok@1024 : TextConst 'ENU=<Approver Limit Type>;ENG=<Approver Limit Type>';
      WorkflowUserGroupTok@1011 : TextConst 'ENU=<Workflow User Group Code>;ENG=<Workflow User Group Code>';
      ShowMessageTxt@1033 : TextConst '@@@="%1 = The message to be shown";ENU=Show message "%1".;ENG=Show message "%1".';
      ShowMessagePlaceholderMsg@1034 : TextConst '@@@={Locked};ENU=%1;ENG=%1';
      MessageTok@1029 : TextConst 'ENU=<Message>;ENG=<Message>';
      RestrictRecordUsageTxt@1035 : TextConst 'ENU=Add record restriction.;ENG=Add record restriction.';
      AllowRecordUsageTxt@1036 : TextConst 'ENU=Remove record restriction.;ENG=Remove record restriction.';
      RestrictUsageDetailsTxt@1037 : TextConst '@@@=The restriction was imposed by the PIW workflow, Purchase Invoice Workflow.;ENU=The restriction was imposed by the %1 workflow, %2.;ENG=The restriction was imposed by the %1 workflow, %2.';
      MarkReadyForOCRTxt@1031 : TextConst 'ENU=Mark the incoming document ready for OCR.;ENG=Mark the incoming document ready for OCR.';
      SendToOCRTxt@1040 : TextConst 'ENU=Send the incoming document to OCR.;ENG=Send the incoming document to OCR.';
      ReceiveFromOCRTxt@1042 : TextConst 'ENU=Receive the incoming document from OCR.;ENG=Receive the incoming document from OCR.';
      CreateDocFromIncomingDocTxt@1045 : TextConst 'ENU=Create a purchase document from an incoming document.;ENG=Create a purchase document from an incoming document.';
      CreateReleasedDocFromIncomingDocTxt@1047 : TextConst 'ENU=Create a released purchase document from an incoming document.;ENG=Create a released purchase document from an incoming document.';
      CreateJournalFromIncomingDocTxt@1046 : TextConst 'ENU=Create journal line from incoming document.;ENG=Create journal line from incoming document.';
      RevertRecordValueTxt@1026 : TextConst '@@@=Revert the value of the Credit Limit (LCY) field on the record and save the change.;ENU=Revert the value of the %1 field on the record and save the change.;ENG=Revert the value of the %1 field on the record and save the change.';
      RevertRecordFieldValueTok@1039 : TextConst 'ENU=<Field>;ENG=<Field>';
      ApplyNewValuesTxt@1041 : TextConst 'ENU=Apply the new values.;ENG=Apply the new values.';
      DiscardNewValuesTxt@1001 : TextConst 'ENU=Discard the new values.;ENG=Discard the new values.';
      SetStatusToPendingAppForJobTxtCh@1000000000 : TextConst 'ENU=Set document status to Pending Approval for Job;ENG=Set document status to Pending Approval for Job';
      OpenJobTxtCh@1000000002 : TextConst 'ENU=Reopen the Job;ENG=Reopen the Job';
      ReleaseJobTxtCh@1000000001 : TextConst 'ENU=Release the Job;ENG=Release the Job';

    PROCEDURE CreateResponsesLibrary@25();
    BEGIN
      AddResponseToLibrary(DoNothingCode,0,DoNothingTxt,'GROUP 0');
      AddResponseToLibrary(CreateNotificationEntryCode,0,CreateNotifEntryTxt,'GROUP 3');
      AddResponseToLibrary(ReleaseDocumentCode,0,ReleaseDocumentTxt,'GROUP 0');
      AddResponseToLibrary(OpenDocumentCode,0,OpenDocumentTxt,'GROUP 0');
      AddResponseToLibrary(SetStatusToPendingApprovalCode,0,SetStatusToPendingApprovalTxt,'GROUP 0');
      AddResponseToLibrary(GetApprovalCommentCode,0,GetApprovalCommentTxt,'GROUP 0');
      AddResponseToLibrary(CreateApprovalRequestsCode,0,CreateApprovalRequestsTxt,'GROUP 5');
      AddResponseToLibrary(SendApprovalRequestForApprovalCode,0,SendApprReqForApprovalTxt,'GROUP 2');
      AddResponseToLibrary(ApproveAllApprovalRequestsCode,0,ApproveAllApprReqTxt,'GROUP 0');
      AddResponseToLibrary(RejectAllApprovalRequestsCode,0,RejectAllApprReqTxt,'GROUP 2');
      AddResponseToLibrary(CancelAllApprovalRequestsCode,0,CancelAllAppReqTxt,'GROUP 2');
      AddResponseToLibrary(PostDocumentCode,0,PostDocumentTxt,'GROUP 0');
      AddResponseToLibrary(PostDocumentAsyncCode,0,BackgroundDocumentPostTxt,'GROUP 0');

      AddResponseToLibrary(CreatePmtLineForPostedPurchaseDocAsyncCode,DATABASE::"Purch. Inv. Header",CreatePmtLineAsyncTxt,'GROUP 1');
      AddResponseToLibrary(CreatePmtLineForPostedPurchaseDocCode,DATABASE::"Purch. Inv. Header",CreatePmtLineTxt,'GROUP 1');

      AddResponseToLibrary(CreateOverdueNotificationCode,0,CreateOverdueNotifTxt,'GROUP 2');
      AddResponseToLibrary(CheckCustomerCreditLimitCode,0,CheckCustomerCreditLimitTxt,'GROUP 0');
      AddResponseToLibrary(CheckGeneralJournalBatchBalanceCode,0,CheckGeneralJournalBatchBalanceTxt,'GROUP 0');
      AddResponseToLibrary(CreateAndApproveApprovalRequestAutomaticallyCode,0,CreateApproveApprovalRequestAutomaticallyTxt,'GROUP 0');
      AddResponseToLibrary(ShowMessageCode,0,ShowMessageTxt,'GROUP 4');
      AddResponseToLibrary(RestrictRecordUsageCode,0,RestrictRecordUsageTxt,'GROUP 0');
      AddResponseToLibrary(AllowRecordUsageCode,0,AllowRecordUsageTxt,'GROUP 0');

      AddResponseToLibrary(GetMarkReadyForOCRCode,0,MarkReadyForOCRTxt,'GROUP 0');
      AddResponseToLibrary(GetSendToOCRCode,0,SendToOCRTxt,'GROUP 0');
      AddResponseToLibrary(GetReceiveFromOCRCode,0,ReceiveFromOCRTxt,'GROUP 0');
      AddResponseToLibrary(GetSendToOCRAsyncCode,0,BackgroundOCRSendIncomingDocTxt,'GROUP 0');
      AddResponseToLibrary(GetReceiveFromOCRAsyncCode,0,BackgroundOCRReceiveIncomingDocTxt,'GROUP 0');
      AddResponseToLibrary(GetSendToOCRCode,0,SendToOCRTxt,'GROUP 0');
      AddResponseToLibrary(GetCreateDocFromIncomingDocCode,0,CreateDocFromIncomingDocTxt,'GROUP 0');
      AddResponseToLibrary(GetCreateReleasedDocFromIncomingDocCode,0,CreateReleasedDocFromIncomingDocTxt,'GROUP 0');
      AddResponseToLibrary(GetCreateJournalFromIncomingDocCode,0,CreateJournalFromIncomingDocTxt,'GROUP 0');

      AddResponseToLibrary(RevertValueForFieldCode,0,RevertRecordValueTxt,'GROUP 6');
      AddResponseToLibrary(ApplyNewValuesCode,0,ApplyNewValuesTxt,'GROUP 7');
      AddResponseToLibrary(DiscardNewValuesCode,0,DiscardNewValuesTxt,'GROUP 0');


      OnAddWorkflowResponsesToLibrary;
    END;

    LOCAL PROCEDURE AddResponsePredecessors@33(ResponseFunctionName@1002 : Code[128]);
    VAR
      WorkflowEventHandling@1000 : Codeunit 1520;
    BEGIN
      CASE ResponseFunctionName OF
        SetStatusToPendingApprovalCode:
          BEGIN
            AddResponsePredecessor(SetStatusToPendingApprovalCode,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddResponsePredecessor(SetStatusToPendingApprovalCode,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
            AddResponsePredecessor(SetStatusToPendingApprovalCode,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode);
            AddResponsePredecessor(
              SetStatusToPendingApprovalCode,WorkflowEventHandling.RunWorkflowOnCustomerCreditLimitNotExceededCode);
          END;
        CreateApprovalRequestsCode:
          BEGIN
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCustomerChangedCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendVendorForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnVendorChangedCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnItemChangedCode);
            AddResponsePredecessor(
              CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode);
            AddResponsePredecessor(
              CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnGeneralJournalBatchBalancedCode);
          END;
        SendApprovalRequestForApprovalCode:
          BEGIN
            AddResponsePredecessor(
              SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
            AddResponsePredecessor(
              SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnCustomerChangedCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendVendorForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnVendorChangedCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnItemChangedCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,
              WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,
              WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
            AddResponsePredecessor(
              SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnGeneralJournalBatchBalancedCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnDelegateApprovalRequestCode);
          END;
        ReleaseDocumentCode:
          BEGIN
            AddResponsePredecessor(ReleaseDocumentCode,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode);
            AddResponsePredecessor(ReleaseDocumentCode,WorkflowEventHandling.RunWorkflowOnCustomerCreditLimitNotExceededCode);
          END;
        RejectAllApprovalRequestsCode:
          AddResponsePredecessor(RejectAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnRejectApprovalRequestCode);
        OpenDocumentCode:
          BEGIN
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnRejectApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelPurchaseApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelSalesApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelIncomingDocApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelCustomerApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelVendorApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelItemApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode);
          END;
        CancelAllApprovalRequestsCode:
          BEGIN
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelPurchaseApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelSalesApprovalRequestCode);
            AddResponsePredecessor(
              CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelIncomingDocApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelCustomerApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelVendorApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelItemApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,
              WorkflowEventHandling.RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,
              WorkflowEventHandling.RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode);
          END;
        RevertValueForFieldCode:
          BEGIN
            AddResponsePredecessor(RevertValueForFieldCode,WorkflowEventHandling.RunWorkflowOnCustomerChangedCode);
            AddResponsePredecessor(RevertValueForFieldCode,WorkflowEventHandling.RunWorkflowOnVendorChangedCode);
            AddResponsePredecessor(RevertValueForFieldCode,WorkflowEventHandling.RunWorkflowOnItemChangedCode);
          END;
        ApplyNewValuesCode:
          AddResponsePredecessor(ApplyNewValuesCode,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode);
        DiscardNewValuesCode:
          AddResponsePredecessor(DiscardNewValuesCode,WorkflowEventHandling.RunWorkflowOnRejectApprovalRequestCode);
        GetMarkReadyForOCRCode:
          AddResponsePredecessor(GetMarkReadyForOCRCode,WorkflowEventHandling.RunWorkflowOnBinaryFileAttachedCode);
        CreateOverdueNotificationCode:
          AddResponsePredecessor(CreateOverdueNotificationCode,WorkflowEventHandling.RunWorkflowOnSendOverdueNotificationsCode);
        PostDocumentAsyncCode:
          AddResponsePredecessor(PostDocumentAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterReleasePurchaseDocCode);
        PostDocumentCode:
          AddResponsePredecessor(PostDocumentCode,WorkflowEventHandling.RunWorkflowOnAfterReleasePurchaseDocCode);
        CreatePmtLineForPostedPurchaseDocAsyncCode:
          AddResponsePredecessor(
            CreatePmtLineForPostedPurchaseDocAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterPostPurchaseDocCode);
        CreatePmtLineForPostedPurchaseDocCode:
          AddResponsePredecessor(CreatePmtLineForPostedPurchaseDocCode,WorkflowEventHandling.RunWorkflowOnAfterPostPurchaseDocCode);
        CheckGeneralJournalBatchBalanceCode:
          AddResponsePredecessor(CheckGeneralJournalBatchBalanceCode,
            WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
        CheckCustomerCreditLimitCode:
          AddResponsePredecessor(CheckCustomerCreditLimitCode,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
        CreateAndApproveApprovalRequestAutomaticallyCode:
          AddResponsePredecessor(CreateAndApproveApprovalRequestAutomaticallyCode,
            WorkflowEventHandling.RunWorkflowOnCustomerCreditLimitNotExceededCode);
        GetReceiveFromOCRCode:
          AddResponsePredecessor(GetReceiveFromOCRCode,WorkflowEventHandling.RunWorkflowOnAfterSendToOCRIncomingDocCode);
        GetReceiveFromOCRAsyncCode:
          AddResponsePredecessor(GetReceiveFromOCRAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterSendToOCRIncomingDocCode);
        GetSendToOCRCode:
          AddResponsePredecessor(GetSendToOCRCode,WorkflowEventHandling.RunWorkflowOnAfterReadyForOCRIncomingDocCode);
        GetSendToOCRAsyncCode:
          AddResponsePredecessor(GetSendToOCRAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterReadyForOCRIncomingDocCode);
      END;
      OnAddWorkflowResponsePredecessorsToLibrary(ResponseFunctionName);
    END;

    [Integration]
    LOCAL PROCEDURE OnAddWorkflowResponsesToLibrary@1();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAddWorkflowResponsePredecessorsToLibrary@49(ResponseFunctionName@1000 : Code[128]);
    BEGIN
    END;

    PROCEDURE ExecuteResponse@2(VAR Variant@1000 : Variant;ResponseWorkflowStepInstance@1001 : Record 1504;xVariant@1004 : Variant);
    VAR
      WorkflowResponse@1002 : Record 1521;
      WorkflowChangeRecMgt@1007 : Codeunit 1531;
      ResponseExecuted@1003 : Boolean;
    BEGIN
      IF WorkflowResponse.GET(ResponseWorkflowStepInstance."Function Name") THEN
        CASE WorkflowResponse."Function Name" OF
          DoNothingCode:
            DoNothing;
          CreateNotificationEntryCode:
            CreateNotificationEntry(Variant,ResponseWorkflowStepInstance);
          ReleaseDocumentCode:
            ReleaseDocument(Variant);
          OpenDocumentCode:
            OpenDocument(Variant);
          SetStatusToPendingApprovalCode:
            SetStatusToPendingApproval(Variant);
          GetApprovalCommentCode:
            GetApprovalComment(Variant,ResponseWorkflowStepInstance.ID);
          CreateApprovalRequestsCode:
            CreateApprovalRequests(Variant,ResponseWorkflowStepInstance);
          SendApprovalRequestForApprovalCode:
            SendApprovalRequestForApproval(Variant,ResponseWorkflowStepInstance);
          ApproveAllApprovalRequestsCode:
            ApproveAllApprovalRequests(Variant,ResponseWorkflowStepInstance);
          RejectAllApprovalRequestsCode:
            RejectAllApprovalRequests(Variant,ResponseWorkflowStepInstance);
          CancelAllApprovalRequestsCode:
            CancelAllApprovalRequests(Variant,ResponseWorkflowStepInstance);
          PostDocumentCode:
            PostDocument(Variant);
          PostDocumentAsyncCode:
            PostDocumentAsync(Variant);
          CreatePmtLineForPostedPurchaseDocAsyncCode:
            CreatePmtLineForPostedPurchaseDocAsync(ResponseWorkflowStepInstance);
          CreatePmtLineForPostedPurchaseDocCode:
            CreatePmtLineForPostedPurchaseDoc(ResponseWorkflowStepInstance);
          CreateOverdueNotificationCode:
            CreateOverdueNotifications(ResponseWorkflowStepInstance);
          CheckCustomerCreditLimitCode:
            CheckCustomerCreditLimit(Variant);
          CheckGeneralJournalBatchBalanceCode:
            CheckGeneralJournalBatchBalance(Variant);
          CreateAndApproveApprovalRequestAutomaticallyCode:
            CreateAndApproveApprovalRequestAutomatically(Variant,ResponseWorkflowStepInstance);
          ShowMessageCode:
            ShowMessage(ResponseWorkflowStepInstance);
          RestrictRecordUsageCode:
            RestrictRecordUsage(Variant,ResponseWorkflowStepInstance);
          AllowRecordUsageCode:
            AllowRecordUsage(Variant);
          GetMarkReadyForOCRCode:
            MarkReadyForOCR(Variant);
          GetSendToOCRCode:
            SendToOCR(Variant);
          GetSendToOCRAsyncCode:
            SendToOCRAsync(Variant);
          GetReceiveFromOCRCode:
            ReceiveFromOCR(Variant);
          GetReceiveFromOCRAsyncCode:
            ReceiveFromOCRAsync(Variant);
          GetCreateDocFromIncomingDocCode:
            CreateDocFromIncomingDoc(Variant);
          GetCreateReleasedDocFromIncomingDocCode:
            CreateReleasedDocFromIncomingDoc(Variant);
          GetCreateJournalFromIncomingDocCode:
            CreateJournalFromIncomingDoc(Variant);
          RevertValueForFieldCode:
            WorkflowChangeRecMgt.RevertValueForField(Variant,xVariant,ResponseWorkflowStepInstance);
          ApplyNewValuesCode:
            WorkflowChangeRecMgt.ApplyNewValues(Variant,ResponseWorkflowStepInstance);
          DiscardNewValuesCode:
            WorkflowChangeRecMgt.DiscardNewValues(Variant,ResponseWorkflowStepInstance);

          ELSE BEGIN
            OnExecuteWorkflowResponse(ResponseExecuted,Variant,xVariant,ResponseWorkflowStepInstance);
            IF NOT ResponseExecuted THEN
              ERROR(NotSupportedResponseErr,WorkflowResponse."Function Name");
          END;
        END;
    END;

    [Integration]
    LOCAL PROCEDURE OnExecuteWorkflowResponse@47(VAR ResponseExecuted@1000 : Boolean;Variant@1002 : Variant;xVariant@1003 : Variant;ResponseWorkflowStepInstance@1001 : Record 1504);
    BEGIN
    END;

    PROCEDURE DoNothingCode@30() : Code[128];
    BEGIN
      EXIT(UPPERCASE('DoNothing'));
    END;

    PROCEDURE CreateNotificationEntryCode@34() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateNotificationEntry'));
    END;

    PROCEDURE ReleaseDocumentCode@35() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ReleaseDocument'));
    END;

    PROCEDURE OpenDocumentCode@36() : Code[128];
    BEGIN
      EXIT(UPPERCASE('OpenDocument'));
    END;

    PROCEDURE SetStatusToPendingApprovalCode@24() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SetStatusToPendingApproval'));
    END;

    PROCEDURE GetApprovalCommentCode@38() : Code[128];
    BEGIN
      EXIT(UPPERCASE('GetApprovalComment'));
    END;

    PROCEDURE CreateApprovalRequestsCode@39() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateApprovalRequests'));
    END;

    PROCEDURE SendApprovalRequestForApprovalCode@40() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SendApprovalRequestForApproval'));
    END;

    PROCEDURE ApproveAllApprovalRequestsCode@59() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ApproveAllApprovalRequests'));
    END;

    PROCEDURE RejectAllApprovalRequestsCode@42() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RejectAllApprovalRequests'));
    END;

    PROCEDURE CancelAllApprovalRequestsCode@43() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CancelAllApprovalRequests'));
    END;

    PROCEDURE PostDocumentAsyncCode@44() : Code[128];
    BEGIN
      EXIT(UPPERCASE('BackgroundPostApprovedPurchaseDoc'));
    END;

    PROCEDURE PostDocumentCode@45() : Code[128];
    BEGIN
      EXIT(UPPERCASE('PostDocument'));
    END;

    PROCEDURE CreatePmtLineForPostedPurchaseDocAsyncCode@46() : Code[128];
    BEGIN
      EXIT(UPPERCASE('BackgroundCreatePmtLineForPostedDocument'));
    END;

    PROCEDURE CreatePmtLineForPostedPurchaseDocCode@22() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreatePmtLineForPostedDocument'));
    END;

    PROCEDURE CreateOverdueNotificationCode@16() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateOverdueNotifications'));
    END;

    PROCEDURE CheckCustomerCreditLimitCode@20() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CheckCustomerCreditLimit'));
    END;

    PROCEDURE CheckGeneralJournalBatchBalanceCode@50() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CheckGeneralJournalBatchBalance'));
    END;

    PROCEDURE CreateAndApproveApprovalRequestAutomaticallyCode@21() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateAndApproveApprovalRequestAutomatically'));
    END;

    PROCEDURE ShowMessageCode@52() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ShowMessage'));
    END;

    PROCEDURE RestrictRecordUsageCode@58() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RestrictRecordUsage'));
    END;

    PROCEDURE AllowRecordUsageCode@55() : Code[128];
    BEGIN
      EXIT(UPPERCASE('AllowRecordUsage'));
    END;

    PROCEDURE GetMarkReadyForOCRCode@41() : Code[128];
    BEGIN
      EXIT(UPPERCASE('MarkReadyForOCR'));
    END;

    PROCEDURE GetSendToOCRAsyncCode@68() : Code[128];
    BEGIN
      EXIT(UPPERCASE('BackgroundSendToOCR'));
    END;

    PROCEDURE GetSendToOCRCode@65() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SendToOCR'));
    END;

    PROCEDURE GetReceiveFromOCRAsyncCode@69() : Code[128];
    BEGIN
      EXIT(UPPERCASE('BackgroundReceiveFromOCR'));
    END;

    PROCEDURE GetReceiveFromOCRCode@66() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ReceiveFromOCR'));
    END;

    PROCEDURE GetCreateDocFromIncomingDocCode@83() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateDocFromIncomingDoc'));
    END;

    PROCEDURE GetCreateReleasedDocFromIncomingDocCode@70() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateReleasedDocFromIncomingDoc'));
    END;

    PROCEDURE GetCreateJournalFromIncomingDocCode@63() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateJournalFromIncomingDoc'));
    END;

    PROCEDURE RevertValueForFieldCode@64() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RevertValueForField'));
    END;

    PROCEDURE ApplyNewValuesCode@32() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ApplyNewValues'));
    END;

    PROCEDURE DiscardNewValuesCode@18() : Code[128];
    BEGIN
      EXIT(UPPERCASE('DiscardNewValues'));
    END;

    LOCAL PROCEDURE DoNothing@3();
    BEGIN
    END;

    LOCAL PROCEDURE CreateNotificationEntry@4(Variant@1001 : Variant;WorkflowStepInstance@1003 : Record 1504);
    VAR
      WorkflowStepArgument@1000 : Record 1523;
      NotificationEntry@1004 : Record 1511;
    BEGIN
      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        NotificationEntry.CreateNew(NotificationEntry.Type::"New Record",
          WorkflowStepArgument."Notification User ID",Variant,WorkflowStepArgument."Link Target Page",
          WorkflowStepArgument."Custom Link");
    END;

    LOCAL PROCEDURE ReleaseDocument@5(VAR Variant@1001 : Variant);
    VAR
      ApprovalEntry@1000 : Record 454;
      ReleasePurchaseDocument@1006 : Codeunit 415;
      ReleaseSalesDocument@1005 : Codeunit 414;
      ReleaseIncomingDocument@1009 : Codeunit 132;
      RecRef@1004 : RecordRef;
      TargetRecRef@1008 : RecordRef;
      Job@1000000000 : Record 167;
      ProductionOrder@1000000001 : Record 5405;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            TargetRecRef.GET(ApprovalEntry."Record ID to Approve");
            Variant := TargetRecRef;
            ReleaseDocument(Variant);
          END;
        DATABASE::"Purchase Header":
          ReleasePurchaseDocument.PerformManualCheckAndRelease(Variant);
        DATABASE::"Sales Header":
          ReleaseSalesDocument.PerformManualCheckAndRelease(Variant);
        DATABASE::"Incoming Document":
          ReleaseIncomingDocument.PerformManualRelease(Variant);
        //Chris
        DATABASE::Job:
          BEGIN
            RecRef.SETTABLE(Job);
            Job.VALIDATE("Approval Status",Job."Approval Status"::Released);
            Job.MODIFY(TRUE);
            Variant:=Job;
          END;
        //Chris
        DATABASE::"Production Order":
          BEGIN
            RecRef.SETTABLE(ProductionOrder);
            ProductionOrder.VALIDATE("Approval Status",ProductionOrder."Approval Status"::Released);
            ProductionOrder.MODIFY(TRUE);
            Variant:= ProductionOrder;
          END;
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    LOCAL PROCEDURE OpenDocument@6(VAR Variant@1000 : Variant);
    VAR
      ApprovalEntry@1005 : Record 454;
      ReleasePurchaseDocument@1001 : Codeunit 415;
      ReleaseSalesDocument@1006 : Codeunit 414;
      ReleaseIncomingDocument@1008 : Codeunit 132;
      RecRef@1002 : RecordRef;
      TargetRecRef@1007 : RecordRef;
      Job@1000000000 : Record 167;
      ProductionOrder@1000000001 : Record 5405;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            TargetRecRef.GET(ApprovalEntry."Record ID to Approve");
            Variant := TargetRecRef;
            OpenDocument(Variant);
          END;
        DATABASE::"Purchase Header":
          ReleasePurchaseDocument.Reopen(Variant);
        DATABASE::"Sales Header":
          ReleaseSalesDocument.Reopen(Variant);
        DATABASE::"Incoming Document":
          ReleaseIncomingDocument.Reopen(Variant);
        //Chris
        DATABASE::Job:
          BEGIN
            RecRef.SETTABLE(Job);
            Job.VALIDATE("Approval Status",Job."Approval Status"::Open);
            Job.MODIFY(TRUE);
            Variant:=Job;
          END;
        //Chris
        DATABASE::"Production Order":
          BEGIN
            RecRef.SETTABLE(ProductionOrder);
            ProductionOrder.VALIDATE("Approval Status",ProductionOrder."Approval Status"::Open);
            ProductionOrder.MODIFY(TRUE);
            Variant:= ProductionOrder;
          END;
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    PROCEDURE SetStatusToPendingApproval@31(VAR Variant@1000 : Variant);
    VAR
      ApprovalsMgmt@1001 : Codeunit 1535;
    BEGIN
      ApprovalsMgmt.SetStatusToPendingApproval(Variant);
    END;

    LOCAL PROCEDURE GetApprovalComment@8(Variant@1000 : Variant;WorkflowStepInstanceID@1002 : GUID);
    VAR
      ApprovalsMgmt@1001 : Codeunit 1535;
    BEGIN
      ApprovalsMgmt.GetApprovalCommentForWorkflowStepInstanceID(Variant,WorkflowStepInstanceID);
    END;

    LOCAL PROCEDURE CreateApprovalRequests@29(Variant@1000 : Variant;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalsMgmt@1004 : Codeunit 1535;
      RecRef@1005 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      ApprovalsMgmt.CreateApprovalRequests(RecRef,WorkflowStepInstance);
    END;

    LOCAL PROCEDURE BuildTheCreateApprovalReqDescription@124(WorkflowResponse@1001 : Record 1521;WorkflowStepArgument@1000 : Record 1523) : Text[250];
    VAR
      ApproverLimitDesc@1002 : Text;
      WorkflowUserGroupDesc@1003 : Text;
    BEGIN
      ApproverLimitDesc := STRSUBSTNO(CreateApprovalApprovalLimitTxt,
          GetTokenValue(ApproverLimitTypeTok,FORMAT(WorkflowStepArgument."Approver Limit Type")));
      WorkflowUserGroupDesc := STRSUBSTNO(CreateApprovalWorkflowGroupTxt,
          GetTokenValue(WorkflowUserGroupTok,FORMAT(WorkflowStepArgument."Workflow User Group Code")));

      IF GetTokenValue(ApproverTypeTok,FORMAT(WorkflowStepArgument."Approver Type")) = ApproverTypeTok THEN
        EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,ApproverTypeTok,
              STRSUBSTNO('%1/%2',ApproverLimitDesc,WorkflowUserGroupDesc)),1,250));

      IF WorkflowStepArgument."Approver Type" <> WorkflowStepArgument."Approver Type"::"Workflow User Group" THEN
        EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
              GetTokenValue(ApproverTypeTok,FORMAT(WorkflowStepArgument."Approver Type")),
              ApproverLimitDesc),1,250));

      EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
            GetTokenValue(ApproverTypeTok,FORMAT(WorkflowStepArgument."Approver Type")),
            WorkflowUserGroupDesc),1,250));
    END;

    LOCAL PROCEDURE SendApprovalRequestForApproval@9(Variant@1000 : Variant;WorkflowStepInstance@1002 : Record 1504);
    VAR
      ApprovalsMgmt@1003 : Codeunit 1535;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          ApprovalsMgmt.SendApprovalRequestFromApprovalEntry(Variant,WorkflowStepInstance);
        ELSE
          ApprovalsMgmt.SendApprovalRequestFromRecord(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE ApproveAllApprovalRequests@60(Variant@1000 : Variant;WorkflowStepInstance@1004 : Record 1504);
    VAR
      ApprovalEntry@1001 : Record 454;
      ApprovalsMgmt@1006 : Codeunit 1535;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            ApproveAllApprovalRequests(RecRef,WorkflowStepInstance);
          END;
        ELSE
          ApprovalsMgmt.ApproveApprovalRequestsForRecord(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE RejectAllApprovalRequests@11(Variant@1000 : Variant;WorkflowStepInstance@1004 : Record 1504);
    VAR
      ApprovalEntry@1001 : Record 454;
      ApprovalsMgmt@1006 : Codeunit 1535;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            RejectAllApprovalRequests(RecRef,WorkflowStepInstance);
          END;
        ELSE
          ApprovalsMgmt.RejectApprovalRequestsForRecord(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE CancelAllApprovalRequests@12(Variant@1000 : Variant;WorkflowStepInstance@1004 : Record 1504);
    VAR
      ApprovalEntry@1001 : Record 454;
      ApprovalsMgmt@1006 : Codeunit 1535;
      RecRef@1003 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            CancelAllApprovalRequests(RecRef,WorkflowStepInstance);
          END;
        ELSE
          ApprovalsMgmt.CancelApprovalRequestsForRecord(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE PostDocumentAsync@13(Variant@1000 : Variant);
    VAR
      JobQueueEntry@1001 : Record 472;
      PurchaseHeader@1002 : Record 38;
      SalesHeader@1003 : Record 36;
      RecRef@1004 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          BEGIN
            PurchaseHeader := Variant;
            PurchaseHeader.TESTFIELD(Status,PurchaseHeader.Status::Released);
           // JobQueueEntry.ScheduleJobQueueEntryWithParameters(CODEUNIT::"Purchase Post via Job Queue",PurchaseHeader.RECORDID);
          END;
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader := Variant;
            SalesHeader.TESTFIELD(Status,SalesHeader.Status::Released);
            //JobQueueEntry.ScheduleJobQueueEntryWithParameters(CODEUNIT::"Sales Post via Job Queue",SalesHeader.RECORDID);
          END;
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    LOCAL PROCEDURE PostDocument@14(Variant@1000 : Variant);
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          CODEUNIT.RUN(CODEUNIT::"Purch.-Post",Variant);
        DATABASE::"Sales Header":
          CODEUNIT.RUN(CODEUNIT::"Sales-Post",Variant);
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    LOCAL PROCEDURE CreatePmtLineForPostedPurchaseDocAsync@15(WorkflowStepInstance@1000 : Record 1504);
    VAR
      JobQueueEntry@1001 : Record 472;
      WorkflowStepArgument@1002 : Record 1523;
    BEGIN
      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        //JobQueueEntry.ScheduleJobQueueEntryWithParameters(CODEUNIT::"Workflow Create Payment Line",WorkflowStepArgument.RECORDID);
    END;

    LOCAL PROCEDURE CreatePmtLineForPostedPurchaseDoc@17(WorkflowStepInstance@1000 : Record 1504);
    VAR
      WorkflowStepArgument@1002 : Record 1523;
      WorkflowCreatePaymentLine@1001 : Codeunit 1512;
    BEGIN
      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        WorkflowCreatePaymentLine.CreatePmtLine(WorkflowStepArgument);
    END;

    LOCAL PROCEDURE CheckCustomerCreditLimit@53(Variant@1000 : Variant);
    VAR
      SalesHeader@1003 : Record 36;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader := Variant;
            SalesHeader.CheckAvailableCreditLimit;
          END;
      END;
    END;

    LOCAL PROCEDURE CheckGeneralJournalBatchBalance@48(Variant@1000 : Variant);
    VAR
      GenJournalBatch@1002 : Record 232;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Gen. Journal Batch":
          BEGIN
            GenJournalBatch := Variant;
            GenJournalBatch.CheckBalance;
          END;
      END;
    END;

    LOCAL PROCEDURE CreateAndApproveApprovalRequestAutomatically@23(Variant@1000 : Variant;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalsMgmt@1002 : Codeunit 1535;
      RecRef@1003 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header":
          ApprovalsMgmt.CreateAndAutomaticallyApproveRequest(RecRef,WorkflowStepInstance);
        DATABASE::Customer:
          ApprovalsMgmt.CreateAndAutomaticallyApproveRequest(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE ShowMessage@54(WorkflowStepInstance@1001 : Record 1504);
    VAR
      WorkflowStepArgument@1002 : Record 1523;
    BEGIN
      WorkflowStepArgument.GET(WorkflowStepInstance.Argument);
      MESSAGE(STRSUBSTNO(ShowMessagePlaceholderMsg,WorkflowStepArgument.Message));
    END;

    LOCAL PROCEDURE RestrictRecordUsage@56(Variant@1000 : Variant;WorkflowStepInstance@1003 : Record 1504);
    VAR
      Workflow@1004 : Record 1501;
      RecordRestrictionMgt@1002 : Codeunit 1550;
    BEGIN
      Workflow.GET(WorkflowStepInstance."Workflow Code");
      RecordRestrictionMgt.RestrictRecordUsage(Variant,STRSUBSTNO(RestrictUsageDetailsTxt,Workflow.Code,Workflow.Description));
    END;

    LOCAL PROCEDURE AllowRecordUsage@57(Variant@1000 : Variant);
    VAR
      ApprovalEntry@1004 : Record 454;
      GenJournalBatch@1003 : Record 232;
      RecordRestrictionMgt@1002 : Codeunit 1550;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            RecordRestrictionMgt.AllowRecordUsage(Variant);
            RecRef.SETTABLE(ApprovalEntry);
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            AllowRecordUsage(RecRef);
          END;
        DATABASE::"Gen. Journal Batch":
          BEGIN
            RecRef.SETTABLE(GenJournalBatch);
            RecordRestrictionMgt.AllowGenJournalBatchUsage(GenJournalBatch);
          END
        ELSE
          RecordRestrictionMgt.AllowRecordUsage(Variant);
      END;
    END;

    PROCEDURE AddResponseToLibrary@26(FunctionName@1002 : Code[128];TableID@1001 : Integer;Description@1000 : Text[250];ResponseOptionGroup@1004 : Code[20]);
    VAR
      WorkflowResponse@1003 : Record 1521;
    BEGIN
      IF WorkflowResponse.GET(FunctionName) THEN
        EXIT;

      WorkflowResponse.SETRANGE(Description,Description);
      IF NOT WorkflowResponse.ISEMPTY THEN
        ERROR(ResponseAlreadyExistErr,Description);

      WorkflowResponse.INIT;
      WorkflowResponse."Function Name" := FunctionName;
      WorkflowResponse."Table ID" := TableID;
      WorkflowResponse.Description := Description;
      WorkflowResponse."Response Option Group" := ResponseOptionGroup;
      WorkflowResponse.INSERT;

      AddResponsePredecessors(WorkflowResponse."Function Name");
    END;

    PROCEDURE AddResponsePredecessor@61(FunctionName@1000 : Code[128];PredecessorFunctionName@1001 : Code[128]);
    VAR
      WFEventResponseCombination@1002 : Record 1509;
    BEGIN
      WFEventResponseCombination.INIT;
      WFEventResponseCombination.Type := WFEventResponseCombination.Type::Response;
      WFEventResponseCombination."Function Name" := FunctionName;
      WFEventResponseCombination."Predecessor Type" := WFEventResponseCombination."Predecessor Type"::"Event";
      WFEventResponseCombination."Predecessor Function Name" := PredecessorFunctionName;
      IF WFEventResponseCombination.INSERT THEN;
    END;

    PROCEDURE GetDescription@28(WorkflowStepArgument@1000 : Record 1523) : Text[250];
    VAR
      WorkflowResponse@1001 : Record 1521;
    BEGIN
      IF NOT WorkflowResponse.GET(WorkflowStepArgument."Response Function Name") THEN
        EXIT('');
      CASE WorkflowResponse."Function Name" OF
        CreateNotificationEntryCode:
          EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
                GetTokenValue(UserIDTok,WorkflowStepArgument."Notification User ID")),1,250));
        ShowMessageCode:
          EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
                GetTokenValue(MessageTok,WorkflowStepArgument.Message)),1,250));
        CreatePmtLineForPostedPurchaseDocAsyncCode,
        CreatePmtLineForPostedPurchaseDocCode:
          EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
                GetTokenValue(TemplateTok,WorkflowStepArgument."General Journal Template Name"),
                GetTokenValue(GenJnlBatchTok,WorkflowStepArgument."General Journal Batch Name")),1,250));
        CreateApprovalRequestsCode:
          EXIT(BuildTheCreateApprovalReqDescription(WorkflowResponse,WorkflowStepArgument));
        SendApprovalRequestForApprovalCode,
        RejectAllApprovalRequestsCode,
        CancelAllApprovalRequestsCode,
        CreateOverdueNotificationCode:
          EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description),1,250));
        RevertValueForFieldCode:
          BEGIN
            WorkflowStepArgument.CALCFIELDS("Field Caption");
            EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
                  GetTokenValue(RevertRecordFieldValueTok,WorkflowStepArgument."Field Caption")),1,250));
          END;
        ELSE
          EXIT(WorkflowResponse.Description);
      END;
    END;

    LOCAL PROCEDURE GetTokenValue@27(TokenValue@1001 : Text;FieldValue@1000 : Text) : Text;
    BEGIN
      IF FieldValue <> '' THEN
        EXIT(FieldValue);

      EXIT(TokenValue);
    END;

    PROCEDURE IsArgumentMandatory@10(ResponseFunctionName@1000 : Code[128]) : Boolean;
    BEGIN
      IF ResponseFunctionName IN
         [CreateNotificationEntryCode,CreatePmtLineForPostedPurchaseDocAsyncCode,CreateApprovalRequestsCode,
          CreatePmtLineForPostedPurchaseDocCode]
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE HasRequiredArguments@19(WorkflowStep@1001 : Record 1502) : Boolean;
    VAR
      WorkflowStepArgument@1000 : Record 1523;
    BEGIN
      IF NOT IsArgumentMandatory(WorkflowStep."Function Name") THEN
        EXIT(TRUE);

      IF NOT WorkflowStepArgument.GET(WorkflowStep.Argument) THEN
        EXIT(FALSE);

      CASE WorkflowStep."Function Name" OF
        CreatePmtLineForPostedPurchaseDocAsyncCode,
        CreatePmtLineForPostedPurchaseDocCode:
          IF (WorkflowStepArgument."General Journal Template Name" = '') OR
             (WorkflowStepArgument."General Journal Batch Name" = '')
          THEN
            EXIT(FALSE);
        CreateApprovalRequestsCode:
          CASE WorkflowStepArgument."Approver Type" OF
            WorkflowStepArgument."Approver Type"::"Workflow User Group":
              BEGIN
                IF WorkflowStepArgument."Workflow User Group Code" = '' THEN
                  EXIT(FALSE);
              END;
            ELSE BEGIN
              IF WorkflowStepArgument."Approver Limit Type" = WorkflowStepArgument."Approver Limit Type"::"Specific Approver" THEN
                IF WorkflowStepArgument."Approver User ID" = '' THEN
                  EXIT(FALSE);
            END;
          END;
        CreateNotificationEntryCode:
          IF WorkflowStepArgument."Notification User ID" = '' THEN
            EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateOverdueNotifications@7(WorkflowStepInstance@1001 : Record 1504);
    VAR
      WorkflowStepArgument@1003 : Record 1523;
      NotificationManagement@1002 : Codeunit 1510;
    BEGIN
      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        NotificationManagement.CreateOverdueNotifications(WorkflowStepArgument);
    END;

    LOCAL PROCEDURE MarkReadyForOCR@37(Variant@1000 : Variant);
    VAR
      IncomingDocumentAttachment@1001 : Record 133;
      IncomingDocument@1002 : Record 130;
    BEGIN
      IncomingDocumentAttachment := Variant;
      IncomingDocument.GET(IncomingDocumentAttachment."Incoming Document Entry No.");
      IncomingDocument.SendToJobQueue(FALSE);
    END;

    LOCAL PROCEDURE SendToOCRAsync@71(Variant@1000 : Variant);
    VAR
      JobQueueEntry@1001 : Record 472;
      IncomingDocument@1002 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.TESTFIELD(Status,IncomingDocument.Status::Released);
      IncomingDocument.TESTFIELD("OCR Status",IncomingDocument."OCR Status"::Ready);
      //JobQueueEntry.ScheduleJobQueueEntryWithParameters(CODEUNIT::"OCR Inc. Doc. via Job Queue",IncomingDocument.RECORDID);
    END;

    LOCAL PROCEDURE SendToOCR@81(Variant@1000 : Variant);
    VAR
      IncomingDocument@1002 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.SendToOCR(FALSE);
    END;

    LOCAL PROCEDURE ReceiveFromOCRAsync@72(Variant@1000 : Variant);
    VAR
      IncomingDocument@1002 : Record 130;
      OCRIncDocViaJobQueue@1003 : Codeunit 137;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.TESTFIELD(Status,IncomingDocument.Status::Released);
      IncomingDocument.TESTFIELD("OCR Status",IncomingDocument."OCR Status"::Sent);
      OCRIncDocViaJobQueue.EnqueueIncomingDoc(IncomingDocument);
    END;

    LOCAL PROCEDURE ReceiveFromOCR@82(Variant@1000 : Variant);
    VAR
      IncomingDocument@1002 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.RetrieveFromOCR(FALSE);
    END;

    LOCAL PROCEDURE CreateDocFromIncomingDoc@51(Variant@1000 : Variant);
    VAR
      IncomingDocument@1001 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.TryCreateDocumentWithDataExchange;
    END;

    LOCAL PROCEDURE CreateReleasedDocFromIncomingDoc@67(Variant@1000 : Variant);
    VAR
      IncomingDocument@1001 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.CreateReleasedDocumentWithDataExchange;
    END;

    LOCAL PROCEDURE CreateJournalFromIncomingDoc@62(Variant@1000 : Variant);
    VAR
      IncomingDocument@1001 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.TryCreateGeneralJournalLineWithDataExchange;

      //Chris
    END;

    BEGIN
    {
      //Chris Add Response
    }
    END.
  }
}

OBJECT Codeunit 1535 Approvals Mgmt.
{
  OBJECT-PROPERTIES
  {
    Date=16/03/20;
    Time=17:55:38;
    Modified=Yes;
    Version List=NAVW110.00.00.23021,WF;
  }
  PROPERTIES
  {
    Permissions=TableData 454=imd,
                TableData 455=imd,
                TableData 456=imd,
                TableData 457=imd,
                TableData 458=imd,
                TableData 1511=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      UserIdNotInSetupErr@1015 : TextConst '@@@=User ID NAVUser does not exist in the Approval User Setup window.;ENU=User ID %1 does not exist in the Approval User Setup window.;ENG=User ID %1 does not exist in the Approval User Setup window.';
      ApproverUserIdNotInSetupErr@1005 : TextConst '@@@=You must set up an approver for user ID NAVUser in the Approval User Setup window.;ENU=You must set up an approver for user ID %1 in the Approval User Setup window.;ENG=You must set up an approver for user ID %1 in the Approval User Setup window.';
      WFUserGroupNotInSetupErr@1013 : TextConst '@@@=The workflow user group member with user ID NAVUser does not exist in the Approval User Setup window.;ENU=The workflow user group member with user ID %1 does not exist in the Approval User Setup window.;ENG=The workflow user group member with user ID %1 does not exist in the Approval User Setup window.';
      SubstituteNotFoundErr@1007 : TextConst '@@@=There is no substitute for user ID NAVUser in the Approval User Setup window.;ENU=There is no substitute, direct approver, or approval administrator for user ID %1 in the Approval User Setup window.;ENG=There is no substitute, direct approver, or approval administrator for user ID %1 in the Approval User Setup window.';
      NoSuitableApproverFoundErr@1000 : TextConst 'ENU=No qualified approver was found.;ENG=No qualified approver was found.';
      DelegateOnlyOpenRequestsErr@1049 : TextConst 'ENU=You can only delegate open approval requests.;ENG=You can only delegate open approval requests.';
      ApproveOnlyOpenRequestsErr@1060 : TextConst 'ENU=You can only approve open approval requests.;ENG=You can only approve open approval requests.';
      RejectOnlyOpenRequestsErr@1061 : TextConst 'ENU=You can only reject open approval entries.;ENG=You can only reject open approval entries.';
      ApprovalsDelegatedMsg@1018 : TextConst 'ENU=The selected approval requests have been delegated.;ENG=The selected approval requests have been delegated.';
      NoReqToApproveErr@1056 : TextConst 'ENU=There is no approval request to approve.;ENG=There is no approval request to approve.';
      NoReqToRejectErr@1057 : TextConst 'ENU=There is no approval request to reject.;ENG=There is no approval request to reject.';
      NoReqToDelegateErr@1059 : TextConst 'ENU=There is no approval request to delegate.;ENG=There is no approval request to delegate.';
      PendingApprovalMsg@1002 : TextConst 'ENU=An approval request has been sent.;ENG=An approval request has been sent.';
      NoApprovalsSentMsg@1006 : TextConst 'ENU=No approval requests have been sent, either because they are already sent or because related workflows do not support the journal line.;ENG=No approval requests have been sent, either because they are already sent or because related workflows do not support the journal line.';
      PendingApprovalForSelectedLinesMsg@1020 : TextConst 'ENU=Approval requests have been sent.;ENG=Approval requests have been sent.';
      PendingApprovalForSomeSelectedLinesMsg@1001 : TextConst 'ENU=Approval requests have been sent.\\Requests for some journal lines were not sent, either because they are already sent or because related workflows do not support the journal line.;ENG=Approval requests have been sent.\\Requests for some journal lines were not sent, either because they are already sent or because related workflows do not support the journal line.';
      PurchaserUserNotFoundErr@1003 : TextConst '@@@=Example: The salesperson/purchaser user ID NAVUser does not exist in the Approval User Setup window for Salesperson/Purchaser code AB.;ENU=The salesperson/purchaser user ID %1 does not exist in the Approval User Setup window for %2 %3.;ENG=The salesperson/purchaser user ID %1 does not exist in the Approval User Setup window for %2 %3.';
      NoApprovalRequestsFoundErr@1009 : TextConst 'ENU=No approval requests exist.;ENG=No approval requests exist.';
      NoWFUserGroupMembersErr@1004 : TextConst 'ENU=A workflow user group with at least one member must be set up.;ENG=A workflow user group with at least one member must be set up.';
      DocStatusChangedMsg@1010 : TextConst '@@@=Order 1001 has been automatically approved. The status has been changed to Released.;ENU=%1 %2 has been automatically approved. The status has been changed to %3.;ENG=%1 %2 has been automatically approved. The status has been changed to %3.';
      UnsupportedRecordTypeErr@1011 : TextConst '@@@=Record type Customer is not supported by this workflow response.;ENU=Record type %1 is not supported by this workflow response.;ENG=Record type %1 is not supported by this workflow response.';
      SalesPrePostCheckErr@1012 : TextConst '@@@="%1=document type, %2=document no., e.g. Sales Order 321 must be approved...";ENU=Sales %1 %2 must be approved and released before you can perform this action.;ENG=Sales %1 %2 must be approved and released before you can perform this action.';
      WorkflowEventHandling@1071 : Codeunit 1520;
      WorkflowManagement@1070 : Codeunit 1501;
      PurchPrePostCheckErr@1022 : TextConst '@@@="%1=document type, %2=document no., e.g. Purchase Order 321 must be approved...";ENU=Purchase %1 %2 must be approved and released before you can perform this action.;ENG=Purchase %1 %2 must be approved and released before you can perform this action.';
      NoWorkflowEnabledErr@1101 : TextConst 'ENU=No approval workflow for this record type is enabled.;ENG=No approval workflow for this record type is enabled.';
      ApprovalReqCanceledForSelectedLinesMsg@1019 : TextConst 'ENU=The approval request for the selected record has been canceled.;ENG=The approval request for the selected record has been cancelled.';
      PendingJournalBatchApprovalExistsErr@1017 : TextConst '@@@=%1 is the Document No. of the journal line;ENU=An approval request already exists.;ENG=An approval request already exists.';
      ApporvalChainIsUnsupportedMsg@1016 : TextConst '@@@=Only Direct Approver is supported as Approver Limit Type option for Gen. Journal Batch DEFAULT, CASH. The approval request will be approved automatically.;ENU=Only Direct Approver is supported as Approver Limit Type option for %1. The approval request will be approved automatically.;ENG=Only Direct Approver is supported as Approver Limit Type option for %1. The approval request will be approved automatically.';
      RecHasBeenApprovedMsg@1008 : TextConst '@@@="%1 = Record Id";ENU=%1 has been approved.;ENG=%1 has been approved.';
      NoPermissionToDelegateErr@1014 : TextConst 'ENU=You do not have permission to delegate one or more of the selected approval requests.;ENG=You do not have permission to delegate one or more of the selected approval requests.';
      NothingToApproveErr@1021 : TextConst 'ENU=There is nothing to approve.;ENG=There is nothing to approve.';

    [Integration]
    PROCEDURE OnSendPurchaseDocForApproval@3(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendSalesDocForApproval@10(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendIncomingDocForApproval@191(VAR IncomingDocument@1000 : Record 130);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelPurchaseApprovalRequest@4(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelSalesApprovalRequest@34(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelIncomingDocApprovalRequest@100(VAR IncomingDocument@1000 : Record 130);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendCustomerForApproval@52(VAR Customer@1000 : Record 18);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendVendorForApproval@56(VAR Vendor@1000 : Record 23);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendItemForApproval@64(VAR Item@1000 : Record 27);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelCustomerApprovalRequest@51(VAR Customer@1000 : Record 18);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelVendorApprovalRequest@67(VAR Vendor@1000 : Record 23);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelItemApprovalRequest@69(VAR Item@1000 : Record 27);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendGeneralJournalBatchForApproval@62(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelGeneralJournalBatchApprovalRequest@61(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnSendGeneralJournalLineForApproval@65(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCancelGeneralJournalLineApprovalRequest@63(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnApproveApprovalRequest@68(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRejectApprovalRequest@76(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnDelegateApprovalRequest@78(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
    END;

    PROCEDURE ApproveRecordApprovalRequest@48(RecordID@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      IF NOT FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID) THEN
        ERROR(NoReqToApproveErr);

      ApprovalEntry.SETRECFILTER;
      ApproveApprovalRequests(ApprovalEntry);
    END;

    PROCEDURE ApproveGenJournalLineRequest@103(GenJournalLine@1000 : Record 81);
    VAR
      GenJournalBatch@1001 : Record 232;
      ApprovalEntry@1002 : Record 454;
    BEGIN
      GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
      IF FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalBatch.RECORDID) THEN
        ApproveRecordApprovalRequest(GenJournalBatch.RECORDID);
      CLEAR(ApprovalEntry);
      IF FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalLine.RECORDID) THEN
        ApproveRecordApprovalRequest(GenJournalLine.RECORDID);
    END;

    PROCEDURE RejectRecordApprovalRequest@57(RecordID@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      IF NOT FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID) THEN
        ERROR(NoReqToRejectErr);

      ApprovalEntry.SETRECFILTER;
      RejectApprovalRequests(ApprovalEntry);
    END;

    PROCEDURE RejectGenJournalLineRequest@104(GenJournalLine@1002 : Record 81);
    VAR
      GenJournalBatch@1001 : Record 232;
      ApprovalEntry@1000 : Record 454;
    BEGIN
      GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
      IF FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalBatch.RECORDID) THEN
        RejectRecordApprovalRequest(GenJournalBatch.RECORDID);
      CLEAR(ApprovalEntry);
      IF FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalLine.RECORDID) THEN
        RejectRecordApprovalRequest(GenJournalLine.RECORDID);
    END;

    PROCEDURE DelegateRecordApprovalRequest@58(RecordID@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      IF NOT FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID) THEN
        ERROR(NoReqToDelegateErr);

      ApprovalEntry.SETRECFILTER;
      DelegateApprovalRequests(ApprovalEntry);
    END;

    PROCEDURE DelegateGenJournalLineRequest@29(GenJournalLine@1000 : Record 81);
    VAR
      GenJournalBatch@1002 : Record 232;
      ApprovalEntry@1001 : Record 454;
    BEGIN
      GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
      IF FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalBatch.RECORDID) THEN
        DelegateRecordApprovalRequest(GenJournalBatch.RECORDID);
      CLEAR(ApprovalEntry);
      IF FindOpenApprovalEntryForCurrUser(ApprovalEntry,GenJournalLine.RECORDID) THEN
        DelegateRecordApprovalRequest(GenJournalLine.RECORDID);
    END;

    PROCEDURE ApproveApprovalRequests@108(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      IF ApprovalEntry.FINDSET(TRUE) THEN
        REPEAT
          ApproveSelectedApprovalRequest(ApprovalEntry);
        UNTIL ApprovalEntry.NEXT = 0;
    END;

    PROCEDURE RejectApprovalRequests@28(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      IF ApprovalEntry.FINDSET(TRUE) THEN
        REPEAT
          RejectSelectedApprovalRequest(ApprovalEntry);
        UNTIL ApprovalEntry.NEXT = 0;
    END;

    PROCEDURE DelegateApprovalRequests@27(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      IF ApprovalEntry.FINDSET(TRUE) THEN BEGIN
        REPEAT
          DelegateSelectedApprovalRequest(ApprovalEntry,TRUE);
        UNTIL ApprovalEntry.NEXT = 0;
        MESSAGE(ApprovalsDelegatedMsg);
      END;
    END;

    LOCAL PROCEDURE ApproveSelectedApprovalRequest@5(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      IF ApprovalEntry.Status <> ApprovalEntry.Status::Open THEN
        ERROR(ApproveOnlyOpenRequestsErr);

      IF ApprovalEntry."Approver ID" <> USERID THEN
        CheckUserAsApprovalAdministrator;

      ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Approved);
      ApprovalEntry.MODIFY(TRUE);
      OnApproveApprovalRequest(ApprovalEntry);
    END;

    LOCAL PROCEDURE RejectSelectedApprovalRequest@2(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      IF ApprovalEntry.Status <> ApprovalEntry.Status::Open THEN
        ERROR(RejectOnlyOpenRequestsErr);

      IF ApprovalEntry."Approver ID" <> USERID THEN
        CheckUserAsApprovalAdministrator;

      OnRejectApprovalRequest(ApprovalEntry);
      ApprovalEntry.GET(ApprovalEntry."Entry No.");
      ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Rejected);
      ApprovalEntry.MODIFY(TRUE);
    END;

    PROCEDURE DelegateSelectedApprovalRequest@1(VAR ApprovalEntry@1000 : Record 454;CheckCurrentUser@1001 : Boolean);
    BEGIN
      IF ApprovalEntry.Status <> ApprovalEntry.Status::Open THEN
        ERROR(DelegateOnlyOpenRequestsErr);

      IF CheckCurrentUser AND (NOT ApprovalEntry.CanCurrentUserEdit) THEN
        ERROR(NoPermissionToDelegateErr);

      SubstituteUserIdForApprovalEntry(ApprovalEntry)
    END;

    LOCAL PROCEDURE SubstituteUserIdForApprovalEntry@86(ApprovalEntry@1000 : Record 454);
    VAR
      UserSetup@1001 : Record 91;
      ApprovalAdminUserSetup@1002 : Record 91;
    BEGIN
      IF NOT UserSetup.GET(ApprovalEntry."Approver ID") THEN
        ERROR(ApproverUserIdNotInSetupErr,ApprovalEntry."Sender ID");

      IF UserSetup.Substitute = '' THEN
        IF UserSetup."Approver ID" = '' THEN BEGIN
          ApprovalAdminUserSetup.SETRANGE("Approval Administrator",TRUE);
          IF ApprovalAdminUserSetup.FINDFIRST THEN
            UserSetup.GET(ApprovalAdminUserSetup."User ID")
          ELSE
            ERROR(SubstituteNotFoundErr,UserSetup."User ID");
        END ELSE
          UserSetup.GET(UserSetup."Approver ID")
      ELSE
        UserSetup.GET(UserSetup.Substitute);

      ApprovalEntry."Approver ID" := UserSetup."User ID";
      ApprovalEntry.MODIFY(TRUE);
      OnDelegateApprovalRequest(ApprovalEntry);
    END;

    PROCEDURE FindOpenApprovalEntryForCurrUser@43(VAR ApprovalEntry@1002 : Record 454;RecordID@1000 : RecordID) : Boolean;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Approver ID",USERID);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);

      EXIT(ApprovalEntry.FINDFIRST);
    END;

    PROCEDURE FindApprovalEntryForCurrUser@101(VAR ApprovalEntry@1002 : Record 454;RecordID@1000 : RecordID) : Boolean;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE("Approver ID",USERID);

      EXIT(ApprovalEntry.FINDFIRST);
    END;

    LOCAL PROCEDURE ShowPurchApprovalStatus@9(PurchaseHeader@1000 : Record 38);
    BEGIN
      PurchaseHeader.FIND;

      CASE PurchaseHeader.Status OF
        PurchaseHeader.Status::Released:
          MESSAGE(DocStatusChangedMsg,PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseHeader.Status);
        PurchaseHeader.Status::"Pending Approval":
          IF HasOpenOrPendingApprovalEntries(PurchaseHeader.RECORDID) THEN
            MESSAGE(PendingApprovalMsg);
        PurchaseHeader.Status::"Pending Prepayment":
          MESSAGE(DocStatusChangedMsg,PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseHeader.Status);
      END;
    END;

    LOCAL PROCEDURE ShowSalesApprovalStatus@26(SalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader.FIND;

      CASE SalesHeader.Status OF
        SalesHeader.Status::Released:
          MESSAGE(DocStatusChangedMsg,SalesHeader."Document Type",SalesHeader."No.",SalesHeader.Status);
        SalesHeader.Status::"Pending Approval":
          IF HasOpenOrPendingApprovalEntries(SalesHeader.RECORDID) THEN
            MESSAGE(PendingApprovalMsg);
        SalesHeader.Status::"Pending Prepayment":
          MESSAGE(DocStatusChangedMsg,SalesHeader."Document Type",SalesHeader."No.",SalesHeader.Status);
      END;
    END;

    LOCAL PROCEDURE ShowApprovalStatus@107(RecId@1000 : RecordID;WorkflowInstanceId@1001 : GUID);
    BEGIN
      IF HasPendingApprovalEntriesForWorkflow(RecId,WorkflowInstanceId) THEN
        MESSAGE(PendingApprovalMsg)
      ELSE
        MESSAGE(RecHasBeenApprovedMsg,FORMAT(RecId,0,1));
    END;

    PROCEDURE ApproveApprovalRequestsForRecord@186(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      IF ApprovalEntry.FINDSET(TRUE) THEN
        REPEAT
          ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Approved);
          ApprovalEntry.MODIFY(TRUE);
          CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        UNTIL ApprovalEntry.NEXT = 0;
    END;

    PROCEDURE CancelApprovalRequestsForRecord@8(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalEntry@1002 : Record 454;
      OldStatus@1003 : Option;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Rejected,ApprovalEntry.Status::Canceled);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      IF ApprovalEntry.FINDSET(TRUE) THEN
        REPEAT
          OldStatus := ApprovalEntry.Status;
          ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Canceled);
          ApprovalEntry.MODIFY(TRUE);
          IF OldStatus IN [ApprovalEntry.Status::Open,ApprovalEntry.Status::Approved] THEN
            CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        UNTIL ApprovalEntry.NEXT = 0;
    END;

    PROCEDURE RejectApprovalRequestsForRecord@7(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalEntry@1002 : Record 454;
      OldStatus@1003 : Option;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Rejected,ApprovalEntry.Status::Canceled);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      IF ApprovalEntry.FINDSET(TRUE) THEN BEGIN
        REPEAT
          OldStatus := ApprovalEntry.Status;
          ApprovalEntry.VALIDATE(Status,ApprovalEntry.Status::Rejected);
          ApprovalEntry.MODIFY(TRUE);
          IF OldStatus IN [ApprovalEntry.Status::Open,ApprovalEntry.Status::Approved] THEN
            CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        UNTIL ApprovalEntry.NEXT = 0;
        IF ApprovalEntry."Approver ID" <> ApprovalEntry."Sender ID" THEN BEGIN
          ApprovalEntry."Approver ID" := ApprovalEntry."Sender ID";
          CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        END;
      END;
    END;

    PROCEDURE SendApprovalRequestFromRecord@33(RecRef@1004 : RecordRef;WorkflowStepInstance@1002 : Record 1504);
    VAR
      ApprovalEntry@1001 : Record 454;
      ApprovalEntry2@1000 : Record 454;
    BEGIN
      ApprovalEntry.SETCURRENTKEY("Table ID","Record ID to Approve",Status,"Workflow Step Instance ID","Sequence No.");
      ApprovalEntry.SETRANGE("Table ID",RecRef.NUMBER);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecRef.RECORDID);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Created);
      ApprovalEntry.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);

      IF ApprovalEntry.FINDFIRST THEN BEGIN
        ApprovalEntry2.COPYFILTERS(ApprovalEntry);
        ApprovalEntry2.SETRANGE("Sequence No.",ApprovalEntry."Sequence No.");
        IF ApprovalEntry2.FINDSET(TRUE) THEN
          REPEAT
            ApprovalEntry2.VALIDATE(Status,ApprovalEntry2.Status::Open);
            ApprovalEntry2.MODIFY(TRUE);
            CreateApprovalEntryNotification(ApprovalEntry2,WorkflowStepInstance);
          UNTIL ApprovalEntry2.NEXT = 0;
        IF FindApprovedApprovalEntryForWorkflowUserGroup(ApprovalEntry,WorkflowStepInstance) THEN
          OnApproveApprovalRequest(ApprovalEntry);
        EXIT;
      END;

      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Approved);
      IF ApprovalEntry.FINDLAST THEN
        OnApproveApprovalRequest(ApprovalEntry)
      ELSE
        ERROR(NoApprovalRequestsFoundErr);
    END;

    PROCEDURE SendApprovalRequestFromApprovalEntry@41(ApprovalEntry@1000 : Record 454;WorkflowStepInstance@1002 : Record 1504);
    VAR
      ApprovalEntry2@1001 : Record 454;
      ApprovalEntry3@1003 : Record 454;
      RecID@1004 : RecordID;
    BEGIN
      IF ApprovalEntry.Status = ApprovalEntry.Status::Open THEN BEGIN
        CreateApprovalEntryNotification(ApprovalEntry,WorkflowStepInstance);
        EXIT;
      END;

      RecID := WorkflowStepInstance."Record ID";
      IF OpenApprovalEntriesForWorkflowStepInstanceExist(ApprovalEntry,RecID) THEN
        EXIT;

      ApprovalEntry2.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
      ApprovalEntry2.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
      ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Created);

      IF ApprovalEntry2.FINDFIRST THEN BEGIN
        ApprovalEntry3.COPYFILTERS(ApprovalEntry2);
        ApprovalEntry3.SETRANGE("Sequence No.",ApprovalEntry2."Sequence No.");
        IF ApprovalEntry3.FINDSET THEN
          REPEAT
            ApprovalEntry3.VALIDATE(Status,ApprovalEntry3.Status::Open);
            ApprovalEntry3.MODIFY(TRUE);
            CreateApprovalEntryNotification(ApprovalEntry3,WorkflowStepInstance);
          UNTIL ApprovalEntry3.NEXT = 0;
      END;
    END;

    PROCEDURE CreateApprovalRequests@6(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      WorkflowStepArgument@1003 : Record 1523;
      ApprovalEntryArgument@1002 : Record 454;
    BEGIN
      PopulateApprovalEntryArgument(RecRef,WorkflowStepInstance,ApprovalEntryArgument);

      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        CASE WorkflowStepArgument."Approver Type" OF
          WorkflowStepArgument."Approver Type"::"Salesperson/Purchaser":
            CreateApprReqForApprTypeSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
          WorkflowStepArgument."Approver Type"::Approver:
            CreateApprReqForApprTypeApprover(WorkflowStepArgument,ApprovalEntryArgument);
          WorkflowStepArgument."Approver Type"::"Workflow User Group":
            CreateApprReqForApprTypeWorkflowUserGroup(WorkflowStepArgument,ApprovalEntryArgument);
        END;

      IF WorkflowStepArgument."Show Confirmation Message" THEN
        InformUserOnStatusChange(RecRef,WorkflowStepInstance.ID);
    END;

    PROCEDURE CreateAndAutomaticallyApproveRequest@44(RecRef@1000 : RecordRef;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalEntryArgument@1002 : Record 454;
      WorkflowStepArgument@1003 : Record 1523;
    BEGIN
      PopulateApprovalEntryArgument(RecRef,WorkflowStepInstance,ApprovalEntryArgument);
      IF NOT WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        WorkflowStepArgument.INIT;

      CreateApprovalRequestForUser(WorkflowStepArgument,ApprovalEntryArgument);

      InformUserOnStatusChange(RecRef,WorkflowStepInstance.ID);
    END;

    LOCAL PROCEDURE CreateApprReqForApprTypeSalespersPurchaser@32(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1002 : Record 454);
    BEGIN
      ApprovalEntryArgument.TESTFIELD("Salespers./Purch. Code");

      CASE WorkflowStepArgument."Approver Limit Type" OF
        WorkflowStepArgument."Approver Limit Type"::"Approver Chain":
          BEGIN
            CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForChainOfApprovers(WorkflowStepArgument,ApprovalEntryArgument);
          END;
        WorkflowStepArgument."Approver Limit Type"::"Direct Approver":
          CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
        WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver":
          BEGIN
            CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForApproverWithSufficientLimit(WorkflowStepArgument,ApprovalEntryArgument);
          END;
        WorkflowStepArgument."Approver Limit Type"::"Specific Approver":
          BEGIN
            CreateApprovalRequestForSalespersPurchaser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForSpecificUser(WorkflowStepArgument,ApprovalEntryArgument);
          END;
      END;
    END;

    LOCAL PROCEDURE CreateApprReqForApprTypeApprover@31(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    BEGIN
      CASE WorkflowStepArgument."Approver Limit Type" OF
        WorkflowStepArgument."Approver Limit Type"::"Approver Chain":
          BEGIN
            CreateApprovalRequestForUser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForChainOfApprovers(WorkflowStepArgument,ApprovalEntryArgument);
          END;
        WorkflowStepArgument."Approver Limit Type"::"Direct Approver":
          CreateApprovalRequestForApprover(WorkflowStepArgument,ApprovalEntryArgument);
        WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver":
          BEGIN
            CreateApprovalRequestForUser(WorkflowStepArgument,ApprovalEntryArgument);
            CreateApprovalRequestForApproverWithSufficientLimit(WorkflowStepArgument,ApprovalEntryArgument);
          END;
        WorkflowStepArgument."Approver Limit Type"::"Specific Approver":
          CreateApprovalRequestForSpecificUser(WorkflowStepArgument,ApprovalEntryArgument);
      END;
    END;

    LOCAL PROCEDURE CreateApprReqForApprTypeWorkflowUserGroup@49(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    VAR
      UserSetup@1004 : Record 91;
      WorkflowUserGroupMember@1006 : Record 1541;
      ApproverId@1003 : Code[50];
      SequenceNo@1002 : Integer;
    BEGIN
      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      WITH WorkflowUserGroupMember DO BEGIN
        SETCURRENTKEY("Workflow User Group Code","Sequence No.");
        SETRANGE("Workflow User Group Code",WorkflowStepArgument."Workflow User Group Code");

        IF NOT FINDSET THEN
          ERROR(NoWFUserGroupMembersErr);

        REPEAT
          ApproverId := "User Name";
          IF NOT UserSetup.GET(ApproverId) THEN
            ERROR(WFUserGroupNotInSetupErr,ApproverId);
          MakeApprovalEntry(ApprovalEntryArgument,SequenceNo + "Sequence No.",ApproverId,WorkflowStepArgument);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateApprovalRequestForChainOfApprovers@18(WorkflowStepArgument@1008 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    BEGIN
      CreateApprovalRequestForApproverChain(WorkflowStepArgument,ApprovalEntryArgument,FALSE);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForApproverWithSufficientLimit@45(WorkflowStepArgument@1008 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    BEGIN
      CreateApprovalRequestForApproverChain(WorkflowStepArgument,ApprovalEntryArgument,TRUE);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForApproverChain@46(WorkflowStepArgument@1008 : Record 1523;ApprovalEntryArgument@1000 : Record 454;SufficientApproverOnly@1003 : Boolean);
    VAR
      ApprovalEntry@1001 : Record 454;
      UserSetup@1007 : Record 91;
      ApproverId@1002 : Code[50];
      SequenceNo@1006 : Integer;
    BEGIN
      ApproverId := USERID;

      WITH ApprovalEntry DO BEGIN
        SETCURRENTKEY("Record ID to Approve","Workflow Step Instance ID","Sequence No.");
        SETRANGE("Table ID",ApprovalEntryArgument."Table ID");
        SETRANGE("Record ID to Approve",ApprovalEntryArgument."Record ID to Approve");
        SETRANGE("Workflow Step Instance ID",ApprovalEntryArgument."Workflow Step Instance ID");
        SETRANGE(Status,Status::Created);
        IF FINDLAST THEN
          ApproverId := "Approver ID"
        ELSE
          IF (WorkflowStepArgument."Approver Type" = WorkflowStepArgument."Approver Type"::"Salesperson/Purchaser") AND
             (WorkflowStepArgument."Approver Limit Type" = WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver")
          THEN BEGIN
            FindUserSetupBySalesPurchCode(UserSetup,ApprovalEntryArgument);
            ApproverId := UserSetup."User ID";
          END;
      END;

      IF NOT UserSetup.GET(ApproverId) THEN
        ERROR(ApproverUserIdNotInSetupErr,ApprovalEntry."Sender ID");

      IF NOT IsSufficientApprover(UserSetup,ApprovalEntryArgument) THEN
        REPEAT
          ApproverId := UserSetup."Approver ID";

          IF ApproverId = '' THEN
            ERROR(NoSuitableApproverFoundErr);

          IF NOT UserSetup.GET(ApproverId) THEN
            ERROR(ApproverUserIdNotInSetupErr,UserSetup."User ID");

          // Approval Entry should not be created only when IsSufficientApprover is false and SufficientApproverOnly is true
          IF IsSufficientApprover(UserSetup,ApprovalEntryArgument) OR (NOT SufficientApproverOnly) THEN BEGIN
            SequenceNo := GetLastSequenceNo(ApprovalEntryArgument) + 1;
            MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,ApproverId,WorkflowStepArgument);
          END;

        UNTIL IsSufficientApprover(UserSetup,ApprovalEntryArgument);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForApprover@19(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    VAR
      UserSetup@1006 : Record 91;
      UsrId@1005 : Code[50];
      SequenceNo@1004 : Integer;
    BEGIN
      UsrId := USERID;

      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      IF NOT UserSetup.GET(USERID) THEN
        ERROR(UserIdNotInSetupErr,UsrId);

      UsrId := UserSetup."Approver ID";
      IF NOT UserSetup.GET(UsrId) THEN BEGIN
        IF NOT UserSetup."Approval Administrator" THEN
          ERROR(ApproverUserIdNotInSetupErr,UserSetup."User ID");
        UsrId := USERID;
      END;

      SequenceNo += 1;
      MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UsrId,WorkflowStepArgument);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForSalespersPurchaser@21(WorkflowStepArgument@1006 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    VAR
      UserSetup@1001 : Record 91;
      SequenceNo@1002 : Integer;
    BEGIN
      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      FindUserSetupBySalesPurchCode(UserSetup,ApprovalEntryArgument);

      SequenceNo += 1;

      IF WorkflowStepArgument."Approver Limit Type" = WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver" THEN BEGIN
        IF IsSufficientApprover(UserSetup,ApprovalEntryArgument) THEN
          MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UserSetup."User ID",WorkflowStepArgument);
      END ELSE
        MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UserSetup."User ID",WorkflowStepArgument);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForUser@22(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    VAR
      SequenceNo@1002 : Integer;
    BEGIN
      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      SequenceNo += 1;
      MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,USERID,WorkflowStepArgument);
    END;

    LOCAL PROCEDURE CreateApprovalRequestForSpecificUser@118(WorkflowStepArgument@1001 : Record 1523;ApprovalEntryArgument@1000 : Record 454);
    VAR
      UserSetup@1006 : Record 91;
      UsrId@1005 : Code[50];
      SequenceNo@1004 : Integer;
    BEGIN
      UsrId := WorkflowStepArgument."Approver User ID";

      SequenceNo := GetLastSequenceNo(ApprovalEntryArgument);

      IF NOT UserSetup.GET(UsrId) THEN
        ERROR(UserIdNotInSetupErr,UsrId);

      SequenceNo += 1;
      MakeApprovalEntry(ApprovalEntryArgument,SequenceNo,UsrId,WorkflowStepArgument);
    END;

    LOCAL PROCEDURE MakeApprovalEntry@23(ApprovalEntryArgument@1007 : Record 454;SequenceNo@1001 : Integer;ApproverId@1003 : Code[50];WorkflowStepArgument@1005 : Record 1523);
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        "Table ID" := ApprovalEntryArgument."Table ID";
        "Document Type" := ApprovalEntryArgument."Document Type";
        "Document No." := ApprovalEntryArgument."Document No.";
        "Salespers./Purch. Code" := ApprovalEntryArgument."Salespers./Purch. Code";
        "Sequence No." := SequenceNo;
        "Sender ID" := USERID;
        Amount := ApprovalEntryArgument.Amount;
        "Amount (LCY)" := ApprovalEntryArgument."Amount (LCY)";
        "Currency Code" := ApprovalEntryArgument."Currency Code";
        "Approver ID" := ApproverId;
        "Workflow Step Instance ID" := ApprovalEntryArgument."Workflow Step Instance ID";
        IF ApproverId = USERID THEN
          Status := Status::Approved
        ELSE
          Status := Status::Created;
        "Date-Time Sent for Approval" := CREATEDATETIME(TODAY,TIME);
        "Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
        "Last Modified By User ID" := USERID;
        "Due Date" := CALCDATE(WorkflowStepArgument."Due Date Formula",TODAY);

        CASE WorkflowStepArgument."Delegate After" OF
          WorkflowStepArgument."Delegate After"::Never:
            EVALUATE("Delegation Date Formula",'');
          WorkflowStepArgument."Delegate After"::"1 day":
            EVALUATE("Delegation Date Formula",'<1D>');
          WorkflowStepArgument."Delegate After"::"2 days":
            EVALUATE("Delegation Date Formula",'<2D>');
          WorkflowStepArgument."Delegate After"::"5 days":
            EVALUATE("Delegation Date Formula",'<5D>');
          ELSE
            EVALUATE("Delegation Date Formula",'');
        END;
        "Available Credit Limit (LCY)" := ApprovalEntryArgument."Available Credit Limit (LCY)";
        SetApproverType(WorkflowStepArgument,ApprovalEntry);
        SetLimitType(WorkflowStepArgument,ApprovalEntry);
        "Record ID to Approve" := ApprovalEntryArgument."Record ID to Approve";
        "Approval Code" := ApprovalEntryArgument."Approval Code";
        INSERT(TRUE);
      END;
    END;

    PROCEDURE CalcPurchaseDocAmount@24(PurchaseHeader@1002 : Record 38;VAR ApprovalAmount@1001 : Decimal;VAR ApprovalAmountLCY@1000 : Decimal);
    VAR
      TempPurchaseLine@1009 : TEMPORARY Record 39;
      TotalPurchaseLine@1008 : Record 39;
      TotalPurchaseLineLCY@1007 : Record 39;
      PurchPost@1006 : Codeunit 90;
      TempAmount@1005 : Decimal;
      VAtText@1004 : Text[30];
    BEGIN
      PurchaseHeader.CalcInvDiscForHeader;
      PurchPost.GetPurchLines(PurchaseHeader,TempPurchaseLine,0);
      CLEAR(PurchPost);
      PurchPost.SumPurchLinesTemp(
        PurchaseHeader,TempPurchaseLine,0,TotalPurchaseLine,TotalPurchaseLineLCY,
        TempAmount,VAtText);
      ApprovalAmount := TotalPurchaseLine.Amount;
      ApprovalAmountLCY := TotalPurchaseLineLCY.Amount;
    END;

    PROCEDURE CalcSalesDocAmount@82(SalesHeader@1000 : Record 36;VAR ApprovalAmount@1001 : Decimal;VAR ApprovalAmountLCY@1002 : Decimal);
    VAR
      TempSalesLine@1009 : TEMPORARY Record 37;
      TotalSalesLine@1008 : Record 37;
      TotalSalesLineLCY@1007 : Record 37;
      SalesPost@1006 : Codeunit 80;
      TempAmount@1005 : ARRAY [5] OF Decimal;
      VAtText@1004 : Text[30];
    BEGIN
      SalesHeader.CalcInvDiscForHeader;
      SalesPost.GetSalesLines(SalesHeader,TempSalesLine,0);
      CLEAR(SalesPost);
      SalesPost.SumSalesLinesTemp(
        SalesHeader,TempSalesLine,0,TotalSalesLine,TotalSalesLineLCY,
        TempAmount[1],VAtText,TempAmount[2],TempAmount[3],TempAmount[4]);
      ApprovalAmount := TotalSalesLine.Amount;
      ApprovalAmountLCY := TotalSalesLineLCY.Amount;
    END;

    LOCAL PROCEDURE PopulateApprovalEntryArgument@80(RecRef@1000 : RecordRef;WorkflowStepInstance@1009 : Record 1504;VAR ApprovalEntryArgument@1001 : Record 454);
    VAR
      Customer@1006 : Record 18;
      GenJournalBatch@1008 : Record 232;
      GenJournalLine@1007 : Record 81;
      PurchaseHeader@1003 : Record 38;
      SalesHeader@1004 : Record 36;
      IncomingDocument@1010 : Record 130;
      ApprovalAmount@1002 : Decimal;
      ApprovalAmountLCY@1005 : Decimal;
    BEGIN
      ApprovalEntryArgument.INIT;
      ApprovalEntryArgument."Table ID" := RecRef.NUMBER;
      ApprovalEntryArgument."Record ID to Approve" := RecRef.RECORDID;
      ApprovalEntryArgument."Document Type" := ApprovalEntryArgument."Document Type"::" ";
      ApprovalEntryArgument."Approval Code" := WorkflowStepInstance."Workflow Code";
      ApprovalEntryArgument."Workflow Step Instance ID" := WorkflowStepInstance.ID;

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchaseHeader);
            CalcPurchaseDocAmount(PurchaseHeader,ApprovalAmount,ApprovalAmountLCY);
            ApprovalEntryArgument."Document Type" := PurchaseHeader."Document Type";
            ApprovalEntryArgument."Document No." := PurchaseHeader."No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := PurchaseHeader."Purchaser Code";
            ApprovalEntryArgument.Amount := ApprovalAmount;
            ApprovalEntryArgument."Amount (LCY)" := ApprovalAmountLCY;
            ApprovalEntryArgument."Currency Code" := PurchaseHeader."Currency Code";
          END;
        DATABASE::"Sales Header":
          BEGIN
            RecRef.SETTABLE(SalesHeader);
            CalcSalesDocAmount(SalesHeader,ApprovalAmount,ApprovalAmountLCY);
            ApprovalEntryArgument."Document Type" := SalesHeader."Document Type";
            ApprovalEntryArgument."Document No." := SalesHeader."No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := SalesHeader."Salesperson Code";
            ApprovalEntryArgument.Amount := ApprovalAmount;
            ApprovalEntryArgument."Amount (LCY)" := ApprovalAmountLCY;
            ApprovalEntryArgument."Currency Code" := SalesHeader."Currency Code";
            ApprovalEntryArgument."Available Credit Limit (LCY)" := GetAvailableCreditLimit(SalesHeader);
          END;
        DATABASE::Customer:
          BEGIN
            RecRef.SETTABLE(Customer);
            ApprovalEntryArgument."Salespers./Purch. Code" := Customer."Salesperson Code";
            ApprovalEntryArgument."Currency Code" := Customer."Currency Code";
            ApprovalEntryArgument."Available Credit Limit (LCY)" := Customer.CalcAvailableCredit;
          END;
        DATABASE::"Gen. Journal Batch":
          RecRef.SETTABLE(GenJournalBatch);
        DATABASE::"Gen. Journal Line":
          BEGIN
            RecRef.SETTABLE(GenJournalLine);
            ApprovalEntryArgument."Document Type" := GenJournalLine."Document Type";
            ApprovalEntryArgument."Document No." := GenJournalLine."Document No.";
            ApprovalEntryArgument."Salespers./Purch. Code" := GenJournalLine."Salespers./Purch. Code";
            ApprovalEntryArgument.Amount := GenJournalLine.Amount;
            ApprovalEntryArgument."Amount (LCY)" := GenJournalLine."Amount (LCY)";
            ApprovalEntryArgument."Currency Code" := GenJournalLine."Currency Code";
          END;
        DATABASE::"Incoming Document":
          BEGIN
            RecRef.SETTABLE(IncomingDocument);
            ApprovalEntryArgument."Document No." := FORMAT(IncomingDocument."Entry No.");
          END;
      END;
    END;

    PROCEDURE CreateApprovalEntryNotification@50(ApprovalEntry@1000 : Record 454;WorkflowStepInstance@1001 : Record 1504);
    VAR
      WorkflowStepArgument@1002 : Record 1523;
      NotificationEntry@1003 : Record 1511;
    BEGIN
      IF NOT WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        EXIT;

      IF WorkflowStepArgument."Notification User ID" = '' THEN
        WorkflowStepArgument.VALIDATE("Notification User ID",ApprovalEntry."Approver ID");

      ApprovalEntry.RESET;
      NotificationEntry.CreateNew(
        NotificationEntry.Type::Approval,WorkflowStepArgument."Notification User ID",
        ApprovalEntry,WorkflowStepArgument."Link Target Page",WorkflowStepArgument."Custom Link");
    END;

    LOCAL PROCEDURE SetApproverType@71(WorkflowStepArgument@1001 : Record 1523;VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      CASE WorkflowStepArgument."Approver Type" OF
        WorkflowStepArgument."Approver Type"::"Salesperson/Purchaser":
          ApprovalEntry."Approval Type" := ApprovalEntry."Approval Type"::"Sales Pers./Purchaser";
        WorkflowStepArgument."Approver Type"::Approver:
          ApprovalEntry."Approval Type" := ApprovalEntry."Approval Type"::Approver;
        WorkflowStepArgument."Approver Type"::"Workflow User Group":
          ApprovalEntry."Approval Type" := ApprovalEntry."Approval Type"::"Workflow User Group";
      END;
    END;

    LOCAL PROCEDURE SetLimitType@81(WorkflowStepArgument@1000 : Record 1523;VAR ApprovalEntry@1001 : Record 454);
    BEGIN
      CASE WorkflowStepArgument."Approver Limit Type" OF
        WorkflowStepArgument."Approver Limit Type"::"Approver Chain",
        WorkflowStepArgument."Approver Limit Type"::"First Qualified Approver":
          ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"Approval Limits";
        WorkflowStepArgument."Approver Limit Type"::"Direct Approver":
          ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"No Limits";
        WorkflowStepArgument."Approver Limit Type"::"Specific Approver":
          ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"No Limits";
      END;

      IF ApprovalEntry."Approval Type" = ApprovalEntry."Approval Type"::"Workflow User Group" THEN
        ApprovalEntry."Limit Type" := ApprovalEntry."Limit Type"::"No Limits";
    END;

    LOCAL PROCEDURE IsSufficientPurchApprover@12(UserSetup@1000 : Record 91;DocumentType@1003 : Option;ApprovalAmountLCY@1002 : Decimal) : Boolean;
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      IF UserSetup."User ID" = UserSetup."Approver ID" THEN
        EXIT(TRUE);

      CASE DocumentType OF
        PurchaseHeader."Document Type"::Quote:
          IF UserSetup."Unlimited Request Approval" OR
             ((ApprovalAmountLCY <= UserSetup."Request Amount Approval Limit") AND (UserSetup."Request Amount Approval Limit" <> 0))
          THEN
            EXIT(TRUE);
        ELSE
          IF UserSetup."Unlimited Purchase Approval" OR
             ((ApprovalAmountLCY <= UserSetup."Purchase Amount Approval Limit") AND (UserSetup."Purchase Amount Approval Limit" <> 0))
          THEN
            EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsSufficientSalesApprover@13(UserSetup@1000 : Record 91;ApprovalAmountLCY@1002 : Decimal) : Boolean;
    BEGIN
      IF UserSetup."User ID" = UserSetup."Approver ID" THEN
        EXIT(TRUE);

      IF UserSetup."Unlimited Sales Approval" OR
         ((ApprovalAmountLCY <= UserSetup."Sales Amount Approval Limit") AND (UserSetup."Sales Amount Approval Limit" <> 0))
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsSufficientGenJournalLineApprover@89(UserSetup@1000 : Record 91;ApprovalEntryArgument@1001 : Record 454) : Boolean;
    VAR
      GenJournalLine@1003 : Record 81;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GET(ApprovalEntryArgument."Record ID to Approve");
      RecRef.SETTABLE(GenJournalLine);

      IF GenJournalLine.IsForPurchase THEN
        EXIT(IsSufficientPurchApprover(UserSetup,ApprovalEntryArgument."Document Type",ApprovalEntryArgument."Amount (LCY)"));

      IF GenJournalLine.IsForSales THEN
        EXIT(IsSufficientSalesApprover(UserSetup,ApprovalEntryArgument."Amount (LCY)"));

      EXIT(TRUE);
    END;

    PROCEDURE IsSufficientApprover@20(UserSetup@1001 : Record 91;ApprovalEntryArgument@1003 : Record 454) : Boolean;
    BEGIN
      CASE ApprovalEntryArgument."Table ID" OF
        DATABASE::"Purchase Header":
          EXIT(IsSufficientPurchApprover(UserSetup,ApprovalEntryArgument."Document Type",ApprovalEntryArgument."Amount (LCY)"));
        DATABASE::"Sales Header":
          EXIT(IsSufficientSalesApprover(UserSetup,ApprovalEntryArgument."Amount (LCY)"));
        DATABASE::"Gen. Journal Batch":
          MESSAGE(ApporvalChainIsUnsupportedMsg,FORMAT(ApprovalEntryArgument."Record ID to Approve"));
        DATABASE::"Gen. Journal Line":
          EXIT(IsSufficientGenJournalLineApprover(UserSetup,ApprovalEntryArgument));
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetAvailableCreditLimit@25(SalesHeader@1000 : Record 36) : Decimal;
    BEGIN
      EXIT(SalesHeader.CheckAvailableCreditLimit);
    END;

    PROCEDURE PrePostApprovalCheckSales@38(VAR SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      IF IsSalesHeaderPendingApproval(SalesHeader) THEN
        ERROR(SalesPrePostCheckErr,SalesHeader."Document Type",SalesHeader."No.");

      EXIT(TRUE);
    END;

    PROCEDURE PrePostApprovalCheckPurch@39(VAR PurchaseHeader@1001 : Record 38) : Boolean;
    BEGIN
      IF IsPurchaseHeaderPendingApproval(PurchaseHeader) THEN
        ERROR(PurchPrePostCheckErr,PurchaseHeader."Document Type",PurchaseHeader."No.");

      EXIT(TRUE);
    END;

    PROCEDURE IsIncomingDocApprovalsWorkflowEnabled@102(VAR IncomingDocument@1002 : Record 130) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(IncomingDocument,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode));
    END;

    PROCEDURE IsPurchaseApprovalsWorkflowEnabled@59(VAR PurchaseHeader@1002 : Record 38) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(PurchaseHeader,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode));
    END;

    PROCEDURE IsPurchaseHeaderPendingApproval@113(VAR PurchaseHeader@1000 : Record 38) : Boolean;
    BEGIN
      IF PurchaseHeader.Status <> PurchaseHeader.Status::Open THEN
        EXIT(FALSE);

      EXIT(IsPurchaseApprovalsWorkflowEnabled(PurchaseHeader));
    END;

    PROCEDURE IsSalesApprovalsWorkflowEnabled@17(VAR SalesHeader@1002 : Record 36) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(SalesHeader,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode));
    END;

    PROCEDURE IsSalesHeaderPendingApproval@119(VAR SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      IF SalesHeader.Status <> SalesHeader.Status::Open THEN
        EXIT(FALSE);

      EXIT(IsSalesApprovalsWorkflowEnabled(SalesHeader));
    END;

    PROCEDURE IsOverdueNotificationsWorkflowEnabled@42() : Boolean;
    VAR
      ApprovalEntry@1000 : Record 454;
    BEGIN
      ApprovalEntry.INIT;
      EXIT(WorkflowManagement.WorkflowExists(ApprovalEntry,ApprovalEntry,
          WorkflowEventHandling.RunWorkflowOnSendOverdueNotificationsCode));
    END;

    PROCEDURE IsGeneralJournalBatchApprovalsWorkflowEnabled@70(VAR GenJournalBatch@1002 : Record 232) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(GenJournalBatch,
          WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode));
    END;

    PROCEDURE IsGeneralJournalLineApprovalsWorkflowEnabled@72(VAR GenJournalLine@1002 : Record 81) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(GenJournalLine,
          WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode));
    END;

    PROCEDURE CheckPurchaseApprovalPossible@77(VAR PurchaseHeader@1002 : Record 38) : Boolean;
    BEGIN
      IF NOT IsPurchaseApprovalsWorkflowEnabled(PurchaseHeader) THEN
        ERROR(NoWorkflowEnabledErr);

      IF NOT PurchaseHeader.PurchLinesExist THEN
        ERROR(NothingToApproveErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckIncomingDocApprovalsWorkflowEnabled@192(VAR IncomingDocument@1002 : Record 130) : Boolean;
    BEGIN
      IF NOT IsIncomingDocApprovalsWorkflowEnabled(IncomingDocument) THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckSalesApprovalPossible@155(VAR SalesHeader@1002 : Record 36) : Boolean;
    BEGIN
      IF NOT IsSalesApprovalsWorkflowEnabled(SalesHeader) THEN
        ERROR(NoWorkflowEnabledErr);

      IF NOT SalesHeader.SalesLinesExist THEN
        ERROR(NothingToApproveErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckCustomerApprovalsWorkflowEnabled@11(VAR Customer@1002 : Record 18) : Boolean;
    BEGIN
      IF NOT WorkflowManagement.CanExecuteWorkflow(Customer,WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode) THEN BEGIN
        IF WorkflowManagement.EnabledWorkflowExist(DATABASE::Customer,WorkflowEventHandling.RunWorkflowOnCustomerChangedCode) THEN
          EXIT(FALSE);
        ERROR(NoWorkflowEnabledErr);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CheckVendorApprovalsWorkflowEnabled@83(VAR Vendor@1002 : Record 23) : Boolean;
    BEGIN
      IF NOT WorkflowManagement.CanExecuteWorkflow(Vendor,WorkflowEventHandling.RunWorkflowOnSendVendorForApprovalCode) THEN BEGIN
        IF WorkflowManagement.EnabledWorkflowExist(DATABASE::Vendor,WorkflowEventHandling.RunWorkflowOnVendorChangedCode) THEN
          EXIT(FALSE);
        ERROR(NoWorkflowEnabledErr);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CheckItemApprovalsWorkflowEnabled@84(VAR Item@1002 : Record 27) : Boolean;
    BEGIN
      IF NOT WorkflowManagement.CanExecuteWorkflow(Item,WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode) THEN BEGIN
        IF WorkflowManagement.EnabledWorkflowExist(DATABASE::Item,WorkflowEventHandling.RunWorkflowOnItemChangedCode) THEN
          EXIT(FALSE);
        ERROR(NoWorkflowEnabledErr);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CheckGeneralJournalBatchApprovalsWorkflowEnabled@74(VAR GenJournalBatch@1002 : Record 232) : Boolean;
    BEGIN
      IF NOT
         WorkflowManagement.CanExecuteWorkflow(GenJournalBatch,
           WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode)
      THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    PROCEDURE CheckGeneralJournalLineApprovalsWorkflowEnabled@73(VAR GenJournalLine@1002 : Record 81) : Boolean;
    BEGIN
      IF NOT
         WorkflowManagement.CanExecuteWorkflow(GenJournalLine,
           WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode)
      THEN
        ERROR(NoWorkflowEnabledErr);

      EXIT(TRUE);
    END;

    [EventSubscriber(Table,81,OnMoveGenJournalLine)]
    PROCEDURE PostApprovalEntriesMoveGenJournalLine@91(VAR Sender@1000 : Record 81;ToRecordID@1002 : RecordID);
    BEGIN
      PostApprovalEntries(Sender.RECORDID,ToRecordID,Sender."Document No.");
    END;

    [EventSubscriber(Table,81,OnAfterDeleteEvent)]
    PROCEDURE DeleteApprovalEntriesAfterDeleteGenJournalLine@94(VAR Rec@1000 : Record 81;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT Rec.ISTEMPORARY THEN
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [EventSubscriber(Table,232,OnMoveGenJournalBatch)]
    PROCEDURE PostApprovalEntriesMoveGenJournalBatch@36(VAR Sender@1000 : Record 232;ToRecordID@1001 : RecordID);
    VAR
      RecordRestrictionMgt@1002 : Codeunit 1550;
    BEGIN
      IF PostApprovalEntries(Sender.RECORDID,ToRecordID,'') THEN BEGIN
        RecordRestrictionMgt.AllowRecordUsage(Sender);
        DeleteApprovalEntries(Sender.RECORDID);
      END;
    END;

    [EventSubscriber(Table,232,OnAfterDeleteEvent)]
    PROCEDURE DeleteApprovalEntriesAfterDeleteGenJournalBatch@98(VAR Rec@1000 : Record 232;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT Rec.ISTEMPORARY THEN
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [EventSubscriber(Table,18,OnAfterDeleteEvent)]
    PROCEDURE DeleteApprovalEntriesAfterDeleteCustomer@99(VAR Rec@1000 : Record 18;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT Rec.ISTEMPORARY THEN
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [EventSubscriber(Table,23,OnAfterDeleteEvent)]
    PROCEDURE DeleteApprovalEntriesAfterDeleteVendor@112(VAR Rec@1000 : Record 23;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT Rec.ISTEMPORARY THEN
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    [EventSubscriber(Table,27,OnAfterDeleteEvent)]
    PROCEDURE DeleteApprovalEntriesAfterDeleteItem@109(VAR Rec@1000 : Record 27;RunTrigger@1001 : Boolean);
    BEGIN
      IF NOT Rec.ISTEMPORARY THEN
        DeleteApprovalEntries(Rec.RECORDID);
    END;

    PROCEDURE PostApprovalEntries@105(ApprovedRecordID@1003 : RecordID;PostedRecordID@1001 : RecordID;PostedDocNo@1002 : Code[20]) : Boolean;
    VAR
      ApprovalEntry@1000 : Record 454;
      PostedApprovalEntry@1004 : Record 456;
    BEGIN
      ApprovalEntry.SETAUTOCALCFIELDS("Pending Approvals","Number of Approved Requests","Number of Rejected Requests");
      ApprovalEntry.SETRANGE("Table ID",ApprovedRecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",ApprovedRecordID);
      IF NOT ApprovalEntry.FINDSET THEN
        EXIT(FALSE);

      REPEAT
        PostedApprovalEntry.INIT;
        PostedApprovalEntry.TRANSFERFIELDS(ApprovalEntry);
        PostedApprovalEntry."Number of Approved Requests" := ApprovalEntry."Number of Approved Requests";
        PostedApprovalEntry."Number of Rejected Requests" := ApprovalEntry."Number of Rejected Requests";
        PostedApprovalEntry."Table ID" := PostedRecordID.TABLENO;
        PostedApprovalEntry."Document No." := PostedDocNo;
        PostedApprovalEntry."Posted Record ID" := PostedRecordID;
        PostedApprovalEntry."Entry No." := 0;
        PostedApprovalEntry.INSERT(TRUE);
      UNTIL ApprovalEntry.NEXT = 0;

      PostApprovalCommentLines(ApprovedRecordID,PostedRecordID,PostedDocNo);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE PostApprovalCommentLines@90(ApprovedRecordID@1000 : RecordID;PostedRecordID@1003 : RecordID;PostedDocNo@1004 : Code[20]);
    VAR
      ApprovalCommentLine@1001 : Record 455;
      PostedApprovalCommentLine@1002 : Record 457;
    BEGIN
      ApprovalCommentLine.SETRANGE("Table ID",ApprovedRecordID.TABLENO);
      ApprovalCommentLine.SETRANGE("Record ID to Approve",ApprovedRecordID);
      IF ApprovalCommentLine.FINDSET THEN
        REPEAT
          PostedApprovalCommentLine.INIT;
          PostedApprovalCommentLine.TRANSFERFIELDS(ApprovalCommentLine);
          PostedApprovalCommentLine."Entry No." := 0;
          PostedApprovalCommentLine."Table ID" := PostedRecordID.TABLENO;
          PostedApprovalCommentLine."Document No." := PostedDocNo;
          PostedApprovalCommentLine."Posted Record ID" := PostedRecordID;
          PostedApprovalCommentLine.INSERT(TRUE);
        UNTIL ApprovalCommentLine.NEXT = 0;
    END;

    PROCEDURE ShowPostedApprovalEntries@60(PostedRecordID@1000 : RecordID);
    VAR
      PostedApprovalEntry@1001 : Record 456;
    BEGIN
      PostedApprovalEntry.FILTERGROUP(2);
      PostedApprovalEntry.SETRANGE("Posted Record ID",PostedRecordID);
      PostedApprovalEntry.FILTERGROUP(0);
      PAGE.RUN(PAGE::"Posted Approval Entries",PostedApprovalEntry);
    END;

    PROCEDURE DeletePostedApprovalEntries@40(PostedRecordID@1000 : RecordID);
    VAR
      PostedApprovalEntry@1003 : Record 456;
    BEGIN
      PostedApprovalEntry.SETRANGE("Table ID",PostedRecordID.TABLENO);
      PostedApprovalEntry.SETRANGE("Posted Record ID",PostedRecordID);
      PostedApprovalEntry.DELETEALL;
      DeletePostedApprovalCommentLines(PostedRecordID);
    END;

    LOCAL PROCEDURE DeletePostedApprovalCommentLines@37(PostedRecordID@1000 : RecordID);
    VAR
      PostedApprovalCommentLine@1003 : Record 457;
    BEGIN
      PostedApprovalCommentLine.SETRANGE("Table ID",PostedRecordID.TABLENO);
      PostedApprovalCommentLine.SETRANGE("Posted Record ID",PostedRecordID);
      PostedApprovalCommentLine.DELETEALL;
    END;

    PROCEDURE SetStatusToPendingApproval@47(VAR Variant@1000 : Variant);
    VAR
      SalesHeader@1002 : Record 36;
      PurchaseHeader@1003 : Record 38;
      IncomingDocument@1004 : Record 130;
      RecRef@1001 : RecordRef;
      Job@1000000000 : Record 167;
      ProductionOrder@1000000001 : Record 5405;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchaseHeader);
            PurchaseHeader.VALIDATE(Status,PurchaseHeader.Status::"Pending Approval");
            PurchaseHeader.MODIFY(TRUE);
            Variant := PurchaseHeader;
          END;
        DATABASE::"Sales Header":
          BEGIN
            RecRef.SETTABLE(SalesHeader);
            SalesHeader.VALIDATE(Status,SalesHeader.Status::"Pending Approval");
            SalesHeader.MODIFY(TRUE);
            Variant := SalesHeader;
          END;
        DATABASE::"Incoming Document":
          BEGIN
            RecRef.SETTABLE(IncomingDocument);
            IncomingDocument.VALIDATE(Status,IncomingDocument.Status::"Pending Approval");
            IncomingDocument.MODIFY(TRUE);
            Variant := IncomingDocument;
          END;
        //Chris
        DATABASE::Job:
          BEGIN
            RecRef.SETTABLE(Job);
            Job.VALIDATE("Approval Status",Job."Approval Status"::"Pending Approval");
            Job.MODIFY(TRUE);
            Variant := Job;
          END;
        //Chris
        DATABASE::"Production Order":
          BEGIN
              RecRef.SETTABLE(ProductionOrder);
              ProductionOrder.VALIDATE("Approval Status",ProductionOrder."Approval Status"::"Pending Approval");
              ProductionOrder.MODIFY(TRUE);
              Variant :=ProductionOrder;
          END;
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    PROCEDURE InformUserOnStatusChange@110(Variant@1001 : Variant;WorkflowInstanceId@1000 : GUID);
    VAR
      RecRef@1004 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          ShowPurchApprovalStatus(Variant);
        DATABASE::"Sales Header":
          ShowSalesApprovalStatus(Variant);
        ELSE
          ShowApprovalStatus(RecRef.RECORDID,WorkflowInstanceId);
      END;
    END;

    PROCEDURE GetApprovalComment@53(Variant@1000 : Variant);
    VAR
      BlankGUID@1001 : GUID;
    BEGIN
      ShowApprovalComments(Variant,BlankGUID);
    END;

    PROCEDURE GetApprovalCommentForWorkflowStepInstanceID@30(Variant@1000 : Variant;WorkflowStepInstanceID@1001 : GUID);
    BEGIN
      ShowApprovalComments(Variant,WorkflowStepInstanceID);
    END;

    LOCAL PROCEDURE ShowApprovalComments@95(Variant@1002 : Variant;WorkflowStepInstanceID@1000 : GUID);
    VAR
      ApprovalCommentLine@1001 : Record 455;
      ApprovalEntry@1004 : Record 454;
      ApprovalComments@1003 : Page 660;
      RecRef@1005 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            ApprovalCommentLine.SETRANGE("Table ID",RecRef.NUMBER);
            ApprovalCommentLine.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
          END;
        DATABASE::"Purchase Header":
          BEGIN
            ApprovalCommentLine.SETRANGE("Table ID",RecRef.NUMBER);
            ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
            FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecRef.RECORDID);
          END;
        DATABASE::"Sales Header":
          BEGIN
            ApprovalCommentLine.SETRANGE("Table ID",RecRef.NUMBER);
            ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
            FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecRef.RECORDID);
          END;
        ELSE BEGIN
          ApprovalCommentLine.SETRANGE("Table ID",RecRef.NUMBER);
          ApprovalCommentLine.SETRANGE("Record ID to Approve",RecRef.RECORDID);
          FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecRef.RECORDID);
        END;
      END;

      IF ISNULLGUID(WorkflowStepInstanceID) AND (NOT ISNULLGUID(ApprovalEntry."Workflow Step Instance ID")) THEN
        WorkflowStepInstanceID := ApprovalEntry."Workflow Step Instance ID";

      ApprovalComments.SETTABLEVIEW(ApprovalCommentLine);
      ApprovalComments.SetWorkflowStepInstanceID(WorkflowStepInstanceID);
      ApprovalComments.RUN;
    END;

    PROCEDURE HasOpenApprovalEntriesForCurrentUser@14(RecordID@1000 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      EXIT(FindOpenApprovalEntryForCurrUser(ApprovalEntry,RecordID));
    END;

    PROCEDURE HasOpenApprovalEntries@154(RecordID@1000 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      EXIT(NOT ApprovalEntry.ISEMPTY);
    END;

    PROCEDURE HasOpenOrPendingApprovalEntries@115(RecordID@1000 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Open,ApprovalEntry.Status::Created);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      EXIT(NOT ApprovalEntry.ISEMPTY);
    END;

    PROCEDURE HasApprovalEntries@15(RecordID@1001 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1000 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordID);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      EXIT(NOT ApprovalEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE HasPendingApprovalEntriesForWorkflow@156(RecId@1000 : RecordID;WorkflowInstanceId@1002 : GUID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Record ID to Approve",RecId);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Open,ApprovalEntry.Status::Created);
      ApprovalEntry.SETFILTER("Workflow Step Instance ID",WorkflowInstanceId);
      EXIT(NOT ApprovalEntry.ISEMPTY);
    END;

    PROCEDURE HasAnyOpenJournalLineApprovalEntries@187(JournalTemplateName@1000 : Code[20];JournalBatchName@1003 : Code[20]) : Boolean;
    VAR
      GenJournalLine@1001 : Record 81;
      ApprovalEntry@1002 : Record 454;
      GenJournalLineRecRef@1008 : RecordRef;
      GenJournalLineRecordID@1006 : RecordID;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      IF ApprovalEntry.ISEMPTY THEN
        EXIT(FALSE);

      GenJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      IF GenJournalLine.ISEMPTY THEN
        EXIT(FALSE);

      IF GenJournalLine.COUNT < ApprovalEntry.COUNT THEN BEGIN
        GenJournalLine.FINDSET;
        REPEAT
          IF HasOpenApprovalEntries(GenJournalLine.RECORDID) THEN
            EXIT(TRUE);
        UNTIL GenJournalLine.NEXT = 0;
      END ELSE BEGIN
        ApprovalEntry.FINDSET;
        REPEAT
          GenJournalLineRecordID := ApprovalEntry."Record ID to Approve";
          GenJournalLineRecRef := GenJournalLineRecordID.GETRECORD;
          GenJournalLineRecRef.SETTABLE(GenJournalLine);
          IF (GenJournalLine."Journal Template Name" = JournalTemplateName) AND
             (GenJournalLine."Journal Batch Name" = JournalBatchName)
          THEN
            EXIT(TRUE);
        UNTIL ApprovalEntry.NEXT = 0;
      END;

      EXIT(FALSE)
    END;

    PROCEDURE TrySendJournalBatchApprovalRequest@54(VAR GenJournalLine@1000 : Record 81);
    VAR
      GenJournalBatch@1001 : Record 232;
    BEGIN
      GetGeneralJournalBatch(GenJournalBatch,GenJournalLine);
      CheckGeneralJournalBatchApprovalsWorkflowEnabled(GenJournalBatch);
      IF HasOpenApprovalEntries(GenJournalBatch.RECORDID) OR
         HasAnyOpenJournalLineApprovalEntries(GenJournalBatch."Journal Template Name",GenJournalBatch.Name)
      THEN
        ERROR(PendingJournalBatchApprovalExistsErr);
      OnSendGeneralJournalBatchForApproval(GenJournalBatch);
    END;

    PROCEDURE TrySendJournalLineApprovalRequests@183(VAR GenJournalLine@1000 : Record 81);
    VAR
      LinesSent@1001 : Integer;
    BEGIN
      IF GenJournalLine.COUNT = 1 THEN
        CheckGeneralJournalLineApprovalsWorkflowEnabled(GenJournalLine);

      REPEAT
        IF WorkflowManagement.CanExecuteWorkflow(GenJournalLine,
             WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode) AND
           NOT HasOpenApprovalEntries(GenJournalLine.RECORDID)
        THEN BEGIN
          OnSendGeneralJournalLineForApproval(GenJournalLine);
          LinesSent += 1;
        END;
      UNTIL GenJournalLine.NEXT = 0;

      CASE LinesSent OF
        0:
          MESSAGE(NoApprovalsSentMsg);
        GenJournalLine.COUNT:
          MESSAGE(PendingApprovalForSelectedLinesMsg);
        ELSE
          MESSAGE(PendingApprovalForSomeSelectedLinesMsg);
      END;
    END;

    PROCEDURE TryCancelJournalBatchApprovalRequest@189(VAR GenJournalLine@1000 : Record 81);
    VAR
      GenJournalBatch@1001 : Record 232;
    BEGIN
      GetGeneralJournalBatch(GenJournalBatch,GenJournalLine);
      OnCancelGeneralJournalBatchApprovalRequest(GenJournalBatch);
    END;

    PROCEDURE TryCancelJournalLineApprovalRequests@88(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      REPEAT
        IF HasOpenApprovalEntries(GenJournalLine.RECORDID) THEN
          OnCancelGeneralJournalLineApprovalRequest(GenJournalLine);
      UNTIL GenJournalLine.NEXT = 0;
      MESSAGE(ApprovalReqCanceledForSelectedLinesMsg);
    END;

    PROCEDURE ShowJournalApprovalEntries@55(VAR GenJournalLine@1000 : Record 81);
    VAR
      ApprovalEntry@1002 : Record 454;
      GenJournalBatch@1001 : Record 232;
    BEGIN
      GetGeneralJournalBatch(GenJournalBatch,GenJournalLine);

      ApprovalEntry.SETFILTER("Table ID",'%1|%2',DATABASE::"Gen. Journal Batch",DATABASE::"Gen. Journal Line");
      ApprovalEntry.SETFILTER("Record ID to Approve",'%1|%2',GenJournalBatch.RECORDID,GenJournalLine.RECORDID);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      PAGE.RUN(PAGE::"Approval Entries",ApprovalEntry);
    END;

    LOCAL PROCEDURE GetGeneralJournalBatch@87(VAR GenJournalBatch@1000 : Record 232;VAR GenJournalLine@1001 : Record 81);
    BEGIN
      IF NOT GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name") THEN
        GenJournalBatch.GET(GenJournalLine.GETFILTER("Journal Template Name"),GenJournalLine.GETFILTER("Journal Batch Name"));
    END;

    PROCEDURE RenameApprovalEntries@79(OldRecordId@1000 : RecordID;NewRecordId@1001 : RecordID);
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Record ID to Approve",OldRecordId);
      IF ApprovalEntry.FINDFIRST THEN
        ApprovalEntry.MODIFYALL("Record ID to Approve",NewRecordId,TRUE);
      ChangeApprovalComments(OldRecordId,NewRecordId);
    END;

    LOCAL PROCEDURE ChangeApprovalComments@85(OldRecordId@1000 : RecordID;NewRecordId@1001 : RecordID);
    VAR
      ApprovalCommentLine@1002 : Record 455;
    BEGIN
      ApprovalCommentLine.SETRANGE("Record ID to Approve",OldRecordId);
      ApprovalCommentLine.MODIFYALL("Record ID to Approve",NewRecordId,TRUE);
    END;

    PROCEDURE DeleteApprovalEntries@93(RecordIDToApprove@1000 : RecordID);
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecordIDToApprove.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecordIDToApprove);
      ApprovalEntry.DELETEALL(TRUE);
      DeleteApprovalCommentLines(RecordIDToApprove);
    END;

    PROCEDURE DeleteApprovalCommentLines@92(RecordIDToApprove@1000 : RecordID);
    VAR
      ApprovalCommentLine@1001 : Record 455;
    BEGIN
      ApprovalCommentLine.SETRANGE("Table ID",RecordIDToApprove.TABLENO);
      ApprovalCommentLine.SETRANGE("Record ID to Approve",RecordIDToApprove);
      ApprovalCommentLine.DELETEALL(TRUE);
    END;

    PROCEDURE CopyApprovalEntryQuoteToOrder@66(FromRecID@1006 : RecordID;ToDocNo@1007 : Code[20];ToRecID@1008 : RecordID);
    VAR
      FromApprovalEntry@1000 : Record 454;
      ToApprovalEntry@1001 : Record 454;
      FromApprovalCommentLine@1002 : Record 455;
      ToApprovalCommentLine@1003 : Record 455;
      LastEntryNo@1004 : Integer;
    BEGIN
      FromApprovalEntry.SETRANGE("Table ID",FromRecID.TABLENO);
      FromApprovalEntry.SETRANGE("Record ID to Approve",FromRecID);
      IF FromApprovalEntry.FINDSET THEN BEGIN
        ToApprovalEntry.FINDLAST;
        LastEntryNo := ToApprovalEntry."Entry No.";
        REPEAT
          ToApprovalEntry := FromApprovalEntry;
          ToApprovalEntry."Entry No." := LastEntryNo + 1;
          ToApprovalEntry."Document Type" := ToApprovalEntry."Document Type"::Order;
          ToApprovalEntry."Document No." := ToDocNo;
          ToApprovalEntry."Record ID to Approve" := ToRecID;
          LastEntryNo += 1;
          ToApprovalEntry.INSERT;
        UNTIL FromApprovalEntry.NEXT = 0;

        FromApprovalCommentLine.SETRANGE("Table ID",FromRecID.TABLENO);
        FromApprovalCommentLine.SETRANGE("Record ID to Approve",FromRecID);
        IF FromApprovalCommentLine.FINDSET THEN BEGIN
          ToApprovalCommentLine.FINDLAST;
          LastEntryNo := ToApprovalCommentLine."Entry No.";
          REPEAT
            ToApprovalCommentLine := FromApprovalCommentLine;
            ToApprovalCommentLine."Entry No." := LastEntryNo + 1;
            ToApprovalCommentLine."Document Type" := ToApprovalCommentLine."Document Type"::Order;
            ToApprovalCommentLine."Document No." := ToDocNo;
            ToApprovalCommentLine."Record ID to Approve" := ToRecID;
            ToApprovalCommentLine.INSERT;
            LastEntryNo += 1;
          UNTIL FromApprovalCommentLine.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE GetLastSequenceNo@16(ApprovalEntryArgument@1000 : Record 454) : Integer;
    VAR
      ApprovalEntry@1001 : Record 454;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        SETCURRENTKEY("Record ID to Approve","Workflow Step Instance ID","Sequence No.");
        SETRANGE("Table ID",ApprovalEntryArgument."Table ID");
        SETRANGE("Record ID to Approve",ApprovalEntryArgument."Record ID to Approve");
        SETRANGE("Workflow Step Instance ID",ApprovalEntryArgument."Workflow Step Instance ID");
        IF FINDLAST THEN
          EXIT("Sequence No.");
      END;
      EXIT(0);
    END;

    PROCEDURE OpenApprovalEntriesPage@75(RecId@1000 : RecordID);
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",RecId.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecId);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);
      PAGE.RUNMODAL(PAGE::"Approval Entries",ApprovalEntry);
    END;

    PROCEDURE CanCancelApprovalForRecord@106(RecID@1000 : RecordID) : Boolean;
    VAR
      ApprovalEntry@1001 : Record 454;
      UserSetup@1002 : Record 91;
    BEGIN
      IF NOT UserSetup.GET(USERID) THEN
        EXIT(FALSE);

      ApprovalEntry.SETRANGE("Table ID",RecID.TABLENO);
      ApprovalEntry.SETRANGE("Record ID to Approve",RecID);
      ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
      ApprovalEntry.SETRANGE("Related to Change",FALSE);

      IF NOT UserSetup."Approval Administrator" THEN
        ApprovalEntry.SETRANGE("Sender ID",USERID);
      EXIT(ApprovalEntry.FINDFIRST);
    END;

    LOCAL PROCEDURE FindUserSetupBySalesPurchCode@114(VAR UserSetup@1000 : Record 91;ApprovalEntryArgument@1001 : Record 454);
    BEGIN
      IF ApprovalEntryArgument."Salespers./Purch. Code" <> '' THEN BEGIN
        UserSetup.SETCURRENTKEY("Salespers./Purch. Code");
        UserSetup.SETRANGE("Salespers./Purch. Code",ApprovalEntryArgument."Salespers./Purch. Code");
        IF NOT UserSetup.FINDFIRST THEN
          ERROR(
            PurchaserUserNotFoundErr,UserSetup."User ID",UserSetup.FIELDCAPTION("Salespers./Purch. Code"),
            UserSetup."Salespers./Purch. Code");
        EXIT;
      END;
    END;

    LOCAL PROCEDURE CheckUserAsApprovalAdministrator@116();
    VAR
      UserSetup@1000 : Record 91;
    BEGIN
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Approval Administrator");
    END;

    LOCAL PROCEDURE FindApprovedApprovalEntryForWorkflowUserGroup@122(VAR ApprovalEntry@1000 : Record 454;WorkflowStepInstance@1005 : Record 1504) : Boolean;
    VAR
      WorkflowStepArgument@1001 : Record 1523;
      WorkflowResponseHandling@1003 : Codeunit 1521;
      WorkflowInstance@1004 : Query 1501;
    BEGIN
      WorkflowInstance.SETRANGE(Function_Name,WorkflowResponseHandling.CreateApprovalRequestsCode);
      WorkflowInstance.SETRANGE(Record_ID,WorkflowStepInstance."Record ID");
      WorkflowInstance.SETRANGE(Code,WorkflowStepInstance."Workflow Code");
      WorkflowInstance.SETRANGE(Type,WorkflowInstance.Type::Response);
      WorkflowInstance.SETRANGE(Status,WorkflowInstance.Status::Completed);
      WorkflowInstance.OPEN;
      WHILE WorkflowInstance.READ DO
        IF WorkflowStepInstance.GET(WorkflowInstance.Instance_ID,WorkflowInstance.Code,WorkflowInstance.Step_ID) THEN
          IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
            IF WorkflowStepArgument."Approver Type" = WorkflowStepArgument."Approver Type"::"Workflow User Group" THEN BEGIN
              ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Approved);
              EXIT(ApprovalEntry.FINDLAST);
            END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE OpenApprovalEntriesForWorkflowStepInstanceExist@117(ApprovalEntry@1001 : Record 454;WorkflowStepInstanceRecID@1002 : RecordID) : Boolean;
    VAR
      ApprovalEntry2@1000 : Record 454;
    BEGIN
      ApprovalEntry2.SETFILTER("Record ID to Approve",'%1|%2',WorkflowStepInstanceRecID,ApprovalEntry."Record ID to Approve");
      ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Open);
      ApprovalEntry2.SETRANGE("Workflow Step Instance ID",ApprovalEntry."Workflow Step Instance ID");
      EXIT(NOT ApprovalEntry2.ISEMPTY);

      //Chris Function added **ST**
    END;

    [Integration]
    PROCEDURE OnSendJobsforApproval@1000000000(VAR Job@1000000000 : Record 167);
    BEGIN
    END;

    PROCEDURE IsJobWorkflowEnabled@1000000002(VAR Job@1000000000 : Record 167) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(Job,WorkflowEventHandling.RunWorkflowOnSendJobforApprovalCode1));
    END;

    PROCEDURE CheckJobWorkflowEnabled@1000000003(VAR Job@1000000000 : Record 167) : Boolean;
    BEGIN
      IF NOT IsJobWorkflowEnabled(Job) THEN
        ERROR(NoWorkflowEnabledErr);
    END;

    PROCEDURE ShowJobApprovalStatus@1000000004(Job@1000000000 : Record 167);
    BEGIN
      Job.FIND;

      CASE Job."Approval Status" OF
        Job."Approval Status"::Released:
          MESSAGE(DocStatusChangedMsg,Job."No.",Job."Approval Status");
        Job."Approval Status"::"Pending Approval":
          IF HasOpenOrPendingApprovalEntries(Job.RECORDID) THEN
            MESSAGE(PendingApprovalMsg);
          END;

      //Chris Function added **EN**

      //MARCUS -
    END;

    [Integration]
    PROCEDURE OnSendProdOrderforApproval@1000000001(VAR ProdOrder@1000000000 : Record 5405);
    BEGIN
    END;

    PROCEDURE IsProdOrderWorkflowEnabled@1000000005(VAR ProdOrder@1000000000 : Record 5405) : Boolean;
    BEGIN
      EXIT(WorkflowManagement.CanExecuteWorkflow(ProdOrder,WorkflowEventHandling.RunWorkflowOnSendProdOrderforApprovalCode));
    END;

    PROCEDURE CheckProdOrderWorkflowEnabled@1000000006(VAR ProdOrder@1000000000 : Record 5405);
    BEGIN
      IF NOT IsProdOrderWorkflowEnabled(ProdOrder) THEN
        ERROR(NoWorkflowEnabledErr);
    END;

    PROCEDURE ShowProdOrderApprovalStatus@1000000007(VAR ProdOrder@1000000000 : Record 5405);
    BEGIN
      ProdOrder.FIND;

      CASE ProdOrder."Approval Status" OF
        ProdOrder."Approval Status"::Released:
          MESSAGE(DocStatusChangedMsg,ProdOrder."No.",ProdOrder."Approval Status");
        ProdOrder."Approval Status"::"Pending Approval":
          IF HasOpenOrPendingApprovalEntries(ProdOrder.RECORDID) THEN
            MESSAGE(PendingApprovalMsg);
          END;
    END;

    PROCEDURE IsProdHeaderPendingApproval@1000000008(VAR ProdHeader@1000000000 : Record 5405) : Boolean;
    BEGIN
      IF ProdHeader."Approval Status" <> ProdHeader."Approval Status"::Open THEN
        EXIT(FALSE);

      EXIT(IsProdOrderWorkflowEnabled(ProdHeader));
      //MARCUS +
    END;

    BEGIN
    {
      //Chris Function added
      // Marcus function added
    }
    END.
  }
}

OBJECT Codeunit 5407 Prod. Order Status Management
{
  OBJECT-PROPERTIES
  {
    Date=16/03/20;
    Time=18:22:41;
    Modified=Yes;
    Version List=NAVW111.00.00.22292,WF;
  }
  PROPERTIES
  {
    TableNo=5405;
    Permissions=TableData 242=r,
                TableData 5405=rimd,
                TableData 5410=rid,
                TableData 5896=rim;
    OnRun=VAR
            ChangeStatusForm@1005 : Page 99000882;
          BEGIN
            ChangeStatusForm.Set(Rec);
            IF ChangeStatusForm.RUNMODAL = ACTION::Yes THEN BEGIN
              ChangeStatusForm.ReturnPostingInfo(NewStatus,NewPostingDate,NewUpdateUnitCost);
              ChangeStatusOnProdOrder(Rec,NewStatus,NewPostingDate,NewUpdateUnitCost);
              COMMIT;
              MESSAGE(Text000,Status,TABLECAPTION,"No.",ToProdOrder.Status,ToProdOrder.TABLECAPTION,ToProdOrder."No.")
            END;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%2 %3  with status %1 has been changed to %5 %6 with status %4.;ENG=%2 %3  with status %1 has been changed to %5 %6 with status %4.';
      Text002@1002 : TextConst 'ENU=Posting Automatic consumption...\\;ENG=Posting Automatic consumption...\\';
      Text003@1003 : TextConst 'ENU=Posting lines         #1###### @2@@@@@@@@@@@@@;ENG=Posting lines         #1###### @2@@@@@@@@@@@@@';
      Text004@1004 : TextConst 'ENU=%1 %2 has not been finished. Some output is still missing. Do you still want to finish the order?;ENG=%1 %2 has not been finished. Some output is still missing. Do you still want to finish the order?';
      Text005@1005 : TextConst 'ENU=The update has been interrupted to respect the warning.;ENG=The update has been interrupted to respect the warning.';
      Text006@1006 : TextConst 'ENU=%1 %2 has not been finished. Some consumption is still missing. Do you still want to finish the order?;ENG=%1 %2 has not been finished. Some consumption is still missing. Do you still want to finish the order?';
      ToProdOrder@1018 : Record 5405;
      SourceCodeSetup@1009 : Record 242;
      Item@1030 : Record 27;
      InvtSetup@1022 : Record 313;
      DimMgt@1029 : Codeunit 408;
      ReserveProdOrderLine@1011 : Codeunit 99000837;
      ReserveProdOrderComp@1012 : Codeunit 99000838;
      ReservMgt@1017 : Codeunit 99000845;
      CalendarMgt@1013 : Codeunit 99000755;
      UpdateProdOrderCost@1014 : Codeunit 99000757;
      ACYMgt@1015 : Codeunit 5837;
      WhseProdRelease@1016 : Codeunit 5774;
      WhseOutputProdRelease@1008 : Codeunit 7325;
      InvtAdjmt@1020 : Codeunit 5895;
      NewStatus@1028 : 'Quote,Planned,Firm Planned,Released,Finished';
      NewPostingDate@1027 : Date;
      NewUpdateUnitCost@1026 : Boolean;
      SourceCodeSetupRead@1021 : Boolean;
      Text008@1001 : TextConst 'ENU=%1 %2 cannot be finished as the associated subcontract order %3 has not been fully delivered.;ENG=%1 %2 cannot be finished as the associated subcontract order %3 has not been fully delivered.';
      Text009@1010 : TextConst 'ENU=You cannot finish line %1 on %2 %3. It has consumption or capacity posted with no output.;ENG=You cannot finish line %1 on %2 %3. It has consumption or capacity posted with no output.';
      Text010@1019 : TextConst 'ENU=You must specify a %1 in %2 %3 %4.;ENG=You must specify a %1 in %2 %3 %4.';
      Text011@1000000000 : TextConst 'ENU=This document can only be released when the approval process is complete.';

    PROCEDURE ChangeStatusOnProdOrder@10(ProdOrder@1000 : Record 5405;NewStatus@1003 : 'Quote,Planned,Firm Planned,Released,Finished';NewPostingDate@1004 : Date;NewUpdateUnitCost@1005 : Boolean);
    BEGIN
      SetPostingInfo(NewStatus,NewPostingDate,NewUpdateUnitCost);
      OnBeforeChangeStatusOnProdOrder(ProdOrder,NewStatus);
      IF NewStatus = NewStatus::Finished THEN BEGIN
        CheckBeforeFinishProdOrder(ProdOrder);
        FlushProdOrder(ProdOrder,NewStatus,NewPostingDate);
        ReservMgt.DeleteDocumentReservation(DATABASE::"Prod. Order Line",ProdOrder.Status,ProdOrder."No.",FALSE);
        ErrorIfUnableToClearWIP(ProdOrder);
        TransProdOrder(ProdOrder);

        InvtSetup.GET;
        IF InvtSetup."Automatic Cost Adjustment" <>
           InvtSetup."Automatic Cost Adjustment"::Never
        THEN BEGIN
          InvtAdjmt.SetProperties(TRUE,InvtSetup."Automatic Cost Posting");
          InvtAdjmt.MakeMultiLevelAdjmt;
        END;

        WhseProdRelease.FinishedDelete(ProdOrder);
        WhseOutputProdRelease.FinishedDelete(ProdOrder);
      END ELSE BEGIN
        TransProdOrder(ProdOrder);
        FlushProdOrder(ProdOrder,NewStatus,NewPostingDate);
        WhseProdRelease.Release(ProdOrder);
      END;
      OnAfterChangeStatusOnProdOrder(ProdOrder,ToProdOrder);

      COMMIT;

      CLEAR(InvtAdjmt);
    END;

    LOCAL PROCEDURE TransProdOrder@1(VAR FromProdOrder@1000 : Record 5405);
    VAR
      ToProdOrderLine@1001 : Record 5406;
    BEGIN
      WITH FromProdOrder DO BEGIN
        ToProdOrderLine.LOCKTABLE;

        ToProdOrder := FromProdOrder;
        ToProdOrder.Status := NewStatus;

        CASE Status OF
          Status::Simulated:
            ToProdOrder."Simulated Order No." := "No.";
          Status::Planned:
            ToProdOrder."Planned Order No." := "No.";
          Status::"Firm Planned":
            ToProdOrder."Firm Planned Order No." := "No.";
          Status::Released:
            ToProdOrder."Finished Date" := NewPostingDate;
        END;

        ToProdOrder.TestNoSeries;
        IF (ToProdOrder.GetNoSeriesCode <> GetNoSeriesCode) AND
           (ToProdOrder.Status <> ToProdOrder.Status::Finished)
        THEN BEGIN
          ToProdOrder."No." := '';
          ToProdOrder."Due Date" := 0D;
        END;

        ToProdOrder.INSERT(TRUE);
        ToProdOrder."Starting Time" := "Starting Time";
        ToProdOrder."Starting Date" := "Starting Date";
        ToProdOrder."Ending Time" := "Ending Time";
        ToProdOrder."Ending Date" := "Ending Date";
        ToProdOrder."Due Date" := "Due Date";
        ToProdOrder."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ToProdOrder."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ToProdOrder."Dimension Set ID" := "Dimension Set ID";
        OnCopyFromProdOrder(ToProdOrder,FromProdOrder);
        ToProdOrder.MODIFY;

        TransProdOrderLine(FromProdOrder);
        TransProdOrderRtngLine(FromProdOrder);
        TransProdOrderComp(FromProdOrder);
        TransProdOrderRtngTool(FromProdOrder);
        TransProdOrderRtngPersnl(FromProdOrder);
        TransProdOrdRtngQltyMeas(FromProdOrder);
        TransProdOrderCmtLine(FromProdOrder);
        TransProdOrderRtngCmtLn(FromProdOrder);
        TransProdOrderBOMCmtLine(FromProdOrder);
        TransProdOrderCapNeed(FromProdOrder);
        OnAfterTransProdOrder(FromProdOrder,ToProdOrder);
        DELETE;
        FromProdOrder := ToProdOrder;
      END;
    END;

    LOCAL PROCEDURE TransProdOrderLine@21(FromProdOrder@1003 : Record 5405);
    VAR
      FromProdOrderLine@1021 : Record 5406;
      ToProdOrderLine@1020 : Record 5406;
      InvtAdjmtEntryOrder@1000 : Record 5896;
    BEGIN
      WITH FromProdOrderLine DO BEGIN
        SETRANGE(Status,FromProdOrder.Status);
        SETRANGE("Prod. Order No.",FromProdOrder."No.");
        LOCKTABLE;
        IF FINDSET THEN BEGIN
          REPEAT
            ToProdOrderLine := FromProdOrderLine;
            ToProdOrderLine.Status := ToProdOrder.Status;
            ToProdOrderLine."Prod. Order No." := ToProdOrder."No.";
            ToProdOrderLine.INSERT;
            IF NewStatus = NewStatus::Finished THEN BEGIN
              IF InvtAdjmtEntryOrder.GET(InvtAdjmtEntryOrder."Order Type"::Production,"Prod. Order No.","Line No.") THEN BEGIN
                InvtAdjmtEntryOrder."Routing No." := ToProdOrderLine."Routing No.";
                InvtAdjmtEntryOrder.MODIFY;
              END ELSE
                InvtAdjmtEntryOrder.SetProdOrderLine(FromProdOrderLine);
              InvtAdjmtEntryOrder."Cost is Adjusted" := FALSE;
              InvtAdjmtEntryOrder."Is Finished" := TRUE;
              InvtAdjmtEntryOrder.MODIFY;

              IF NewUpdateUnitCost THEN
                UpdateProdOrderCost.UpdateUnitCostOnProdOrder(FromProdOrderLine,TRUE,TRUE);
              ToProdOrderLine."Unit Cost (ACY)" :=
                ACYMgt.CalcACYAmt(ToProdOrderLine."Unit Cost",NewPostingDate,TRUE);
              ToProdOrderLine."Cost Amount (ACY)" :=
                ACYMgt.CalcACYAmt(ToProdOrderLine."Cost Amount",NewPostingDate,FALSE);
              ReservMgt.SetProdOrderLine(FromProdOrderLine);
              ReservMgt.DeleteReservEntries(TRUE,0);
            END ELSE BEGIN
              IF Item.GET("Item No.") THEN BEGIN
                IF (Item."Costing Method" <> Item."Costing Method"::Standard) AND NewUpdateUnitCost THEN
                  UpdateProdOrderCost.UpdateUnitCostOnProdOrder(FromProdOrderLine,FALSE,TRUE);
              END;
              ToProdOrderLine.BlockDynamicTracking(TRUE);
              ToProdOrderLine.VALIDATE(Quantity);
              ReserveProdOrderLine.TransferPOLineToPOLine(FromProdOrderLine,ToProdOrderLine,0,TRUE);
            END;
            ToProdOrderLine.VALIDATE("Unit Cost","Unit Cost");
            OnCopyFromProdOrderLine(ToProdOrderLine,FromProdOrderLine);
            ToProdOrderLine.MODIFY;
          UNTIL NEXT = 0;
          OnAfterTransProdOrderLines(FromProdOrder,ToProdOrder);
          DELETEALL;
        END;
      END;
    END;

    LOCAL PROCEDURE TransProdOrderRtngLine@20(FromProdOrder@1002 : Record 5405);
    VAR
      FromProdOrderRtngLine@1016 : Record 5409;
      ToProdOrderRtngLine@1015 : Record 5409;
      ProdOrderCapNeed@1000 : Record 5410;
    BEGIN
      WITH FromProdOrderRtngLine DO BEGIN
        SETRANGE(Status,FromProdOrder.Status);
        SETRANGE("Prod. Order No.",FromProdOrder."No.");
        LOCKTABLE;
        IF FINDSET THEN BEGIN
          REPEAT
            ToProdOrderRtngLine := FromProdOrderRtngLine;
            ToProdOrderRtngLine.Status := ToProdOrder.Status;
            ToProdOrderRtngLine."Prod. Order No." := ToProdOrder."No.";
            IF ToProdOrder.Status = ToProdOrder.Status::Released THEN
              ToProdOrderRtngLine."Routing Status" := "Routing Status"::Planned;

            IF ToProdOrder.Status IN [ToProdOrder.Status::"Firm Planned",ToProdOrder.Status::Released] THEN BEGIN
              ProdOrderCapNeed.SETRANGE("Prod. Order No.",FromProdOrder."No.");
              ProdOrderCapNeed.SETRANGE(Status,FromProdOrder.Status);
              ProdOrderCapNeed.SETRANGE("Routing Reference No.","Routing Reference No.");
              ProdOrderCapNeed.SETRANGE("Operation No.","Operation No.");
              ProdOrderCapNeed.SETRANGE("Requested Only",FALSE);
              ProdOrderCapNeed.CALCSUMS("Needed Time (ms)");
              ToProdOrderRtngLine."Expected Capacity Need" := ProdOrderCapNeed."Needed Time (ms)";
            END;
            OnCopyFromProdOrderRoutingLine(ToProdOrderRtngLine,FromProdOrderRtngLine);
            ToProdOrderRtngLine.INSERT;
          UNTIL NEXT = 0;
          DELETEALL;
        END;
      END;
    END;

    LOCAL PROCEDURE TransProdOrderComp@17(FromProdOrder@1002 : Record 5405);
    VAR
      FromProdOrderComp@1014 : Record 5407;
      ToProdOrderComp@1013 : Record 5407;
      Location@1000 : Record 14;
    BEGIN
      WITH FromProdOrderComp DO BEGIN
        SETRANGE(Status,FromProdOrder.Status);
        SETRANGE("Prod. Order No.",FromProdOrder."No.");
        LOCKTABLE;
        IF FINDSET THEN BEGIN
          REPEAT
            IF Location.GET("Location Code") AND
               Location."Bin Mandatory" AND
               NOT Location."Directed Put-away and Pick" AND
               (Status = Status::"Firm Planned") AND
               (ToProdOrder.Status = ToProdOrder.Status::Released) AND
               ("Flushing Method" IN ["Flushing Method"::Forward,"Flushing Method"::"Pick + Forward"]) AND
               ("Routing Link Code" = '') AND
               ("Bin Code" = '')
            THEN
              ERROR(
                Text010,
                FIELDCAPTION("Bin Code"),
                TABLECAPTION,
                FIELDCAPTION("Line No."),
                "Line No.");
            ToProdOrderComp := FromProdOrderComp;
            ToProdOrderComp.Status := ToProdOrder.Status;
            ToProdOrderComp."Prod. Order No." := ToProdOrder."No.";
            ToProdOrderComp.INSERT;
            IF NewStatus = NewStatus::Finished THEN BEGIN
              ReservMgt.SetProdOrderComponent(FromProdOrderComp);
              ReservMgt.DeleteReservEntries(TRUE,0);
            END ELSE BEGIN
              ToProdOrderComp.BlockDynamicTracking(TRUE);
              ToProdOrderComp.VALIDATE("Expected Quantity");
              ReserveProdOrderComp.TransferPOCompToPOComp(FromProdOrderComp,ToProdOrderComp,0,TRUE);
              IF ToProdOrderComp.Status IN [ToProdOrderComp.Status::"Firm Planned",ToProdOrderComp.Status::Released] THEN
                ToProdOrderComp.AutoReserve;
            END;
            OnCopyFromProdOrderComp(ToProdOrderComp,FromProdOrderComp);
            ToProdOrderComp.MODIFY;
          UNTIL NEXT = 0;
          OnAfterTransProdOrderComp(FromProdOrder,ToProdOrder);
          DELETEALL;
        END;
      END;
    END;

    LOCAL PROCEDURE TransProdOrderRtngTool@14(FromProdOrder@1002 : Record 5405);
    VAR
      FromProdOrderRtngTool@1010 : Record 5411;
      ToProdOrderRoutTool@1009 : Record 5411;
    BEGIN
      WITH FromProdOrderRtngTool DO BEGIN
        SETRANGE(Status,FromProdOrder.Status);
        SETRANGE("Prod. Order No.",FromProdOrder."No.");
        LOCKTABLE;
        IF FINDSET THEN BEGIN
          REPEAT
            ToProdOrderRoutTool := FromProdOrderRtngTool;
            ToProdOrderRoutTool.Status := ToProdOrder.Status;
            ToProdOrderRoutTool."Prod. Order No." := ToProdOrder."No.";
            ToProdOrderRoutTool.INSERT;
          UNTIL NEXT = 0;
          DELETEALL;
        END;
      END;
    END;

    LOCAL PROCEDURE TransProdOrderRtngPersnl@11(FromProdOrder@1002 : Record 5405);
    VAR
      FromProdOrderRtngPersonnel@1008 : Record 5412;
      ToProdOrderRtngPersonnel@1007 : Record 5412;
    BEGIN
      WITH FromProdOrderRtngPersonnel DO BEGIN
        SETRANGE(Status,FromProdOrder.Status);
        SETRANGE("Prod. Order No.",FromProdOrder."No.");
        LOCKTABLE;
        IF FINDSET THEN BEGIN
          REPEAT
            ToProdOrderRtngPersonnel := FromProdOrderRtngPersonnel;
            ToProdOrderRtngPersonnel.Status := ToProdOrder.Status;
            ToProdOrderRtngPersonnel."Prod. Order No." := ToProdOrder."No.";
            ToProdOrderRtngPersonnel.INSERT;
          UNTIL NEXT = 0;
          DELETEALL;
        END;
      END;
    END;

    LOCAL PROCEDURE TransProdOrdRtngQltyMeas@12(FromProdOrder@1002 : Record 5405);
    VAR
      FromProdOrderRtngQltyMeas@1010 : Record 5413;
      ToProdOrderRtngQltyMeas@1009 : Record 5413;
    BEGIN
      WITH FromProdOrderRtngQltyMeas DO BEGIN
        SETRANGE(Status,FromProdOrder.Status);
        SETRANGE("Prod. Order No.",FromProdOrder."No.");
        LOCKTABLE;
        IF FINDSET THEN BEGIN
          REPEAT
            ToProdOrderRtngQltyMeas := FromProdOrderRtngQltyMeas;
            ToProdOrderRtngQltyMeas.Status := ToProdOrder.Status;
            ToProdOrderRtngQltyMeas."Prod. Order No." := ToProdOrder."No.";
            ToProdOrderRtngQltyMeas.INSERT;
          UNTIL NEXT = 0;
          DELETEALL;
        END;
      END;
    END;

    LOCAL PROCEDURE TransProdOrderCmtLine@13(FromProdOrder@1002 : Record 5405);
    VAR
      FromProdOrderCommentLine@1001 : Record 5414;
      ToProdOrderCommentLine@1000 : Record 5414;
    BEGIN
      WITH FromProdOrderCommentLine DO BEGIN
        SETRANGE(Status,FromProdOrder.Status);
        SETRANGE("Prod. Order No.",FromProdOrder."No.");
        LOCKTABLE;
        IF FINDSET THEN BEGIN
          REPEAT
            ToProdOrderCommentLine := FromProdOrderCommentLine;
            ToProdOrderCommentLine.Status := ToProdOrder.Status;
            ToProdOrderCommentLine."Prod. Order No." := ToProdOrder."No.";
            ToProdOrderCommentLine.INSERT;
          UNTIL NEXT = 0;
          DELETEALL;
        END;
      END;
      TransferLinks(FromProdOrder,ToProdOrder);
    END;

    LOCAL PROCEDURE TransProdOrderRtngCmtLn@16(FromProdOrder@1002 : Record 5405);
    VAR
      FromProdOrderRtngComment@1006 : Record 5415;
      ToProdOrderRtngComment@1005 : Record 5415;
    BEGIN
      WITH FromProdOrderRtngComment DO BEGIN
        SETRANGE(Status,FromProdOrder.Status);
        SETRANGE("Prod. Order No.",FromProdOrder."No.");
        LOCKTABLE;
        IF FINDSET THEN BEGIN
          REPEAT
            ToProdOrderRtngComment := FromProdOrderRtngComment;
            ToProdOrderRtngComment.Status := ToProdOrder.Status;
            ToProdOrderRtngComment."Prod. Order No." := ToProdOrder."No.";
            ToProdOrderRtngComment.INSERT;
          UNTIL NEXT = 0;
          DELETEALL;
        END;
      END;
    END;

    LOCAL PROCEDURE TransProdOrderBOMCmtLine@18(FromProdOrder@1002 : Record 5405);
    VAR
      FromProdOrderBOMComment@1004 : Record 5416;
      ToProdOrderBOMComment@1003 : Record 5416;
    BEGIN
      WITH FromProdOrderBOMComment DO BEGIN
        SETRANGE(Status,FromProdOrder.Status);
        SETRANGE("Prod. Order No.",FromProdOrder."No.");
        LOCKTABLE;
        IF FINDSET THEN BEGIN
          REPEAT
            ToProdOrderBOMComment := FromProdOrderBOMComment;
            ToProdOrderBOMComment.Status := ToProdOrder.Status;
            ToProdOrderBOMComment."Prod. Order No." := ToProdOrder."No.";
            ToProdOrderBOMComment.INSERT;
          UNTIL NEXT = 0;
          DELETEALL;
        END;
      END;
    END;

    LOCAL PROCEDURE TransProdOrderCapNeed@23(FromProdOrder@1000 : Record 5405);
    VAR
      FromProdOrderCapNeed@1002 : Record 5410;
      ToProdOrderCapNeed@1001 : Record 5410;
    BEGIN
      WITH FromProdOrderCapNeed DO BEGIN
        SETRANGE(Status,FromProdOrder.Status);
        SETRANGE("Prod. Order No.",FromProdOrder."No.");
        SETRANGE("Requested Only",FALSE);
        IF NewStatus = NewStatus::Finished THEN
          DELETEALL
        ELSE BEGIN
          LOCKTABLE;
          IF FINDSET THEN BEGIN
            REPEAT
              ToProdOrderCapNeed := FromProdOrderCapNeed;
              ToProdOrderCapNeed.Status := ToProdOrder.Status;
              ToProdOrderCapNeed."Prod. Order No." := ToProdOrder."No.";
              ToProdOrderCapNeed."Allocated Time" := ToProdOrderCapNeed."Needed Time";
              OnCopyFromProdOrderCapacityNeed(ToProdOrderCapNeed,FromProdOrderCapNeed);
              ToProdOrderCapNeed.INSERT;
            UNTIL NEXT = 0;
            DELETEALL;
          END;
        END;
      END;
    END;

    PROCEDURE FlushProdOrder@4(ProdOrder@1000 : Record 5405;NewStatus@1001 : 'Simulated,Planned,Firm Planned,Released,Finished';PostingDate@1002 : Date);
    VAR
      Item@1003 : Record 27;
      ItemJnlLine@1020 : Record 83;
      ProdOrderLine@1006 : Record 5406;
      ProdOrderRtngLine@1008 : Record 5409;
      ProdOrderComp@1009 : Record 5407;
      ItemJnlPostLine@1004 : Codeunit 22;
      CostCalcMgt@1015 : Codeunit 5836;
      ItemTrackingMgt@1007 : Codeunit 6500;
      Window@1016 : Dialog;
      QtyToPost@1017 : Decimal;
      NoOfRecords@1018 : Integer;
      LineCount@1019 : Integer;
      OutputQty@1010 : Decimal;
      OutputQtyBase@1013 : Decimal;
      ActualOutputAndScrapQty@1012 : Decimal;
      ActualOutputAndScrapQtyBase@1011 : Decimal;
    BEGIN
      IF NewStatus < NewStatus::Released THEN
        EXIT;

      GetSourceCodeSetup;

      ProdOrderLine.LOCKTABLE;
      ProdOrderLine.RESET;
      ProdOrderLine.SETRANGE(Status,ProdOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrder."No.");
      IF ProdOrderLine.FINDSET THEN
        REPEAT
          ProdOrderRtngLine.SETCURRENTKEY("Prod. Order No.",Status,"Flushing Method");
          IF NewStatus = NewStatus::Released THEN
            ProdOrderRtngLine.SETRANGE("Flushing Method",ProdOrderRtngLine."Flushing Method"::Forward)
          ELSE BEGIN
            ProdOrderRtngLine.ASCENDING(FALSE); // In case of backward flushing on the last operation
            ProdOrderRtngLine.SETRANGE("Flushing Method",ProdOrderRtngLine."Flushing Method"::Backward);
          END;
          ProdOrderRtngLine.SETRANGE(Status,ProdOrderLine.Status);
          ProdOrderRtngLine.SETRANGE("Prod. Order No.",ProdOrder."No.");
          ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
          ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
          ProdOrderRtngLine.LOCKTABLE;
          IF ProdOrderRtngLine.FIND('-') THEN BEGIN
            // First found operation
            IF ProdOrderRtngLine."Flushing Method" = ProdOrderRtngLine."Flushing Method"::Backward THEN BEGIN
              ActualOutputAndScrapQtyBase :=
                CostCalcMgt.CalcActOperOutputAndScrap(ProdOrderLine,ProdOrderRtngLine);
              ActualOutputAndScrapQty := ActualOutputAndScrapQtyBase / ProdOrderLine."Qty. per Unit of Measure";
            END;

            IF (ProdOrderRtngLine."Flushing Method" = ProdOrderRtngLine."Flushing Method"::Forward) OR
               (ProdOrderRtngLine."Next Operation No." = '')
            THEN BEGIN
              OutputQty := ProdOrderLine."Remaining Quantity";
              OutputQtyBase := ProdOrderLine."Remaining Qty. (Base)";
            END ELSE
              IF ProdOrderRtngLine."Next Operation No." <> '' THEN BEGIN // Not Last Operation
                OutputQty := ActualOutputAndScrapQty;
                OutputQtyBase := ActualOutputAndScrapQtyBase;
              END;

            REPEAT
              ItemJnlLine.INIT;
              ItemJnlLine.VALIDATE("Entry Type",ItemJnlLine."Entry Type"::Output);
              ItemJnlLine.VALIDATE("Posting Date",PostingDate);
              ItemJnlLine."Document No." := ProdOrder."No.";
              ItemJnlLine.VALIDATE("Order Type",ItemJnlLine."Order Type"::Production);
              ItemJnlLine.VALIDATE("Order No.",ProdOrder."No.");
              ItemJnlLine.VALIDATE("Order Line No.",ProdOrderLine."Line No.");
              ItemJnlLine.VALIDATE("Item No.",ProdOrderLine."Item No.");
              ItemJnlLine.VALIDATE("Routing Reference No.",ProdOrderRtngLine."Routing Reference No.");
              ItemJnlLine.VALIDATE("Routing No.",ProdOrderRtngLine."Routing No.");
              ItemJnlLine.VALIDATE("Variant Code",ProdOrderLine."Variant Code");
              ItemJnlLine."Location Code" := ProdOrderLine."Location Code";
              ItemJnlLine.VALIDATE("Bin Code",ProdOrderLine."Bin Code");
              IF ItemJnlLine."Unit of Measure Code" <> ProdOrderLine."Unit of Measure Code" THEN
                ItemJnlLine.VALIDATE("Unit of Measure Code",ProdOrderLine."Unit of Measure Code");
              ItemJnlLine.VALIDATE("Operation No.",ProdOrderRtngLine."Operation No.");
              IF ProdOrderRtngLine."Concurrent Capacities" = 0 THEN
                ProdOrderRtngLine."Concurrent Capacities" := 1;
              SetTimeAndQuantityOmItemJnlLine(ItemJnlLine,ProdOrderRtngLine,OutputQtyBase,OutputQty);
              ItemJnlLine."Source Code" := SourceCodeSetup.Flushing;
              IF NOT (ItemJnlLine.TimeIsEmpty AND (ItemJnlLine."Output Quantity" = 0)) THEN BEGIN
                DimMgt.UpdateGlobalDimFromDimSetID(ItemJnlLine."Dimension Set ID",ItemJnlLine."Shortcut Dimension 1 Code",
                  ItemJnlLine."Shortcut Dimension 2 Code");
                IF ProdOrderRtngLine."Next Operation No." = '' THEN
                  ReserveProdOrderLine.TransferPOLineToItemJnlLine(ProdOrderLine,ItemJnlLine,ItemJnlLine."Output Quantity (Base)");
                ItemJnlPostLine.RunWithCheck(ItemJnlLine);
              END;

              IF (ProdOrderRtngLine."Flushing Method" = ProdOrderRtngLine."Flushing Method"::Backward) AND
                 (ProdOrderRtngLine."Next Operation No." = '')
              THEN BEGIN
                OutputQty += ActualOutputAndScrapQty;
                OutputQtyBase += ActualOutputAndScrapQtyBase;
              END;
            UNTIL ProdOrderRtngLine.NEXT = 0;
          END;
        UNTIL ProdOrderLine.NEXT = 0;

      WITH ProdOrderComp DO BEGIN
        SETCURRENTKEY(Status,"Prod. Order No.","Routing Link Code","Flushing Method");
        IF NewStatus = NewStatus::Released THEN
          SETFILTER(
            "Flushing Method",
            '%1|%2',
            "Flushing Method"::Forward,
            "Flushing Method"::"Pick + Forward")
        ELSE
          SETFILTER(
            "Flushing Method",
            '%1|%2',
            "Flushing Method"::Backward,
            "Flushing Method"::"Pick + Backward");
        SETRANGE("Routing Link Code",'');
        SETRANGE(Status,Status::Released);
        SETRANGE("Prod. Order No.",ProdOrder."No.");
        SETFILTER("Item No.",'<>%1','');
        LOCKTABLE;
        IF FINDSET THEN BEGIN
          NoOfRecords := COUNT;
          Window.OPEN(
            Text002 +
            Text003);
          LineCount := 0;

          REPEAT
            LineCount := LineCount + 1;
            Item.GET("Item No.");
            Item.TESTFIELD("Rounding Precision");
            Window.UPDATE(1,LineCount);
            Window.UPDATE(2,ROUND(LineCount / NoOfRecords * 10000,1));
            ProdOrderLine.GET(Status,ProdOrder."No.","Prod. Order Line No.");
            IF NewStatus = NewStatus::Released THEN
              QtyToPost := GetNeededQty(1,FALSE)
            ELSE
              QtyToPost := GetNeededQty(0,FALSE);
            QtyToPost := ROUND(QtyToPost,Item."Rounding Precision",'>');

            IF QtyToPost <> 0 THEN BEGIN
              ItemJnlLine.INIT;
              ItemJnlLine.VALIDATE("Entry Type",ItemJnlLine."Entry Type"::Consumption);
              ItemJnlLine.VALIDATE("Posting Date",PostingDate);
              ItemJnlLine."Order Type" := ItemJnlLine."Order Type"::Production;
              ItemJnlLine."Order No." := ProdOrder."No.";
              ItemJnlLine."Source No." := ProdOrderLine."Item No.";
              ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Item;
              ItemJnlLine."Order Line No." := ProdOrderLine."Line No.";
              ItemJnlLine."Document No." := ProdOrder."No.";
              ItemJnlLine.VALIDATE("Item No.","Item No.");
              ItemJnlLine.VALIDATE("Prod. Order Comp. Line No.","Line No.");
              IF ItemJnlLine."Unit of Measure Code" <> "Unit of Measure Code" THEN
                ItemJnlLine.VALIDATE("Unit of Measure Code","Unit of Measure Code");
              ItemJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
              ItemJnlLine.Description := Description;
              ItemJnlLine.VALIDATE(Quantity,QtyToPost);
              ItemJnlLine.VALIDATE("Unit Cost","Unit Cost");
              ItemJnlLine."Location Code" := "Location Code";
              ItemJnlLine."Bin Code" := "Bin Code";
              ItemJnlLine."Variant Code" := "Variant Code";
              ItemJnlLine."Source Code" := SourceCodeSetup.Flushing;
              ItemJnlLine."Gen. Bus. Posting Group" := ProdOrder."Gen. Bus. Posting Group";
              ItemJnlLine."Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
              IF Item."Item Tracking Code" <> '' THEN
                ItemTrackingMgt.CopyItemTracking(RowID1,ItemJnlLine.RowID1,FALSE);
              ItemJnlPostLine.RUN(ItemJnlLine);
            END;
          UNTIL NEXT = 0;
          Window.CLOSE;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckBeforeFinishProdOrder@3(ProdOrder@1000 : Record 5405);
    VAR
      ProdOrderLine@1001 : Record 5406;
      ProdOrderComp@1002 : Record 5407;
      ProdOrderRtngLine@1003 : Record 5409;
      PurchLine@1004 : Record 39;
      ShowWarning@1005 : Boolean;
    BEGIN
      WITH PurchLine DO BEGIN
        SETCURRENTKEY("Document Type",Type,"Prod. Order No.","Prod. Order Line No.","Routing No.","Operation No.");
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE(Type,Type::Item);
        SETRANGE("Prod. Order No.",ProdOrder."No.");
        SETFILTER("Outstanding Quantity",'<>%1',0);
        IF FINDFIRST THEN
          ERROR(Text008,ProdOrder.TABLECAPTION,ProdOrder."No.","Document No.");
      END;

      WITH ProdOrderLine DO BEGIN
        SETRANGE(Status,ProdOrder.Status);
        SETRANGE("Prod. Order No.",ProdOrder."No.");
        SETFILTER("Remaining Quantity",'<>0');
        IF NOT ISEMPTY THEN BEGIN
          ProdOrderRtngLine.SETRANGE(Status,ProdOrder.Status);
          ProdOrderRtngLine.SETRANGE("Prod. Order No.",ProdOrder."No.");
          ProdOrderRtngLine.SETRANGE("Next Operation No.",'');
          IF NOT ProdOrderRtngLine.ISEMPTY THEN BEGIN
            ProdOrderRtngLine.SETFILTER("Flushing Method",'<>%1',ProdOrderRtngLine."Flushing Method"::Backward);
            ShowWarning := NOT ProdOrderRtngLine.ISEMPTY;
          END ELSE
            ShowWarning := TRUE;

          IF ShowWarning THEN BEGIN;
            IF CONFIRM(STRSUBSTNO(Text004,ProdOrder.TABLECAPTION,ProdOrder."No.")) THEN
              EXIT;
            ERROR(Text005);
          END;
        END;
      END;

      WITH ProdOrderComp DO BEGIN
        SETAUTOCALCFIELDS("Pick Qty. (Base)");
        SETRANGE(Status,ProdOrder.Status);
        SETRANGE("Prod. Order No.",ProdOrder."No.");
        SETFILTER("Remaining Quantity",'<>0');
        IF FINDSET THEN
          REPEAT
            TESTFIELD("Pick Qty. (Base)",0);
            IF (("Flushing Method" <> "Flushing Method"::Backward) AND
                ("Flushing Method" <> "Flushing Method"::"Pick + Backward") AND
                ("Routing Link Code" = '')) OR
               (("Routing Link Code" <> '') AND NOT RtngWillFlushComp(ProdOrderComp))
            THEN BEGIN
              IF CONFIRM(STRSUBSTNO(Text006,ProdOrder.TABLECAPTION,ProdOrder."No.")) THEN
                EXIT;
              ERROR(Text005);
            END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE RtngWillFlushComp@6(ProdOrderComp@1000 : Record 5407) : Boolean;
    VAR
      ProdOrderRtngLine@1001 : Record 5409;
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      IF ProdOrderComp."Routing Link Code" = '' THEN
        EXIT;

      WITH ProdOrderComp DO
        ProdOrderLine.GET(Status,"Prod. Order No.","Prod. Order Line No.");

      WITH ProdOrderRtngLine DO BEGIN
        SETCURRENTKEY("Prod. Order No.",Status,"Flushing Method");
        SETRANGE("Flushing Method","Flushing Method"::Backward);
        SETRANGE(Status,Status::Released);
        SETRANGE("Prod. Order No.",ProdOrderComp."Prod. Order No.");
        SETRANGE("Routing Link Code",ProdOrderComp."Routing Link Code");
        SETRANGE("Routing No.",ProdOrderLine."Routing No.");
        SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
        EXIT(FINDFIRST);
      END;
    END;

    LOCAL PROCEDURE GetSourceCodeSetup@15();
    BEGIN
      IF NOT SourceCodeSetupRead THEN
        SourceCodeSetup.GET;
      SourceCodeSetupRead := TRUE;
    END;

    [External]
    PROCEDURE SetPostingInfo@2(Status@1002 : 'Quote,Planned,Firm Planned,Released,Finished';PostingDate@1001 : Date;UpdateUnitCost@1000 : Boolean);
    BEGIN
      NewStatus := Status;
      NewPostingDate := PostingDate;
      NewUpdateUnitCost := UpdateUnitCost;
    END;

    LOCAL PROCEDURE ErrorIfUnableToClearWIP@7(ProdOrder@1001 : Record 5405);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProdOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrder."No.");
      IF ProdOrderLine.FINDSET THEN
        REPEAT
          IF NOT OutputExists(ProdOrderLine) THEN
            IF MatrOrCapConsumpExists(ProdOrderLine) THEN
              ERROR(Text009,ProdOrderLine."Line No.",ToProdOrder.TABLECAPTION,ProdOrderLine."Prod. Order No.");
        UNTIL ProdOrderLine.NEXT = 0;
    END;

    LOCAL PROCEDURE OutputExists@9(ProdOrderLine@1001 : Record 5406) : Boolean;
    VAR
      ItemLedgEntry@1000 : Record 32;
    BEGIN
      ItemLedgEntry.SETCURRENTKEY("Order Type","Order No.","Order Line No.");
      ItemLedgEntry.SETRANGE("Order Type",ItemLedgEntry."Order Type"::Production);
      ItemLedgEntry.SETRANGE("Order No.",ProdOrderLine."Prod. Order No.");
      ItemLedgEntry.SETRANGE("Order Line No.",ProdOrderLine."Line No.");
      ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Output);
      IF ItemLedgEntry.FINDFIRST THEN BEGIN
        ItemLedgEntry.CALCSUMS(Quantity);
        IF ItemLedgEntry.Quantity <> 0 THEN
          EXIT(TRUE)
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE MatrOrCapConsumpExists@22(ProdOrderLine@1002 : Record 5406) : Boolean;
    VAR
      ItemLedgEntry@1000 : Record 32;
      CapLedgEntry@1001 : Record 5832;
    BEGIN
      ItemLedgEntry.SETCURRENTKEY("Order Type","Order No.","Order Line No.");
      ItemLedgEntry.SETRANGE("Order Type",ItemLedgEntry."Order Type"::Production);
      ItemLedgEntry.SETRANGE("Order No.",ProdOrderLine."Prod. Order No.");
      ItemLedgEntry.SETRANGE("Order Line No.",ProdOrderLine."Line No.");
      ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Consumption);
      IF NOT ItemLedgEntry.ISEMPTY THEN
        EXIT(TRUE);

      CapLedgEntry.SETCURRENTKEY("Order Type","Order No.","Order Line No.","Routing No.","Routing Reference No.");
      CapLedgEntry.SETRANGE("Order Type",CapLedgEntry."Order Type"::Production);
      CapLedgEntry.SETRANGE("Order No.",ProdOrderLine."Prod. Order No.");
      CapLedgEntry.SETRANGE("Order Line No.",ProdOrderLine."Line No.");
      CapLedgEntry.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
      CapLedgEntry.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
      EXIT(NOT CapLedgEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE SetTimeAndQuantityOmItemJnlLine@8(VAR ItemJnlLine@1000 : Record 83;ProdOrderRtngLine@1001 : Record 5409;OutputQtyBase@1003 : Decimal;OutputQty@1004 : Decimal);
    VAR
      CostCalculationManagement@1002 : Codeunit 5836;
    BEGIN
      IF ItemJnlLine.SubcontractingWorkCenterUsed THEN BEGIN
        ItemJnlLine.VALIDATE("Output Quantity",0);
        ItemJnlLine.VALIDATE("Run Time",0);
        ItemJnlLine.VALIDATE("Setup Time",0)
      END ELSE BEGIN
        ItemJnlLine.VALIDATE(
          "Setup Time",
          ROUND(
            ProdOrderRtngLine."Setup Time" *
            ProdOrderRtngLine."Concurrent Capacities" *
            CalendarMgt.QtyperTimeUnitofMeasure(
              ProdOrderRtngLine."Work Center No.",
              ProdOrderRtngLine."Setup Time Unit of Meas. Code"),
            0.00001));
        ItemJnlLine.VALIDATE(
          "Run Time",
          CostCalculationManagement.CalcCostTime(
            OutputQtyBase,
            ProdOrderRtngLine."Setup Time",ProdOrderRtngLine."Setup Time Unit of Meas. Code",
            ProdOrderRtngLine."Run Time",ProdOrderRtngLine."Run Time Unit of Meas. Code",
            ProdOrderRtngLine."Lot Size",
            ProdOrderRtngLine."Scrap Factor % (Accumulated)",ProdOrderRtngLine."Fixed Scrap Qty. (Accum.)",
            ProdOrderRtngLine."Work Center No.",0,FALSE,0));
        ItemJnlLine.VALIDATE("Output Quantity",OutputQty);
      END;
    END;

    LOCAL PROCEDURE TransferLinks@24(FromProdOrder@1000 : Record 5405;ToProdOrder@1001 : Record 5405);
    VAR
      RecordLink@1002 : Record 2000000068;
      PageManagement@1003 : Codeunit 700;
    BEGIN
      ToProdOrder.COPYLINKS(FromProdOrder);
      RecordLink.SETRANGE("Record ID",FromProdOrder.RECORDID);
      RecordLink.DELETEALL;

      RecordLink.SETRANGE("Record ID",ToProdOrder.RECORDID);
      IF RecordLink.FINDSET(TRUE) THEN
        REPEAT
          RecordLink.VALIDATE(
            URL1,GETURL(DEFAULTCLIENTTYPE,COMPANYNAME,OBJECTTYPE::Page,PageManagement.GetPageID(ToProdOrder),ToProdOrder));
          RecordLink.VALIDATE(
            Description,
            STRSUBSTNO(
              '%1 - %2 - %3',
              PageManagement.GetPageCaption(PageManagement.GetPageID(ToProdOrder)),
              ToProdOrder."No.",ToProdOrder.Description));
          RecordLink.MODIFY(TRUE);
        UNTIL RecordLink.NEXT = 0;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransProdOrder@31(VAR FromProdOrder@1000 : Record 5405;VAR ToProdOrder@1001 : Record 5405);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransProdOrderLines@32(VAR FromProdOrder@1000 : Record 5405;VAR ToProdOrder@1001 : Record 5405);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransProdOrderComp@35(VAR FromProdOrder@1000 : Record 5405;VAR ToProdOrder@1001 : Record 5405);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterChangeStatusOnProdOrder@33(VAR ProdOrder@1000 : Record 5405;VAR ToProdOrder@1001 : Record 5405);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeChangeStatusOnProdOrder@34(VAR ProductionOrder@1000 : Record 5405;NewStatus@1001 : 'Quote,Planned,Firm Planned,Released,Finished');
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCopyFromProdOrder@5(VAR ToProdOrder@1000 : Record 5405;FromProdOrder@1001 : Record 5405);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCopyFromProdOrderLine@19(VAR ToProdOrderLine@1000 : Record 5406;FromProdOrderLine@1001 : Record 5406);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCopyFromProdOrderRoutingLine@25(VAR ToProdOrderRoutingLine@1000 : Record 5409;FromProdOrderRoutingLine@1001 : Record 5409);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCopyFromProdOrderComp@26(VAR ToProdOrderComp@1000 : Record 5407;FromProdOrderComp@1001 : Record 5407);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCopyFromProdOrderCapacityNeed@30(VAR ToProdOrderCapacityNeed@1000 : Record 5410;FromProdOrderCapacityNeed@1001 : Record 5410);
    BEGIN
    END;

    PROCEDURE PeformManualCheckAndRelease@1000000000(VAR ProdHeader@1000000000 : Record 5405);
    VAR
      ApprovalMgmt@1000000001 : Codeunit 1535;
    BEGIN
      //WITH ProdHeader DO
      //  IF Status = Status::"Firm Planned" THEN BEGIN
      //   IF ApprovalMgmt.IsProdHeaderPendingApproval(ProdHeader) THEN
      //      ERROR(Text011);
      //  END;
    END;

    BEGIN
    END.
  }
}

OBJECT Page 88 Job Card
{
  OBJECT-PROPERTIES
  {
    Date=29/01/19;
    Time=10:27:46;
    Modified=Yes;
    Version List=NAVW110.00.00.18197,NAVGB10.00.00.18197,WF;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Job Card;
               ENG=Job Card];
    SourceTable=Table167;
    PageType=Card;
    RefreshOnActivate=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Prices;
                                ENG=New,Process,Report,Prices];
    OnInit=BEGIN
             JobSimplificationAvailable := IsJobSimplificationAvailable;
           END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 58      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Job;
                                 ENG=&Job];
                      Image=Job }
      { 88      ;2   ;Action    ;
                      Name=JobPlanningLines;
                      ShortCutKey=Shift+Ctrl+P;
                      CaptionML=[ENU=Job &Planning Lines;
                                 ENG=Job &Planning Lines];
                      ToolTipML=[ENU=View all planning lines for the job. You use this window to plan what items, resources, and general ledger expenses that you expect to use on a job (Budget) or you can specify what you actually agreed with your customer that he should pay for the job (Billable).;
                                 ENG=View all planning lines for the job. You use this window to plan what items, resources, and general ledger expenses that you expect to use on a job (Budget) or you can specify what you actually agreed with your customer that he should pay for the job (Billable).];
                      ApplicationArea=#Jobs;
                      Image=JobLines;
                      OnAction=VAR
                                 JobPlanningLine@1001 : Record 1003;
                                 JobPlanningLines@1000 : Page 1007;
                               BEGIN
                                 TESTFIELD("No.");
                                 JobPlanningLine.FILTERGROUP(2);
                                 JobPlanningLine.SETRANGE("Job No.","No.");
                                 JobPlanningLine.FILTERGROUP(0);
                                 JobPlanningLines.SetJobTaskNoVisible(TRUE);
                                 JobPlanningLines.SETTABLEVIEW(JobPlanningLine);
                                 JobPlanningLines.EDITABLE := TRUE;
                                 JobPlanningLines.RUN;
                               END;
                                }
      { 84      ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=&Dimensions;
                                 ENG=&Dimensions];
                      ToolTipML=[ENU=View this job's default dimensions.;
                                 ENG=View this job's default dimensions.];
                      ApplicationArea=#Jobs;
                      RunObject=Page 540;
                      RunPageLink=Table ID=CONST(167),
                                  No.=FIELD(No.);
                      Image=Dimensions }
      { 61      ;2   ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=[ENU=&Statistics;
                                 ENG=&Statistics];
                      ToolTipML=[ENU=View this job's statistics.;
                                 ENG=View this job's statistics.];
                      ApplicationArea=#Jobs;
                      RunObject=Page 1025;
                      RunPageLink=No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Statistics;
                      PromotedCategory=Process }
      { 64      ;2   ;Separator  }
      { 62      ;2   ;Action    ;
                      CaptionML=[ENU=Co&mments;
                                 ENG=Co&mments];
                      ToolTipML=[ENU=View the comment sheet for this job.;
                                 ENG=View the comment sheet for this job.];
                      RunObject=Page 124;
                      RunPageLink=Table Name=CONST(Job),
                                  No.=FIELD(No.);
                      Image=ViewComments }
      { 66      ;2   ;Action    ;
                      CaptionML=[ENU=&Online Map;
                                 ENG=&Online Map];
                      ToolTipML=[ENU=View online map for addresses assigned to this job.;
                                 ENG=View online map for addresses assigned to this job.];
                      ApplicationArea=#Jobs;
                      Image=Map;
                      OnAction=BEGIN
                                 DisplayMap;
                               END;
                                }
      { 1000000002;2 ;Action    ;
                      Name=Release;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Release;
                      PromotedCategory=Process }
      { 1000000003;2 ;Action    ;
                      Name=Reopen;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Reopen;
                      PromotedCategory=Process }
      { 81      ;1   ;ActionGroup;
                      CaptionML=[ENU=W&IP;
                                 ENG=W&IP];
                      Image=WIP }
      { 85      ;2   ;Action    ;
                      CaptionML=[ENU=&WIP Entries;
                                 ENG=&WIP Entries];
                      ToolTipML=[ENU=View entries for the job that are posted as work in process.;
                                 ENG=View entries for the job that are posted as work in process.];
                      ApplicationArea=#Jobs;
                      RunObject=Page 1008;
                      RunPageView=SORTING(Job No.,Job Posting Group,WIP Posting Date)
                                  ORDER(Descending);
                      RunPageLink=Job No.=FIELD(No.);
                      Image=WIPEntries }
      { 86      ;2   ;Action    ;
                      CaptionML=[ENU=WIP &G/L Entries;
                                 ENG=WIP &G/L Entries];
                      ToolTipML=[ENU=View the job's WIP G/L entries.;
                                 ENG=View the job's WIP G/L entries.];
                      ApplicationArea=#Jobs;
                      RunObject=Page 1009;
                      RunPageView=SORTING(Job No.)
                                  ORDER(Descending);
                      RunPageLink=Job No.=FIELD(No.);
                      Image=WIPLedger }
      { 54      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Prices;
                                 ENG=&Prices];
                      Image=Price }
      { 93      ;2   ;Action    ;
                      CaptionML=[ENU=&Resource;
                                 ENG=&Resource];
                      ToolTipML=[ENU=View this job's resource prices.;
                                 ENG=View this job's resource prices.];
                      ApplicationArea=#Suite;
                      RunObject=Page 1011;
                      RunPageLink=Job No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Resource;
                      PromotedCategory=Category4 }
      { 94      ;2   ;Action    ;
                      CaptionML=[ENU=&Item;
                                 ENG=&Item];
                      ToolTipML=[ENU=View this job's item prices.;
                                 ENG=View this job's item prices.];
                      ApplicationArea=#Suite;
                      RunObject=Page 1012;
                      RunPageLink=Job No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Item;
                      PromotedCategory=Category4 }
      { 95      ;2   ;Action    ;
                      CaptionML=[ENU=&G/L Account;
                                 ENG=&G/L Account];
                      ToolTipML=[ENU=View this job's G/L account prices.;
                                 ENG=View this job's G/L account prices.];
                      ApplicationArea=#Suite;
                      RunObject=Page 1013;
                      RunPageLink=Job No.=FIELD(No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=JobPrice;
                      PromotedCategory=Category4 }
      { 53      ;1   ;ActionGroup;
                      CaptionML=[ENU=Plan&ning;
                                 ENG=Plan&ning];
                      Image=Planning }
      { 65      ;2   ;Action    ;
                      CaptionML=[ENU=Resource &Allocated per Job;
                                 ENG=Resource &Allocated per Job];
                      ToolTipML=[ENU=View this job's resource allocation.;
                                 ENG=View this job's resource allocation.];
                      ApplicationArea=#Jobs;
                      RunObject=Page 221;
                      Image=ViewJob }
      { 69      ;2   ;Action    ;
                      CaptionML=[ENU=Res. Gr. All&ocated per Job;
                                 ENG=Res. Gr. All&ocated per Job];
                      ToolTipML=[ENU=View the job's resource group allocation.;
                                 ENG=View the job's resource group allocation.];
                      ApplicationArea=#Jobs;
                      RunObject=Page 228;
                      Image=ResourceGroup }
      { 40      ;1   ;ActionGroup;
                      CaptionML=[ENU=History;
                                 ENG=History];
                      Image=History }
      { 60      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Ledger E&ntries;
                                 ENG=Ledger E&ntries];
                      ToolTipML=[ENU=View the history of transactions that have been posted for the selected record.;
                                 ENG=View the history of transactions that have been posted for the selected record.];
                      ApplicationArea=#Jobs;
                      RunObject=Page 92;
                      RunPageView=SORTING(Job No.,Job Task No.,Entry Type,Posting Date)
                                  ORDER(Descending);
                      RunPageLink=Job No.=FIELD(No.);
                      Promoted=Yes;
                      Image=JobLedger;
                      PromotedCategory=Process }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 33      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Copy;
                                 ENG=&Copy];
                      ActionContainerType=NewDocumentItems;
                      Image=Copy }
      { 1000000001;2 ;Action    ;
                      Name=Send For Approval;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=SendApprovalRequest;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 ApprovalsMgmt@1000000000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.OnSendJobsforApproval(Rec);
                                 //Chris
                               END;
                                }
      { 31      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Copy Job Tasks &from...;
                                 ENG=Copy Job Tasks &from...];
                      ToolTipML=[ENU=Open the Copy Job Tasks page.;
                                 ENG=Open the Copy Job Tasks page.];
                      ApplicationArea=#Jobs;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=CopyToTask;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 CopyJobTasks@1000 : Page 1041;
                               BEGIN
                                 CopyJobTasks.SetToJob(Rec);
                                 CopyJobTasks.RUNMODAL;
                               END;
                                }
      { 27      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Copy Job Tasks &to...;
                                 ENG=Copy Job Tasks &to...];
                      ToolTipML=[ENU=Open the Copy Jobs To page.;
                                 ENG=Open the Copy Jobs To page.];
                      ApplicationArea=#Jobs;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=CopyFromTask;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 CopyJobTasks@1000 : Page 1041;
                               BEGIN
                                 CopyJobTasks.SetFromJob(Rec);
                                 CopyJobTasks.RUNMODAL;
                               END;
                                }
      { 26      ;1   ;ActionGroup;
                      CaptionML=[ENU=W&IP;
                                 ENG=W&IP];
                      Image=WIP }
      { 25      ;2   ;Action    ;
                      Name=<Action82>;
                      Ellipsis=Yes;
                      CaptionML=[ENU=&Calculate WIP;
                                 ENG=&Calculate WIP];
                      ToolTipML=[ENU=Run the Job Calculate WIP batch job.;
                                 ENG=Run the Job Calculate WIP batch job.];
                      ApplicationArea=#Jobs;
                      Image=CalculateWIP;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Job@1002 : Record 167;
                               BEGIN
                                 TESTFIELD("No.");
                                 Job.COPY(Rec);
                                 Job.SETRANGE("No.","No.");
                                 REPORT.RUNMODAL(REPORT::"Job Calculate WIP",TRUE,FALSE,Job);
                               END;
                                }
      { 24      ;2   ;Action    ;
                      Name=<Action83>;
                      ShortCutKey=F9;
                      Ellipsis=Yes;
                      CaptionML=[ENU=&Post WIP to G/L;
                                 ENG=&Post WIP to G/L];
                      ToolTipML=[ENU=Run the Job Post WIP to G/L batch job.;
                                 ENG=Run the Job Post WIP to G/L batch job.];
                      ApplicationArea=#Jobs;
                      Image=PostOrder;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Job@1001 : Record 167;
                               BEGIN
                                 TESTFIELD("No.");
                                 Job.COPY(Rec);
                                 Job.SETRANGE("No.","No.");
                                 REPORT.RUNMODAL(REPORT::"Job Post WIP to G/L",TRUE,FALSE,Job);
                               END;
                                }
      { 1900000006;0 ;ActionContainer;
                      ActionContainerType=Reports }
      { 1903776506;1 ;Action    ;
                      CaptionML=[ENU=Job Actual to Budget;
                                 ENG=Job Actual to Budget];
                      ToolTipML=[ENU=Compare budgeted and usage amounts for selected jobs. All lines of the selected job show quantity, total cost, and line amount.;
                                 ENG=Compare budgeted and usage amounts for selected jobs. All lines of the selected job show quantity, total cost, and line amount.];
                      ApplicationArea=#Suite;
                      RunObject=Report 1009;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1901542506;1 ;Action    ;
                      CaptionML=[ENU=Job Analysis;
                                 ENG=Job Analysis];
                      ToolTipML=[ENU=Analyze the job, such as the budgeted prices, usage prices, and billable prices, and then compares the three sets of prices.;
                                 ENG=Analyse the job, such as the budgeted prices, usage prices, and billable prices, and then compares the three sets of prices.];
                      ApplicationArea=#Suite;
                      RunObject=Report 1008;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1902943106;1 ;Action    ;
                      CaptionML=[ENU=Job - Planning Lines;
                                 ENG=Job - Planning Lines];
                      ToolTipML=[ENU=View all planning lines for the job. You use this window to plan what items, resources, and general ledger expenses that you expect to use on a job (budget) or you can specify what you actually agreed with your customer that he should pay for the job (billable).;
                                 ENG=View all planning lines for the job. You use this window to plan what items, resources, and general ledger expenses that you expect to use on a job (budget) or you can specify what you actually agreed with your customer that he should pay for the job (billable).];
                      ApplicationArea=#Suite;
                      RunObject=Report 1006;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1903186006;1 ;Action    ;
                      CaptionML=[ENU=Job - Suggested Billing;
                                 ENG=Job - Suggested Billing];
                      ToolTipML=[ENU=View a list of all jobs, grouped by customer, how much the customer has already been invoiced, and how much remains to be invoiced, that is, the suggested billing.;
                                 ENG=View a list of all jobs, grouped by customer, how much the customer has already been invoiced, and how much remains to be invoiced, that is, the suggested billing.];
                      ApplicationArea=#Suite;
                      RunObject=Report 1011;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 46      ;1   ;Action    ;
                      Name=Report Job Quote;
                      CaptionML=[ENU=Preview Job Quote;
                                 ENG=Preview Job Quote];
                      ToolTipML=[ENU=Open the Job Quote report.;
                                 ENG=Open the Job Quote report.];
                      ApplicationArea=#Suite;
                      Image=Report;
                      PromotedCategory=Report;
                      OnAction=VAR
                                 Job@1001 : Record 167;
                               BEGIN
                                 Job.SETCURRENTKEY("No.");
                                 Job.SETFILTER("No.","No.");
                                 REPORT.RUN(REPORT::"Job Quote",TRUE,FALSE,Job);
                               END;
                                }
      { 48      ;1   ;Action    ;
                      Name=Send Job Quote;
                      CaptionML=[ENU=Send Job Quote;
                                 ENG=Send Job Quote];
                      ToolTipML=[ENU=Send the job quote to the customer. You can change the way that the document is sent in the window that appears.;
                                 ENG=Send the job quote to the customer. You can change the way that the document is sent in the window that appears.];
                      ApplicationArea=#Suite;
                      Image=SendTo;
                      PromotedCategory=Report;
                      OnAction=BEGIN
                                 CODEUNIT.RUN(CODEUNIT::"Jobs-Send",Rec);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENG=General] }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number for the job. You can use one of the following methods to fill in the number:;
                           ENG=Specifies the number for the job. You can use one of the following methods to fill in the number:];
                ApplicationArea=#Jobs;
                SourceExpr="No.";
                OnAssistEdit=BEGIN
                               IF AssistEdit(xRec) THEN
                                 CurrPage.UPDATE;
                             END;
                              }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a short description of the job.;
                           ENG=Specifies a short description of the job.];
                ApplicationArea=#Jobs;
                SourceExpr=Description }

    { 32  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the customer that the job should be billed to.;
                           ENG=Specifies the number of the customer that the job should be billed to.];
                ApplicationArea=#Jobs;
                SourceExpr="Bill-to Customer No.";
                Importance=Promoted;
                OnValidate=BEGIN
                             BilltoCustomerNoOnAfterValidat;
                           END;

                ShowMandatory=TRUE }

    { 96  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the contact that the invoice will be sent to.;
                           ENG=Specifies the number of the contact that the invoice will be sent to.];
                ApplicationArea=#Jobs;
                SourceExpr="Bill-to Contact No." }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the Bill-to Customer, which you assigned to the current job, in the Bill-to Customer No. field. field.;
                           ENG=Specifies the name of the Bill-to Customer, which you assigned to the current job, in the Bill-to Customer No. field. field.];
                ApplicationArea=#Jobs;
                SourceExpr="Bill-to Name";
                Importance=Promoted }

    { 45  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the address of the Bill-to Customer, which you assigned to the current job, in the Bill-to Customer No. field. field.;
                           ENG=Specifies the address of the Bill-to Customer, which you assigned to the current job, in the Bill-to Customer No. field. field.];
                ApplicationArea=#Jobs;
                SourceExpr="Bill-to Address";
                Importance=Additional }

    { 47  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the additional address of the Bill-to Customer, which you assigned to the current job, in the Bill-to Customer No. field. field.;
                           ENG=Specifies the additional address of the Bill-to Customer, which you assigned to the current job, in the Bill-to Customer No. field. field.];
                ApplicationArea=#Jobs;
                SourceExpr="Bill-to Address 2";
                Importance=Additional }

    { 1040002;2;Field     ;
                ApplicationArea=#Jobs;
                SourceExpr="Bill-to City" }

    { 1040001;2;Field     ;
                CaptionML=[ENU=Bill-to County;
                           ENG=Bill-to County];
                ApplicationArea=#Jobs;
                SourceExpr="Bill-to County" }

    { 1040006;2;Field     ;
                CaptionML=[ENU=Bill-to Country/Region Code;
                           ENG=Bill-to Country/Region Code];
                ApplicationArea=#Jobs;
                SourceExpr="Bill-to Country/Region Code" }

    { 51  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the contact person that you entered in the Bill-to Contact No. field. field.;
                           ENG=Specifies the name of the contact person that you entered in the Bill-to Contact No. field. field.];
                ApplicationArea=#Jobs;
                SourceExpr="Bill-to Contact";
                Importance=Additional }

    { 1040000;2;Field     ;
                ApplicationArea=#Jobs;
                SourceExpr="Bill-to Post Code" }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the additional name for the job. The field is used for searching purposes.;
                           ENG=Specifies the additional name for the job. The field is used for searching purposes.];
                ApplicationArea=#Jobs;
                SourceExpr="Search Description";
                Importance=Additional }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the person responsible for the job. You can select a name from the list of resources available in the Resource List window. The name is copied from the No. field in the Resource table. You can choose the field to see a list of resources.;
                           ENG=Specifies the name of the person responsible for the job. You can select a name from the list of resources available in the Resource List window. The name is copied from the No. field in the Resource table. You can choose the field to see a list of resources.];
                ApplicationArea=#Jobs;
                SourceExpr="Person Responsible";
                Importance=Promoted }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the blocking status for actions related to the job.;
                           ENG=Specifies the blocking status for actions related to the job.];
                ApplicationArea=#Jobs;
                SourceExpr=Blocked }

    { 30  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies when the job card was last modified.;
                           ENG=Specifies when the job card was last modified.];
                ApplicationArea=#Jobs;
                SourceExpr="Last Date Modified" }

    { 42  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the person assigned as the manager for this job.;
                           ENG=Specifies the person assigned as the manager for this job.];
                ApplicationArea=#Jobs;
                SourceExpr="Project Manager";
                Visible=JobSimplificationAvailable }

    { 1000000004;2;Field  ;
                SourceExpr="Approval Status" }

    { 50  ;1   ;Part      ;
                Name=JobTaskLines;
                CaptionML=[ENU=Tasks;
                           ENG=Tasks];
                ApplicationArea=#Jobs;
                SubPageView=SORTING(Job Task No.)
                            ORDER(Ascending);
                SubPageLink=Job No.=FIELD(No.);
                PagePartID=Page1001;
                PartType=Page }

    { 1904784501;1;Group  ;
                CaptionML=[ENU=Posting;
                           ENG=Posting] }

    { 34  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a status for the current job. You can change the status for the job as it progresses. Final calculations can be made on completed jobs.;
                           ENG=Specifies a status for the current job. You can change the status for the job as it progresses. Final calculations can be made on completed jobs.];
                ApplicationArea=#Jobs;
                SourceExpr=Status;
                Importance=Promoted;
                OnValidate=BEGIN
                             IF (Status = Status::Completed) AND Complete THEN BEGIN
                               RecalculateJobWIP;
                               CurrPage.UPDATE(FALSE);
                             END;
                           END;
                            }

    { 38  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a job posting group code to a job. To see the available codes, choose the field.;
                           ENG=Specifies a job posting group code to a job. To see the available codes, choose the field.];
                ApplicationArea=#Jobs;
                SourceExpr="Job Posting Group" }

    { 106 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the work in process (WIP) calculation method that is associated with a job.;
                           ENG=Specifies the name of the work in process (WIP) calculation method that is associated with a job.];
                ApplicationArea=#Jobs;
                SourceExpr="WIP Method";
                Importance=Additional }

    { 3   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether WIP Posting Method is per job or per job ledger entry. When you select Per Job, Microsoft Dynamics NAV uses total WIP costs and sales to calculate WIP. When you select Per Job Ledger Entry, Microsoft Dynamics NAV uses the accumulated values for WIP costs and sales.;
                           ENG=Specifies whether WIP Posting Method is per job or per job ledger entry. When you select Per Job, Microsoft Dynamics NAV uses total WIP costs and sales to calculate WIP. When you select Per Job Ledger Entry, Microsoft Dynamics NAV uses the accumulated values for WIP costs and sales.];
                ApplicationArea=#Jobs;
                SourceExpr="WIP Posting Method";
                Importance=Additional }

    { 89  ;2   ;Field     ;
                CaptionML=[ENU=Allow Budget/Billable Lines;
                           ENG=Allow Budget/Billable Lines];
                ToolTipML=[ENU=Specifies if you can add planning lines of type Both Budget and Billable to the job.;
                           ENG=Specifies if you can add planning lines of type Both Budget and Billable to the job.];
                ApplicationArea=#Jobs;
                SourceExpr="Allow Schedule/Contract Lines";
                Importance=Additional }

    { 70  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether usage entries, from the job journal or purchase line, for example, are linked to job planning lines. Select this check box if you want to be able to track the quantities and amounts of the remaining work needed to complete a job and to create a relationship between demand planning, usage, and sales. On a job card, you can select this check box if there are no existing job planning lines that include type Budget that have been posted. The usage link only applies to job planning lines that include type Budget.;
                           ENG=Specifies whether usage entries, from the job journal or purchase line, for example, are linked to job planning lines. Select this check box if you want to be able to track the quantities and amounts of the remaining work needed to complete a job and to create a relationship between demand planning, usage, and sales. On a job card, you can select this check box if there are no existing job planning lines that include type Budget that have been posted. The usage link only applies to job planning lines that include type Budget.];
                ApplicationArea=#Jobs;
                SourceExpr="Apply Usage Link";
                Importance=Additional }

    { 36  ;2   ;Field     ;
                Name=% Completed;
                CaptionML=[ENU=% Completed;
                           ENG=% Completed];
                ToolTipML=[ENU=Specifies the percentage of the job's estimated resource usage that has been posted as used.;
                           ENG=Specifies the percentage of the job's estimated resource usage that has been posted as used.];
                ApplicationArea=#Jobs;
                SourceExpr=PercentCompleted;
                Importance=Promoted;
                Editable=FALSE }

    { 35  ;2   ;Field     ;
                Name=% Invoiced;
                CaptionML=[ENU=% Invoiced;
                           ENG=% Invoiced];
                ToolTipML=[ENU=Specifies the percentage of the job's invoice value that has been posted as invoiced.;
                           ENG=Specifies the percentage of the job's invoice value that has been posted as invoiced.];
                ApplicationArea=#Jobs;
                SourceExpr=PercentInvoiced;
                Importance=Promoted;
                Editable=FALSE }

    { 39  ;2   ;Field     ;
                Name=% of Overdue Planning Lines;
                CaptionML=[ENU=% of Overdue Planning Lines;
                           ENG=% of Overdue Planning Lines];
                ToolTipML=[ENU=Specifies the percentage of the job's planning lines where the planned delivery date has been exceeded.;
                           ENG=Specifies the percentage of the job's planning lines where the planned delivery date has been exceeded.];
                ApplicationArea=#Jobs;
                SourceExpr=PercentOverdue;
                Importance=Additional;
                Editable=FALSE }

    { 1905744101;1;Group  ;
                CaptionML=[ENU=Duration;
                           ENG=Duration] }

    { 20  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date on which the job actually starts.;
                           ENG=Specifies the date on which the job actually starts.];
                ApplicationArea=#Jobs;
                SourceExpr="Starting Date";
                Importance=Promoted }

    { 22  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date on which the job is expected to be completed.;
                           ENG=Specifies the date on which the job is expected to be completed.];
                ApplicationArea=#Jobs;
                SourceExpr="Ending Date";
                Importance=Promoted }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date on which you set up the job.;
                           ENG=Specifies the date on which you set up the job.];
                ApplicationArea=#Jobs;
                SourceExpr="Creation Date" }

    { 1907468901;1;Group  ;
                CaptionML=[ENU=Foreign Trade;
                           ENG=Foreign Trade] }

    { 98  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the currency code for a job. By default, the currency code is empty. If you enter a foreign currency code, it results in the job being planned and invoiced in that currency.;
                           ENG=Specifies the currency code for a job. By default, the currency code is empty. If you enter a foreign currency code, it results in the job being planned and invoiced in that currency.];
                ApplicationArea=#Suite;
                SourceExpr="Currency Code";
                Importance=Promoted }

    { 100 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the currency code you want to apply when creating invoices for a job. By default, the invoice currency code for a job is based on what currency code is defined on the customer card.;
                           ENG=Specifies the currency code you want to apply when creating invoices for a job. By default, the invoice currency code for a job is based on what currency code is defined on the customer card.];
                ApplicationArea=#Suite;
                SourceExpr="Invoice Currency Code" }

    { 102 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies how job cost values should be calculated if you change the Currency Date field on a planning line manually, if you change the exchange rate in the Currency Code field on a Job Planning Line, or if you run the Change Job Planning Line Dates batch job -- this depends if you have set up a job in a foreign currency by entering a code in the Currency Code field.;
                           ENG=Specifies how job cost values should be calculated if you change the Currency Date field on a planning line manually, if you change the exchange rate in the Currency Code field on a Job Planning Line, or if you run the Change Job Planning Line Dates batch job -- this depends if you have set up a job in a foreign currency by entering a code in the Currency Code field.];
                ApplicationArea=#Suite;
                SourceExpr="Exch. Calculation (Cost)" }

    { 104 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies how job sales price values should be calculated if you change the Currency Date field on a planning line manually, if you change the exchange rate in the Currency Code field on a Job Planning Line, or if you run the Change Job Planning Line Dates batch job -- this depends if you have set up a job in a foreign currency by entering a code in the Currency Code field. The options are:;
                           ENG=Specifies how job sales price values should be calculated if you change the Currency Date field on a planning line manually, if you change the exchange rate in the Currency Code field on a Job Planning Line, or if you run the Change Job Planning Line Dates batch job -- this depends if you have set up a job in a foreign currency by entering a code in the Currency Code field. The options are:];
                ApplicationArea=#Suite;
                SourceExpr="Exch. Calculation (Price)" }

    { 1905734501;1;Group  ;
                CaptionML=[ENU=WIP and Recognition;
                           ENG=WIP and Recognition] }

    { 7   ;2   ;Group     ;
                CaptionML=[ENU=To Post;
                           ENG=To Post];
                GroupType=Group }

    { 108 ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the posting date that was entered when the Job Calculate WIP batch job was last run.;
                           ENG=Specifies the posting date that was entered when the Job Calculate WIP batch job was last run.];
                ApplicationArea=#Jobs;
                SourceExpr="WIP Posting Date" }

    { 37  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the total WIP Sales amount that was last calculated for the job. The WIP Sales Amount for the job is the value WIP Sales Job WIP Entries less the value of the Recognized Sales Job WIP Entries. For jobs with WIP Methods of Cost Value or Cost of Sales, the WIP Sales Amount is normally 0.;
                           ENG=Specifies the total WIP Sales amount that was last calculated for the job. The WIP Sales Amount for the job is the value WIP Sales Job WIP Entries less the value of the Recognised Sales Job WIP Entries. For jobs with WIP Methods of Cost Value or Cost of Sales, the WIP Sales Amount is normally 0.];
                ApplicationArea=#Jobs;
                SourceExpr="Total WIP Sales Amount" }

    { 17  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the sum of all applied sales that is related to the selected job in the general ledger.;
                           ENG=Specifies the sum of all applied sales that is related to the selected job in the general ledger.];
                ApplicationArea=#Jobs;
                SourceExpr="Applied Sales G/L Amount";
                Visible=FALSE }

    { 110 ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the total WIP cost amount that was last calculated for the job. The WIP Cost Amount for the job is the value WIP Cost Job WIP Entries less the value of the Recognized Cost Job WIP Entries. For jobs with WIP Methods of Sales Value or Percentage of Completion, the WIP Cost Amount is normally 0.;
                           ENG=Specifies the total WIP cost amount that was last calculated for the job. The WIP Cost Amount for the job is the value WIP Cost Job WIP Entries less the value of the Recognised Cost Job WIP Entries. For jobs with WIP Methods of Sales Value or Percentage of Completion, the WIP Cost Amount is normally 0.];
                ApplicationArea=#Jobs;
                SourceExpr="Total WIP Cost Amount" }

    { 19  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the sum of all applied costs that is based on to the selected job in the general ledger.;
                           ENG=Specifies the sum of all applied costs that is based on to the selected job in the general ledger.];
                ApplicationArea=#Jobs;
                SourceExpr="Applied Costs G/L Amount";
                Visible=FALSE }

    { 16  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the recognized sales amount that was last calculated for the job. The Recog. Sales Amount for the job is the sum of the Recognized Sales Job WIP Entries.;
                           ENG=Specifies the recognised sales amount that was last calculated for the job. The Recog. Sales Amount for the job is the sum of the Recognised Sales Job WIP Entries.];
                ApplicationArea=#Jobs;
                SourceExpr="Recog. Sales Amount" }

    { 18  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the Recognized Cost amount that was last calculated for the job. The Recognized Cost Amount for the job is the sum of the Recognized Cost Job WIP Entries.;
                           ENG=Specifies the Recognised Cost amount that was last calculated for the job. The Recognised Cost Amount for the job is the sum of the Recognised Cost Job WIP Entries.];
                ApplicationArea=#Jobs;
                SourceExpr="Recog. Costs Amount" }

    { 71  ;3   ;Field     ;
                Name=Recog. Profit Amount;
                CaptionML=[ENU=Recog. Profit Amount;
                           ENG=Recog. Profit Amount];
                ToolTipML=[ENU=Specifies the recognized profit amount for the job.;
                           ENG=Specifies the recognised profit amount for the job.];
                ApplicationArea=#Jobs;
                SourceExpr=CalcRecognizedProfitAmount }

    { 74  ;3   ;Field     ;
                Name=Recog. Profit %;
                CaptionML=[ENU=Recog. Profit %;
                           ENG=Recog. Profit %];
                ToolTipML=[ENU=Specifies the recognized profit percentage for the job.;
                           ENG=Specifies the recognised profit percentage for the job.];
                ApplicationArea=#Jobs;
                SourceExpr=CalcRecognizedProfitPercentage }

    { 15  ;3   ;Field     ;
                Name=Acc. WIP Costs Amount;
                CaptionML=[ENU=Acc. WIP Costs Amount;
                           ENG=Acc. WIP Costs Amount];
                ToolTipML=[ENU=Specifies the total WIP costs for the job.;
                           ENG=Specifies the total WIP costs for the job.];
                ApplicationArea=#Jobs;
                SourceExpr=CalcAccWIPCostsAmount;
                Visible=FALSE }

    { 13  ;3   ;Field     ;
                Name=Acc. WIP Sales Amount;
                CaptionML=[ENU=Acc. WIP Sales Amount;
                           ENG=Acc. WIP Sales Amount];
                ToolTipML=[ENU=Specifies the total WIP sales for the job.;
                           ENG=Specifies the total WIP sales for the job.];
                ApplicationArea=#Jobs;
                SourceExpr=CalcAccWIPSalesAmount;
                Visible=FALSE }

    { 11  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the sum of the recognized sales amount that is associated with job tasks.;
                           ENG=Specifies the sum of the recognised sales amount that is associated with job tasks.];
                ApplicationArea=#Jobs;
                SourceExpr="Calc. Recog. Sales Amount";
                Visible=FALSE }

    { 9   ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the sum of the recognized costs amount that is associated with job tasks.;
                           ENG=Specifies the sum of the recognised costs amount that is associated with job tasks.];
                ApplicationArea=#Jobs;
                SourceExpr="Calc. Recog. Costs Amount";
                Visible=FALSE }

    { 5   ;2   ;Group     ;
                CaptionML=[ENU=Posted;
                           ENG=Posted];
                GroupType=Group }

    { 116 ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the posting date that was entered when the Job Post WIP to general ledger batch job was last run.;
                           ENG=Specifies the posting date that was entered when the Job Post WIP to general ledger batch job was last run.];
                ApplicationArea=#Jobs;
                SourceExpr="WIP G/L Posting Date" }

    { 41  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the total WIP Sales amount that was last posted to the general ledger for the job. The WIP Sales Amount for the job is the value WIP Sales Job WIP G/L Entries less the value of the Recognized Sales Job WIP G/L Entries. For jobs with WIP Methods of Cost Value or Cost of Sales, the WIP Sales Amount is normally 0.;
                           ENG=Specifies the total WIP Sales amount that was last posted to the general ledger for the job. The WIP Sales Amount for the job is the value WIP Sales Job WIP G/L Entries less the value of the Recognised Sales Job WIP G/L Entries. For jobs with WIP Methods of Cost Value or Cost of Sales, the WIP Sales Amount is normally 0.];
                ApplicationArea=#Jobs;
                SourceExpr="Total WIP Sales G/L Amount" }

    { 118 ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the total WIP Cost amount that was last posted to the G/L for the job. The WIP Cost Amount for the job is the value WIP Cost Job WIP G/L Entries less the value of the Recognized Cost Job WIP G/L Entries. For jobs with WIP Methods of Sales Value or Percentage of Completion, the WIP Cost Amount is normally 0.;
                           ENG=Specifies the total WIP Cost amount that was last posted to the G/L for the job. The WIP Cost Amount for the job is the value WIP Cost Job WIP G/L Entries less the value of the Recognised Cost Job WIP G/L Entries. For jobs with WIP Methods of Sales Value or Percentage of Completion, the WIP Cost Amount is normally 0.];
                ApplicationArea=#Jobs;
                SourceExpr="Total WIP Cost G/L Amount" }

    { 28  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the total Recognized Sales amount that was last posted to the general ledger for the job. The Recognized Sales G/L amount for the job is the sum of the Recognized Sales Job WIP G/L Entries.;
                           ENG=Specifies the total Recognised Sales amount that was last posted to the general ledger for the job. The Recognised Sales G/L amount for the job is the sum of the Recognised Sales Job WIP G/L Entries.];
                ApplicationArea=#Jobs;
                SourceExpr="Recog. Sales G/L Amount" }

    { 29  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the total Recognized Cost amount that was last posted to the general ledger for the job. The Recognized Cost G/L amount for the job is the sum of the Recognized Cost Job WIP G/L Entries.;
                           ENG=Specifies the total Recognised Cost amount that was last posted to the general ledger for the job. The Recognised Cost G/L amount for the job is the sum of the Recognised Cost Job WIP G/L Entries.];
                ApplicationArea=#Jobs;
                SourceExpr="Recog. Costs G/L Amount" }

    { 76  ;3   ;Field     ;
                Name=Recog. Profit G/L Amount;
                CaptionML=[ENU=Recog. Profit G/L Amount;
                           ENG=Recog. Profit G/L Amount];
                ToolTipML=[ENU=Specifies the total recognized profit G/L amount for this job.;
                           ENG=Specifies the total recognised profit G/L amount for this job.];
                ApplicationArea=#Jobs;
                SourceExpr=CalcRecognizedProfitGLAmount }

    { 78  ;3   ;Field     ;
                Name=Recog. Profit G/L %;
                CaptionML=[ENU=Recog. Profit G/L %;
                           ENG=Recog. Profit G/L %];
                ToolTipML=[ENU=Specifies the recognized profit G/L percentage for this job.;
                           ENG=Specifies the recognised profit G/L percentage for this job.];
                ApplicationArea=#Jobs;
                SourceExpr=CalcRecognProfitGLPercentage }

    { 21  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the sum of the recognized sales general ledger amount that is associated with job tasks.;
                           ENG=Specifies the sum of the recognised sales general ledger amount that is associated with job tasks.];
                ApplicationArea=#Jobs;
                SourceExpr="Calc. Recog. Sales G/L Amount";
                Visible=FALSE }

    { 23  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the sum of the recognized costs general ledger amount that is associated with job tasks.;
                           ENG=Specifies the sum of the recognised costs general ledger amount that is associated with job tasks.];
                ApplicationArea=#Jobs;
                SourceExpr="Calc. Recog. Costs G/L Amount";
                Visible=FALSE }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1902018507;1;Part   ;
                ApplicationArea=#Jobs;
                SubPageLink=No.=FIELD(Bill-to Customer No.);
                PagePartID=Page9082;
                Visible=FALSE;
                PartType=Page }

    { 1902136407;1;Part   ;
                ApplicationArea=#Suite;
                SubPageLink=No.=FIELD(No.),
                            Resource Filter=FIELD(Resource Filter),
                            Posting Date Filter=FIELD(Posting Date Filter),
                            Resource Gr. Filter=FIELD(Resource Gr. Filter),
                            Planning Date Filter=FIELD(Planning Date Filter);
                PagePartID=Page9098;
                Visible=TRUE;
                PartType=Page }

    { 1905650007;1;Part   ;
                ApplicationArea=#Jobs;
                SubPageLink=No.=FIELD(No.),
                            Resource Filter=FIELD(Resource Filter),
                            Posting Date Filter=FIELD(Posting Date Filter),
                            Resource Gr. Filter=FIELD(Resource Gr. Filter),
                            Planning Date Filter=FIELD(Planning Date Filter);
                PagePartID=Page9099;
                Visible=FALSE;
                PartType=Page }

    { 44  ;1   ;Part      ;
                CaptionML=[ENU=Job Details;
                           ENG=Job Details];
                ApplicationArea=#Jobs;
                SubPageLink=No.=FIELD(No.);
                PagePartID=Page1030;
                Visible=JobSimplificationAvailable;
                PartType=Page }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=TRUE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      JobSimplificationAvailable@1000 : Boolean;

    LOCAL PROCEDURE BilltoCustomerNoOnAfterValidat@19044114();
    BEGIN
      CurrPage.UPDATE;
    END;

    BEGIN
    END.
  }
}

OBJECT Page 99000829 Firm Planned Prod. Order
{
  OBJECT-PROPERTIES
  {
    Date=16/03/20;
    Time=18:22:06;
    Modified=Yes;
    Version List=NAVW111.00.00.19846,WF;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Firm Planned Prod. Order;
               ENG=Firm Planned Prod. Order];
    SourceTable=Table5405;
    SourceTableView=WHERE(Status=CONST(Firm Planned));
    PageType=Document;
    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 59      ;1   ;ActionGroup;
                      CaptionML=[ENU=O&rder;
                                 ENG=O&rder];
                      Image=Order }
      { 62      ;2   ;Action    ;
                      CaptionML=[ENU=Co&mments;
                                 ENG=Co&mments];
                      ToolTipML=[ENU=View or add comments for the record.;
                                 ENG=View or add comments for the record.];
                      ApplicationArea=#Manufacturing;
                      RunObject=Page 99000838;
                      RunPageLink=Status=FIELD(Status),
                                  Prod. Order No.=FIELD(No.);
                      Image=ViewComments }
      { 60      ;2   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ENG=Dimensions];
                      ToolTipML=[ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                                 ENG=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyse transaction history.];
                      ApplicationArea=#Dimensions;
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDocDim;
                                 CurrPage.SAVERECORD;
                               END;
                                }
      { 67      ;2   ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=[ENU=Statistics;
                                 ENG=Statistics];
                      ToolTipML=[ENU=View statistical information, such as the value of posted entries, for the record.;
                                 ENG=View statistical information, such as the value of posted entries, for the record.];
                      ApplicationArea=#Manufacturing;
                      RunObject=Page 99000816;
                      RunPageLink=Status=FIELD(Status),
                                  No.=FIELD(No.),
                                  Date Filter=FIELD(Date Filter);
                      Promoted=Yes;
                      Image=Statistics;
                      PromotedCategory=Process }
      { 74      ;2   ;Action    ;
                      CaptionML=[ENU=Plannin&g;
                                 ENG=Plannin&g];
                      ToolTipML=[ENU=Plan supply orders for the production order order by order.;
                                 ENG=Plan supply orders for the production order order by order.];
                      ApplicationArea=#Planning;
                      Image=Planning;
                      OnAction=VAR
                                 OrderPlanning@1000 : Page 5522;
                               BEGIN
                                 OrderPlanning.SetProdOrder(Rec);
                                 OrderPlanning.RUNMODAL;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 22      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ENG=F&unctions];
                      Image=Action }
      { 23      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Re&fresh Production Order;
                                 ENG=Re&fresh Production Order];
                      ToolTipML=[ENU=Calculate changes made to the production order header without involving production BOM levels. The function calculates and initiates the values of the component lines and routing lines based on the master data defined in the assigned production BOM and routing, according to the order quantity and due date on the production order's header.;
                                 ENG=Calculate changes made to the production order header without involving production BOM levels. The function calculates and initiates the values of the component lines and routing lines based on the master data defined in the assigned production BOM and routing, according to the order quantity and due date on the production order's header.];
                      ApplicationArea=#Manufacturing;
                      Promoted=Yes;
                      Image=Refresh;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ProdOrder@1001 : Record 5405;
                               BEGIN
                                 ProdOrder.SETRANGE(Status,Status);
                                 ProdOrder.SETRANGE("No.","No.");
                                 REPORT.RUNMODAL(REPORT::"Refresh Production Order",TRUE,TRUE,ProdOrder);
                               END;
                                }
      { 24      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Re&plan;
                                 ENG=Re&plan];
                      ToolTipML=[ENU=Calculate changes made to components and routings lines including items on lower production BOM levels for which it may generate new production orders.;
                                 ENG=Calculate changes made to components and routings lines including items on lower production BOM levels for which it may generate new production orders.];
                      ApplicationArea=#Planning;
                      Promoted=Yes;
                      Image=Replan;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ProdOrder@1001 : Record 5405;
                               BEGIN
                                 ProdOrder.SETRANGE(Status,Status);
                                 ProdOrder.SETRANGE("No.","No.");
                                 REPORT.RUNMODAL(REPORT::"Replan Production Order",TRUE,TRUE,ProdOrder);
                               END;
                                }
      { 25      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Change &Status;
                                 ENG=Change &Status];
                      ToolTipML=[ENU=Change the production order to another status, such as Released.;
                                 ENG=Change the production order to another status, such as Released.];
                      ApplicationArea=#Manufacturing;
                      Promoted=Yes;
                      Image=ChangeStatus;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ApprovalsMgmt@1000000000 : Codeunit 1535;
                               BEGIN
                                 PerformeManualCheckAndRelease(Rec);
                                 CurrPage.UPDATE;
                                 CODEUNIT.RUN(CODEUNIT::"Prod. Order Status Management",Rec);
                               END;
                                }
      { 36      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=&Update Unit Cost;
                                 ENG=&Update Unit Cost];
                      ToolTipML=[ENU=Update the cost of the parent item per changes to the production BOM or routing.;
                                 ENG=Update the cost of the parent item per changes to the production BOM or routing.];
                      ApplicationArea=#Manufacturing;
                      Image=UpdateUnitCost;
                      OnAction=VAR
                                 ProdOrder@1001 : Record 5405;
                               BEGIN
                                 ProdOrder.SETRANGE(Status,Status);
                                 ProdOrder.SETRANGE("No.","No.");

                                 REPORT.RUNMODAL(REPORT::"Update Unit Cost",TRUE,TRUE,ProdOrder);
                               END;
                                }
      { 71      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=C&opy Prod. Order Document;
                                 ENG=C&opy Prod. Order Document];
                      ToolTipML=[ENU=Copy information from an existing production order record to a new one. This can be done regardless of the status type of the production order. You can, for example, copy from a released production order to a new planned production order. Note that before you start to copy, you have to create the new record.;
                                 ENG=Copy information from an existing production order record to a new one. This can be done regardless of the status type of the production order. You can, for example, copy from a released production order to a new planned production order. Note that before you start to copy, you have to create the new record.];
                      ApplicationArea=#Manufacturing;
                      Promoted=Yes;
                      Image=CopyDocument;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CopyProdOrderDoc.SetProdOrder(Rec);
                                 CopyProdOrderDoc.RUNMODAL;
                                 CLEAR(CopyProdOrderDoc);
                               END;
                                }
      { 1000000001;2 ;Action    ;
                      Name=Send For Approval;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=sendapprovalrequest;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 ApprovalsMgmt@1000000000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.OnSendProdOrderforApproval(Rec); //Marcus -+
                               END;
                                }
      { 37      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Print;
                                 ENG=&Print];
                      Image=Print }
      { 45      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Job Card;
                                 ENG=Job Card];
                      ToolTipML=[ENU=View a list of the work in progress of a production order. Output, scrapped quantity, and production lead time are shown depending on the operation.;
                                 ENG=View a list of the work in progress of a production order. Output, scrapped quantity, and production lead time are shown depending on the operation.];
                      ApplicationArea=#Manufacturing;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ManuPrintReport.PrintProductionOrder(Rec,0);
                               END;
                                }
      { 46      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Mat. &Requisition;
                                 ENG=Mat. &Requisition];
                      ToolTipML=[ENU=View a list of material requirements per production order. The report shows you the status of the production order, the quantity of end items and components with the corresponding required quantity. You can view the due date and location code of each component.;
                                 ENG=View a list of material requirements per production order. The report shows you the status of the production order, the quantity of end items and components with the corresponding required quantity. You can view the due date and location code of each component.];
                      ApplicationArea=#Manufacturing;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ManuPrintReport.PrintProductionOrder(Rec,1);
                               END;
                                }
      { 47      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Shortage List;
                                 ENG=Shortage List];
                      ToolTipML=[ENU=View a list of the missing quantity per production order. The report shows how the inventory development is planned from today until the set day - for example whether orders are still open.;
                                 ENG=View a list of the missing quantity per production order. The report shows how the inventory development is planned from today until the set day - for example whether orders are still open.];
                      ApplicationArea=#Manufacturing;
                      Image=Report;
                      OnAction=BEGIN
                                 ManuPrintReport.PrintProductionOrder(Rec,2);
                               END;
                                }
      { 1900000006;0 ;ActionContainer;
                      ActionContainerType=Reports }
      { 1906187306;1 ;Action    ;
                      CaptionML=[ENU=Subcontractor - Dispatch List;
                                 ENG=Subcontractor - Dispatch List];
                      ToolTipML=[ENU=View the list of material to be sent to manufacturing subcontractors.;
                                 ENG=View the list of material to be sent to manufacturing subcontractors.];
                      ApplicationArea=#Manufacturing;
                      RunObject=Report 99000789;
                      Promoted=No;
                      Image=Report;
                      PromotedCategory=Report }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENG=General] }

    { 27  ;2   ;Field     ;
                Lookup=No;
                ToolTipML=[ENU=Specifies the number of the involved entry or record, according to the specified number series.;
                           ENG=Specifies the number of the involved entry or record, according to the specified number series.];
                ApplicationArea=#Manufacturing;
                SourceExpr="No.";
                Importance=Promoted;
                OnAssistEdit=BEGIN
                               IF AssistEdit(xRec) THEN
                                 CurrPage.UPDATE;
                             END;
                              }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the description of the production order.;
                           ENG=Specifies the description of the production order.];
                ApplicationArea=#Manufacturing;
                SourceExpr=Description;
                Importance=Promoted }

    { 3   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies an additional part of the production order description.;
                           ENG=Specifies an additional part of the production order description.];
                ApplicationArea=#Manufacturing;
                SourceExpr="Description 2" }

    { 11  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the source type of the production order.;
                           ENG=Specifies the source type of the production order.];
                ApplicationArea=#Manufacturing;
                SourceExpr="Source Type";
                OnValidate=BEGIN
                             IF xRec."Source Type" <> "Source Type" THEN
                               "Source No." := '';
                           END;
                            }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the source document that the entry originates from.;
                           ENG=Specifies the number of the source document that the entry originates from.];
                ApplicationArea=#Manufacturing;
                SourceExpr="Source No." }

    { 16  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the search description.;
                           ENG=Specifies the search description.];
                ApplicationArea=#Manufacturing;
                SourceExpr="Search Description" }

    { 13  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies how many units of the item or the family to produce (production quantity).;
                           ENG=Specifies how many units of the item or the family to produce (production quantity).];
                ApplicationArea=#Manufacturing;
                SourceExpr=Quantity;
                Importance=Promoted }

    { 15  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the due date of the production order.;
                           ENG=Specifies the due date of the production order.];
                ApplicationArea=#Manufacturing;
                SourceExpr="Due Date" }

    { 72  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the ID of the user who is responsible for the document.;
                           ENG=Specifies the ID of the user who is responsible for the document.];
                ApplicationArea=#Manufacturing;
                SourceExpr="Assigned User ID" }

    { 51  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies when the production order card was last modified.;
                           ENG=Specifies when the production order card was last modified.];
                ApplicationArea=#Manufacturing;
                SourceExpr="Last Date Modified" }

    { 1000000000;2;Field  ;
                SourceExpr="Approval Status" }

    { 26  ;1   ;Part      ;
                Name=ProdOrderLines;
                ApplicationArea=#Manufacturing;
                SubPageLink=Prod. Order No.=FIELD(No.);
                PagePartID=Page99000830;
                PartType=Page }

    { 1907170701;1;Group  ;
                CaptionML=[ENU=Schedule;
                           ENG=Schedule] }

    { 28  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the starting time of the production order.;
                           ENG=Specifies the starting time of the production order.];
                ApplicationArea=#Manufacturing;
                SourceExpr="Starting Time";
                Importance=Promoted;
                OnValidate=BEGIN
                             StartingTimeOnAfterValidate;
                           END;
                            }

    { 30  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the starting date of the production order.;
                           ENG=Specifies the starting date of the production order.];
                ApplicationArea=#Manufacturing;
                SourceExpr="Starting Date";
                Importance=Promoted;
                OnValidate=BEGIN
                             StartingDateOnAfterValidate;
                           END;
                            }

    { 32  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the ending time of the production order.;
                           ENG=Specifies the ending time of the production order.];
                ApplicationArea=#Manufacturing;
                SourceExpr="Ending Time";
                Importance=Promoted;
                OnValidate=BEGIN
                             EndingTimeOnAfterValidate;
                           END;
                            }

    { 34  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the ending date of the production order.;
                           ENG=Specifies the ending date of the production order.];
                ApplicationArea=#Manufacturing;
                SourceExpr="Ending Date";
                Importance=Promoted;
                OnValidate=BEGIN
                             EndingDateOnAfterValidate;
                           END;
                            }

    { 1904784501;1;Group  ;
                CaptionML=[ENU=Posting;
                           ENG=Posting] }

    { 81  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies links between business transactions made for the item and an inventory account in the general ledger, to group amounts for that item type.;
                           ENG=Specifies links between business transactions made for the item and an inventory account in the general ledger, to group amounts for that item type.];
                ApplicationArea=#Manufacturing;
                SourceExpr="Inventory Posting Group";
                Importance=Promoted }

    { 83  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the item's product type to link transactions made for this item with the appropriate general ledger account according to the general posting setup.;
                           ENG=Specifies the item's product type to link transactions made for this item with the appropriate general ledger account according to the general posting setup.];
                ApplicationArea=#Manufacturing;
                SourceExpr="Gen. Prod. Posting Group" }

    { 85  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor's or customer's trade type to link transactions made for this business partner with the appropriate general ledger account according to the general posting setup.;
                           ENG=Specifies the vendor's or customer's trade type to link transactions made for this business partner with the appropriate general ledger account according to the general posting setup.];
                ApplicationArea=#Manufacturing;
                SourceExpr="Gen. Bus. Posting Group" }

    { 38  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for Shortcut Dimension 1, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                           ENG=Specifies the code for Shortcut Dimension 1, which is one of two global dimension codes that you set up in the General Ledger Setup window.];
                ApplicationArea=#Dimensions;
                SourceExpr="Shortcut Dimension 1 Code";
                OnValidate=BEGIN
                             ShortcutDimension1CodeOnAfterV;
                           END;
                            }

    { 40  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for Shortcut Dimension 2, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                           ENG=Specifies the code for Shortcut Dimension 2, which is one of two global dimension codes that you set up in the General Ledger Setup window.];
                ApplicationArea=#Dimensions;
                SourceExpr="Shortcut Dimension 2 Code";
                OnValidate=BEGIN
                             ShortcutDimension2CodeOnAfterV;
                           END;
                            }

    { 42  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the location code to which you want to post the finished product from this production order.;
                           ENG=Specifies the location code to which you want to post the finished product from this production order.];
                ApplicationArea=#Location;
                SourceExpr="Location Code";
                Importance=Promoted }

    { 49  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a bin to which you want to post the finished items.;
                           ENG=Specifies a bin to which you want to post the finished items.];
                ApplicationArea=#Warehouse;
                SourceExpr="Bin Code";
                Importance=Promoted }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=TRUE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      CopyProdOrderDoc@1000 : Report 99003802;
      ManuPrintReport@1001 : Codeunit 99000817;
      Text001@1000000000 : TextConst 'ENU=This document can only be released when the approval process is complete.';

    LOCAL PROCEDURE StartingTimeOnAfterValidate@19008557();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE StartingDateOnAfterValidate@19020273();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE EndingTimeOnAfterValidate@19075483();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE EndingDateOnAfterValidate@19076447();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ShortcutDimension1CodeOnAfterV@19029405();
    BEGIN
      CurrPage.ProdOrderLines.PAGE.UpdateForm(TRUE);
    END;

    LOCAL PROCEDURE ShortcutDimension2CodeOnAfterV@19008725();
    BEGIN
      CurrPage.ProdOrderLines.PAGE.UpdateForm(TRUE);
    END;

    PROCEDURE PerformeManualCheckAndRelease@1000000000(VAR ProdHeader@1000000000 : Record 5405);
    VAR
      ApprovalsMgmt@1000000001 : Codeunit 1535;
    BEGIN
      WITH ProdHeader DO
        IF Status = Status::"Firm Planned" THEN BEGIN
          IF ApprovalsMgmt.IsProdHeaderPendingApproval(ProdHeader) THEN
            ERROR(Text001);
      END;
    END;

    BEGIN
    END.
  }
}

